
oled_stm32f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009684  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012bc  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa4c  0800aa4c  000201c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa4c  0800aa4c  000201c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa4c  0800aa4c  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa4c  0800aa4c  0001aa4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa50  0800aa50  0001aa50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  0800aa54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c64  200001c4  0800ac18  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e28  0800ac18  00020e28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010558  00000000  00000000  000201ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ead  00000000  00000000  00030745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  000335f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  000343e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1c0  00000000  00000000  00035088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001325e  00000000  00000000  0004f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000883e1  00000000  00000000  000624a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea887  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc8  00000000  00000000  000ea8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001c4 	.word	0x200001c4
 8000128:	00000000 	.word	0x00000000
 800012c:	08009778 	.word	0x08009778

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001c8 	.word	0x200001c8
 8000148:	08009778 	.word	0x08009778

0800014c <read_keypad>:
#define C4_PIN GPIO_PIN_0

uint8_t key;

char read_keypad (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_RESET);  //Pull the R1 low
 8000150:	2200      	movs	r2, #0
 8000152:	2180      	movs	r1, #128	; 0x80
 8000154:	48b0      	ldr	r0, [pc, #704]	; (8000418 <read_keypad+0x2cc>)
 8000156:	f001 fbae 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 800015a:	2201      	movs	r2, #1
 800015c:	2140      	movs	r1, #64	; 0x40
 800015e:	48ae      	ldr	r0, [pc, #696]	; (8000418 <read_keypad+0x2cc>)
 8000160:	f001 fba9 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000164:	2201      	movs	r2, #1
 8000166:	2120      	movs	r1, #32
 8000168:	48ab      	ldr	r0, [pc, #684]	; (8000418 <read_keypad+0x2cc>)
 800016a:	f001 fba4 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 800016e:	2201      	movs	r2, #1
 8000170:	2110      	movs	r1, #16
 8000172:	48a9      	ldr	r0, [pc, #676]	; (8000418 <read_keypad+0x2cc>)
 8000174:	f001 fb9f 	bl	80018b6 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000178:	2108      	movs	r1, #8
 800017a:	48a7      	ldr	r0, [pc, #668]	; (8000418 <read_keypad+0x2cc>)
 800017c:	f001 fb84 	bl	8001888 <HAL_GPIO_ReadPin>
 8000180:	4603      	mov	r3, r0
 8000182:	2b00      	cmp	r3, #0
 8000184:	d109      	bne.n	800019a <read_keypad+0x4e>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8000186:	bf00      	nop
 8000188:	2108      	movs	r1, #8
 800018a:	48a3      	ldr	r0, [pc, #652]	; (8000418 <read_keypad+0x2cc>)
 800018c:	f001 fb7c 	bl	8001888 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d0f8      	beq.n	8000188 <read_keypad+0x3c>
		return '1';
 8000196:	2331      	movs	r3, #49	; 0x31
 8000198:	e13b      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 800019a:	2104      	movs	r1, #4
 800019c:	489e      	ldr	r0, [pc, #632]	; (8000418 <read_keypad+0x2cc>)
 800019e:	f001 fb73 	bl	8001888 <HAL_GPIO_ReadPin>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d109      	bne.n	80001bc <read_keypad+0x70>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80001a8:	bf00      	nop
 80001aa:	2104      	movs	r1, #4
 80001ac:	489a      	ldr	r0, [pc, #616]	; (8000418 <read_keypad+0x2cc>)
 80001ae:	f001 fb6b 	bl	8001888 <HAL_GPIO_ReadPin>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d0f8      	beq.n	80001aa <read_keypad+0x5e>
		return '2';
 80001b8:	2332      	movs	r3, #50	; 0x32
 80001ba:	e12a      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80001bc:	2102      	movs	r1, #2
 80001be:	4896      	ldr	r0, [pc, #600]	; (8000418 <read_keypad+0x2cc>)
 80001c0:	f001 fb62 	bl	8001888 <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d109      	bne.n	80001de <read_keypad+0x92>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 80001ca:	bf00      	nop
 80001cc:	2102      	movs	r1, #2
 80001ce:	4892      	ldr	r0, [pc, #584]	; (8000418 <read_keypad+0x2cc>)
 80001d0:	f001 fb5a 	bl	8001888 <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d0f8      	beq.n	80001cc <read_keypad+0x80>
		return '3';
 80001da:	2333      	movs	r3, #51	; 0x33
 80001dc:	e119      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 80001de:	2101      	movs	r1, #1
 80001e0:	488d      	ldr	r0, [pc, #564]	; (8000418 <read_keypad+0x2cc>)
 80001e2:	f001 fb51 	bl	8001888 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d109      	bne.n	8000200 <read_keypad+0xb4>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 80001ec:	bf00      	nop
 80001ee:	2101      	movs	r1, #1
 80001f0:	4889      	ldr	r0, [pc, #548]	; (8000418 <read_keypad+0x2cc>)
 80001f2:	f001 fb49 	bl	8001888 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d0f8      	beq.n	80001ee <read_keypad+0xa2>
		return 'A';
 80001fc:	2341      	movs	r3, #65	; 0x41
 80001fe:	e108      	b.n	8000412 <read_keypad+0x2c6>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 8000200:	2201      	movs	r2, #1
 8000202:	2180      	movs	r1, #128	; 0x80
 8000204:	4884      	ldr	r0, [pc, #528]	; (8000418 <read_keypad+0x2cc>)
 8000206:	f001 fb56 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_RESET);  // Pull the R2 High
 800020a:	2200      	movs	r2, #0
 800020c:	2140      	movs	r1, #64	; 0x40
 800020e:	4882      	ldr	r0, [pc, #520]	; (8000418 <read_keypad+0x2cc>)
 8000210:	f001 fb51 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000214:	2201      	movs	r2, #1
 8000216:	2120      	movs	r1, #32
 8000218:	487f      	ldr	r0, [pc, #508]	; (8000418 <read_keypad+0x2cc>)
 800021a:	f001 fb4c 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 800021e:	2201      	movs	r2, #1
 8000220:	2110      	movs	r1, #16
 8000222:	487d      	ldr	r0, [pc, #500]	; (8000418 <read_keypad+0x2cc>)
 8000224:	f001 fb47 	bl	80018b6 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000228:	2108      	movs	r1, #8
 800022a:	487b      	ldr	r0, [pc, #492]	; (8000418 <read_keypad+0x2cc>)
 800022c:	f001 fb2c 	bl	8001888 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d109      	bne.n	800024a <read_keypad+0xfe>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8000236:	bf00      	nop
 8000238:	2108      	movs	r1, #8
 800023a:	4877      	ldr	r0, [pc, #476]	; (8000418 <read_keypad+0x2cc>)
 800023c:	f001 fb24 	bl	8001888 <HAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f8      	beq.n	8000238 <read_keypad+0xec>
		return '4';
 8000246:	2334      	movs	r3, #52	; 0x34
 8000248:	e0e3      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 800024a:	2104      	movs	r1, #4
 800024c:	4872      	ldr	r0, [pc, #456]	; (8000418 <read_keypad+0x2cc>)
 800024e:	f001 fb1b 	bl	8001888 <HAL_GPIO_ReadPin>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d109      	bne.n	800026c <read_keypad+0x120>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 8000258:	bf00      	nop
 800025a:	2104      	movs	r1, #4
 800025c:	486e      	ldr	r0, [pc, #440]	; (8000418 <read_keypad+0x2cc>)
 800025e:	f001 fb13 	bl	8001888 <HAL_GPIO_ReadPin>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d0f8      	beq.n	800025a <read_keypad+0x10e>
		return '5';
 8000268:	2335      	movs	r3, #53	; 0x35
 800026a:	e0d2      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 800026c:	2102      	movs	r1, #2
 800026e:	486a      	ldr	r0, [pc, #424]	; (8000418 <read_keypad+0x2cc>)
 8000270:	f001 fb0a 	bl	8001888 <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d109      	bne.n	800028e <read_keypad+0x142>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 800027a:	bf00      	nop
 800027c:	2102      	movs	r1, #2
 800027e:	4866      	ldr	r0, [pc, #408]	; (8000418 <read_keypad+0x2cc>)
 8000280:	f001 fb02 	bl	8001888 <HAL_GPIO_ReadPin>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f8      	beq.n	800027c <read_keypad+0x130>
		return '6';
 800028a:	2336      	movs	r3, #54	; 0x36
 800028c:	e0c1      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 800028e:	2101      	movs	r1, #1
 8000290:	4861      	ldr	r0, [pc, #388]	; (8000418 <read_keypad+0x2cc>)
 8000292:	f001 faf9 	bl	8001888 <HAL_GPIO_ReadPin>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d109      	bne.n	80002b0 <read_keypad+0x164>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 800029c:	bf00      	nop
 800029e:	2101      	movs	r1, #1
 80002a0:	485d      	ldr	r0, [pc, #372]	; (8000418 <read_keypad+0x2cc>)
 80002a2:	f001 faf1 	bl	8001888 <HAL_GPIO_ReadPin>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d0f8      	beq.n	800029e <read_keypad+0x152>
		return 'B';
 80002ac:	2342      	movs	r3, #66	; 0x42
 80002ae:	e0b0      	b.n	8000412 <read_keypad+0x2c6>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 80002b0:	2201      	movs	r2, #1
 80002b2:	2180      	movs	r1, #128	; 0x80
 80002b4:	4858      	ldr	r0, [pc, #352]	; (8000418 <read_keypad+0x2cc>)
 80002b6:	f001 fafe 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 80002ba:	2201      	movs	r2, #1
 80002bc:	2140      	movs	r1, #64	; 0x40
 80002be:	4856      	ldr	r0, [pc, #344]	; (8000418 <read_keypad+0x2cc>)
 80002c0:	f001 faf9 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_RESET);  // Pull the R3 High
 80002c4:	2200      	movs	r2, #0
 80002c6:	2120      	movs	r1, #32
 80002c8:	4853      	ldr	r0, [pc, #332]	; (8000418 <read_keypad+0x2cc>)
 80002ca:	f001 faf4 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_SET);  // Pull the R4 High
 80002ce:	2201      	movs	r2, #1
 80002d0:	2110      	movs	r1, #16
 80002d2:	4851      	ldr	r0, [pc, #324]	; (8000418 <read_keypad+0x2cc>)
 80002d4:	f001 faef 	bl	80018b6 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 80002d8:	2108      	movs	r1, #8
 80002da:	484f      	ldr	r0, [pc, #316]	; (8000418 <read_keypad+0x2cc>)
 80002dc:	f001 fad4 	bl	8001888 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d109      	bne.n	80002fa <read_keypad+0x1ae>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 80002e6:	bf00      	nop
 80002e8:	2108      	movs	r1, #8
 80002ea:	484b      	ldr	r0, [pc, #300]	; (8000418 <read_keypad+0x2cc>)
 80002ec:	f001 facc 	bl	8001888 <HAL_GPIO_ReadPin>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f8      	beq.n	80002e8 <read_keypad+0x19c>
		return '7';
 80002f6:	2337      	movs	r3, #55	; 0x37
 80002f8:	e08b      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80002fa:	2104      	movs	r1, #4
 80002fc:	4846      	ldr	r0, [pc, #280]	; (8000418 <read_keypad+0x2cc>)
 80002fe:	f001 fac3 	bl	8001888 <HAL_GPIO_ReadPin>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d109      	bne.n	800031c <read_keypad+0x1d0>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 8000308:	bf00      	nop
 800030a:	2104      	movs	r1, #4
 800030c:	4842      	ldr	r0, [pc, #264]	; (8000418 <read_keypad+0x2cc>)
 800030e:	f001 fabb 	bl	8001888 <HAL_GPIO_ReadPin>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f8      	beq.n	800030a <read_keypad+0x1be>
		return '8';
 8000318:	2338      	movs	r3, #56	; 0x38
 800031a:	e07a      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 800031c:	2102      	movs	r1, #2
 800031e:	483e      	ldr	r0, [pc, #248]	; (8000418 <read_keypad+0x2cc>)
 8000320:	f001 fab2 	bl	8001888 <HAL_GPIO_ReadPin>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d109      	bne.n	800033e <read_keypad+0x1f2>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 800032a:	bf00      	nop
 800032c:	2102      	movs	r1, #2
 800032e:	483a      	ldr	r0, [pc, #232]	; (8000418 <read_keypad+0x2cc>)
 8000330:	f001 faaa 	bl	8001888 <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f8      	beq.n	800032c <read_keypad+0x1e0>
		return '9';
 800033a:	2339      	movs	r3, #57	; 0x39
 800033c:	e069      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 800033e:	2101      	movs	r1, #1
 8000340:	4835      	ldr	r0, [pc, #212]	; (8000418 <read_keypad+0x2cc>)
 8000342:	f001 faa1 	bl	8001888 <HAL_GPIO_ReadPin>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d109      	bne.n	8000360 <read_keypad+0x214>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 800034c:	bf00      	nop
 800034e:	2101      	movs	r1, #1
 8000350:	4831      	ldr	r0, [pc, #196]	; (8000418 <read_keypad+0x2cc>)
 8000352:	f001 fa99 	bl	8001888 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0f8      	beq.n	800034e <read_keypad+0x202>
		return 'C';
 800035c:	2343      	movs	r3, #67	; 0x43
 800035e:	e058      	b.n	8000412 <read_keypad+0x2c6>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_PORT, R1_PIN, GPIO_PIN_SET);  //Pull the R1 low
 8000360:	2201      	movs	r2, #1
 8000362:	2180      	movs	r1, #128	; 0x80
 8000364:	482c      	ldr	r0, [pc, #176]	; (8000418 <read_keypad+0x2cc>)
 8000366:	f001 faa6 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_PORT, R2_PIN, GPIO_PIN_SET);  // Pull the R2 High
 800036a:	2201      	movs	r2, #1
 800036c:	2140      	movs	r1, #64	; 0x40
 800036e:	482a      	ldr	r0, [pc, #168]	; (8000418 <read_keypad+0x2cc>)
 8000370:	f001 faa1 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_PORT, R3_PIN, GPIO_PIN_SET);  // Pull the R3 High
 8000374:	2201      	movs	r2, #1
 8000376:	2120      	movs	r1, #32
 8000378:	4827      	ldr	r0, [pc, #156]	; (8000418 <read_keypad+0x2cc>)
 800037a:	f001 fa9c 	bl	80018b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_PORT, R4_PIN, GPIO_PIN_RESET);  // Pull the R4 High
 800037e:	2200      	movs	r2, #0
 8000380:	2110      	movs	r1, #16
 8000382:	4825      	ldr	r0, [pc, #148]	; (8000418 <read_keypad+0x2cc>)
 8000384:	f001 fa97 	bl	80018b6 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)))   // if the Col 1 is low
 8000388:	2108      	movs	r1, #8
 800038a:	4823      	ldr	r0, [pc, #140]	; (8000418 <read_keypad+0x2cc>)
 800038c:	f001 fa7c 	bl	8001888 <HAL_GPIO_ReadPin>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d109      	bne.n	80003aa <read_keypad+0x25e>
	{
		while (!(HAL_GPIO_ReadPin (C1_PORT, C1_PIN)));   // wait till the button is pressed
 8000396:	bf00      	nop
 8000398:	2108      	movs	r1, #8
 800039a:	481f      	ldr	r0, [pc, #124]	; (8000418 <read_keypad+0x2cc>)
 800039c:	f001 fa74 	bl	8001888 <HAL_GPIO_ReadPin>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f8      	beq.n	8000398 <read_keypad+0x24c>
		return '*';
 80003a6:	232a      	movs	r3, #42	; 0x2a
 80003a8:	e033      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)))   // if the Col 2 is low
 80003aa:	2104      	movs	r1, #4
 80003ac:	481a      	ldr	r0, [pc, #104]	; (8000418 <read_keypad+0x2cc>)
 80003ae:	f001 fa6b 	bl	8001888 <HAL_GPIO_ReadPin>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d109      	bne.n	80003cc <read_keypad+0x280>
	{
		while (!(HAL_GPIO_ReadPin (C2_PORT, C2_PIN)));   // wait till the button is pressed
 80003b8:	bf00      	nop
 80003ba:	2104      	movs	r1, #4
 80003bc:	4816      	ldr	r0, [pc, #88]	; (8000418 <read_keypad+0x2cc>)
 80003be:	f001 fa63 	bl	8001888 <HAL_GPIO_ReadPin>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0f8      	beq.n	80003ba <read_keypad+0x26e>
		return '0';
 80003c8:	2330      	movs	r3, #48	; 0x30
 80003ca:	e022      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)))   // if the Col 3 is low
 80003cc:	2102      	movs	r1, #2
 80003ce:	4812      	ldr	r0, [pc, #72]	; (8000418 <read_keypad+0x2cc>)
 80003d0:	f001 fa5a 	bl	8001888 <HAL_GPIO_ReadPin>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d109      	bne.n	80003ee <read_keypad+0x2a2>
	{
		while (!(HAL_GPIO_ReadPin (C3_PORT, C3_PIN)));   // wait till the button is pressed
 80003da:	bf00      	nop
 80003dc:	2102      	movs	r1, #2
 80003de:	480e      	ldr	r0, [pc, #56]	; (8000418 <read_keypad+0x2cc>)
 80003e0:	f001 fa52 	bl	8001888 <HAL_GPIO_ReadPin>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d0f8      	beq.n	80003dc <read_keypad+0x290>
		return '#';
 80003ea:	2323      	movs	r3, #35	; 0x23
 80003ec:	e011      	b.n	8000412 <read_keypad+0x2c6>
	}

	if (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)))   // if the Col 4 is low
 80003ee:	2101      	movs	r1, #1
 80003f0:	4809      	ldr	r0, [pc, #36]	; (8000418 <read_keypad+0x2cc>)
 80003f2:	f001 fa49 	bl	8001888 <HAL_GPIO_ReadPin>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d109      	bne.n	8000410 <read_keypad+0x2c4>
	{
		while (!(HAL_GPIO_ReadPin (C4_PORT, C4_PIN)));   // wait till the button is pressed
 80003fc:	bf00      	nop
 80003fe:	2101      	movs	r1, #1
 8000400:	4805      	ldr	r0, [pc, #20]	; (8000418 <read_keypad+0x2cc>)
 8000402:	f001 fa41 	bl	8001888 <HAL_GPIO_ReadPin>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f8      	beq.n	80003fe <read_keypad+0x2b2>
		return 'D';
 800040c:	2344      	movs	r3, #68	; 0x44
 800040e:	e000      	b.n	8000412 <read_keypad+0x2c6>
	}
	else return 'x';
 8000410:	2378      	movs	r3, #120	; 0x78
}
 8000412:	4618      	mov	r0, r3
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010800 	.word	0x40010800

0800041c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000422:	f000 ff19 	bl	8001258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000426:	f000 f905 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042a:	f000 f98d 	bl	8000748 <MX_GPIO_Init>
  MX_I2C1_Init();
 800042e:	f000 f95d 	bl	80006ec <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000432:	f008 f93b 	bl	80086ac <MX_USB_DEVICE_Init>
//
//  	if(HAL_I2C_IsDeviceReady(&hi2c1,i,1,10000)==HAL_OK)
//  		break;
//  }

	SSD1306_Init(); // initialize the display
 8000436:	f000 fa4b 	bl	80008d0 <SSD1306_Init>
	SSD1306_GotoXY(0, 0);
 800043a:	2100      	movs	r1, #0
 800043c:	2000      	movs	r0, #0
 800043e:	f000 fbaf 	bl	8000ba0 <SSD1306_GotoXY>

	SSD1306_Clear();
 8000442:	f000 fd63 	bl	8000f0c <SSD1306_Clear>

	SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 8000446:	2301      	movs	r3, #1
 8000448:	9301      	str	r3, [sp, #4]
 800044a:	2340      	movs	r3, #64	; 0x40
 800044c:	9300      	str	r3, [sp, #0]
 800044e:	2380      	movs	r3, #128	; 0x80
 8000450:	4a70      	ldr	r2, [pc, #448]	; (8000614 <main+0x1f8>)
 8000452:	2100      	movs	r1, #0
 8000454:	2000      	movs	r0, #0
 8000456:	f000 f9d2 	bl	80007fe <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 800045a:	f000 fafd 	bl	8000a58 <SSD1306_UpdateScreen>

	HAL_Delay(5000);
 800045e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000462:	f000 ff5b 	bl	800131c <HAL_Delay>
	SSD1306_Clear();
 8000466:	f000 fd51 	bl	8000f0c <SSD1306_Clear>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		key = read_keypad ();
 800046a:	f7ff fe6f 	bl	800014c <read_keypad>
 800046e:	4603      	mov	r3, r0
 8000470:	461a      	mov	r2, r3
 8000472:	4b69      	ldr	r3, [pc, #420]	; (8000618 <main+0x1fc>)
 8000474:	701a      	strb	r2, [r3, #0]

			  if (key != 0x01){
 8000476:	4b68      	ldr	r3, [pc, #416]	; (8000618 <main+0x1fc>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b01      	cmp	r3, #1
 800047c:	f000 8090 	beq.w	80005a0 <main+0x184>

			  if (key == '1')  keyboardhid.KEYCODE1 = 0x1E;
 8000480:	4b65      	ldr	r3, [pc, #404]	; (8000618 <main+0x1fc>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b31      	cmp	r3, #49	; 0x31
 8000486:	d102      	bne.n	800048e <main+0x72>
 8000488:	4b64      	ldr	r3, [pc, #400]	; (800061c <main+0x200>)
 800048a:	221e      	movs	r2, #30
 800048c:	709a      	strb	r2, [r3, #2]
			  if (key == '2')  keyboardhid.KEYCODE1 = 0x1F;
 800048e:	4b62      	ldr	r3, [pc, #392]	; (8000618 <main+0x1fc>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b32      	cmp	r3, #50	; 0x32
 8000494:	d102      	bne.n	800049c <main+0x80>
 8000496:	4b61      	ldr	r3, [pc, #388]	; (800061c <main+0x200>)
 8000498:	221f      	movs	r2, #31
 800049a:	709a      	strb	r2, [r3, #2]
			  if (key == '3')  keyboardhid.KEYCODE1 = 0x20;
 800049c:	4b5e      	ldr	r3, [pc, #376]	; (8000618 <main+0x1fc>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b33      	cmp	r3, #51	; 0x33
 80004a2:	d102      	bne.n	80004aa <main+0x8e>
 80004a4:	4b5d      	ldr	r3, [pc, #372]	; (800061c <main+0x200>)
 80004a6:	2220      	movs	r2, #32
 80004a8:	709a      	strb	r2, [r3, #2]
			  if (key == '4')  keyboardhid.KEYCODE1 = 0x21;
 80004aa:	4b5b      	ldr	r3, [pc, #364]	; (8000618 <main+0x1fc>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b34      	cmp	r3, #52	; 0x34
 80004b0:	d102      	bne.n	80004b8 <main+0x9c>
 80004b2:	4b5a      	ldr	r3, [pc, #360]	; (800061c <main+0x200>)
 80004b4:	2221      	movs	r2, #33	; 0x21
 80004b6:	709a      	strb	r2, [r3, #2]
			  if (key == '5')  keyboardhid.KEYCODE1 = 0x22;
 80004b8:	4b57      	ldr	r3, [pc, #348]	; (8000618 <main+0x1fc>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b35      	cmp	r3, #53	; 0x35
 80004be:	d102      	bne.n	80004c6 <main+0xaa>
 80004c0:	4b56      	ldr	r3, [pc, #344]	; (800061c <main+0x200>)
 80004c2:	2222      	movs	r2, #34	; 0x22
 80004c4:	709a      	strb	r2, [r3, #2]
			  if (key == '6')  keyboardhid.KEYCODE1 = 0x23;
 80004c6:	4b54      	ldr	r3, [pc, #336]	; (8000618 <main+0x1fc>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b36      	cmp	r3, #54	; 0x36
 80004cc:	d102      	bne.n	80004d4 <main+0xb8>
 80004ce:	4b53      	ldr	r3, [pc, #332]	; (800061c <main+0x200>)
 80004d0:	2223      	movs	r2, #35	; 0x23
 80004d2:	709a      	strb	r2, [r3, #2]
			  if (key == '7')  keyboardhid.KEYCODE1 = 0x24;
 80004d4:	4b50      	ldr	r3, [pc, #320]	; (8000618 <main+0x1fc>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b37      	cmp	r3, #55	; 0x37
 80004da:	d102      	bne.n	80004e2 <main+0xc6>
 80004dc:	4b4f      	ldr	r3, [pc, #316]	; (800061c <main+0x200>)
 80004de:	2224      	movs	r2, #36	; 0x24
 80004e0:	709a      	strb	r2, [r3, #2]
			  if (key == '8')  keyboardhid.KEYCODE1 = 0x25;
 80004e2:	4b4d      	ldr	r3, [pc, #308]	; (8000618 <main+0x1fc>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b38      	cmp	r3, #56	; 0x38
 80004e8:	d102      	bne.n	80004f0 <main+0xd4>
 80004ea:	4b4c      	ldr	r3, [pc, #304]	; (800061c <main+0x200>)
 80004ec:	2225      	movs	r2, #37	; 0x25
 80004ee:	709a      	strb	r2, [r3, #2]
			  if (key == '9')  keyboardhid.KEYCODE1 = 0x26;
 80004f0:	4b49      	ldr	r3, [pc, #292]	; (8000618 <main+0x1fc>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b39      	cmp	r3, #57	; 0x39
 80004f6:	d102      	bne.n	80004fe <main+0xe2>
 80004f8:	4b48      	ldr	r3, [pc, #288]	; (800061c <main+0x200>)
 80004fa:	2226      	movs	r2, #38	; 0x26
 80004fc:	709a      	strb	r2, [r3, #2]
			  if (key == '0')  keyboardhid.KEYCODE1 = 0x27;
 80004fe:	4b46      	ldr	r3, [pc, #280]	; (8000618 <main+0x1fc>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b30      	cmp	r3, #48	; 0x30
 8000504:	d102      	bne.n	800050c <main+0xf0>
 8000506:	4b45      	ldr	r3, [pc, #276]	; (800061c <main+0x200>)
 8000508:	2227      	movs	r2, #39	; 0x27
 800050a:	709a      	strb	r2, [r3, #2]

			  if (key == 'A')
 800050c:	4b42      	ldr	r3, [pc, #264]	; (8000618 <main+0x1fc>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b41      	cmp	r3, #65	; 0x41
 8000512:	d105      	bne.n	8000520 <main+0x104>
			  {
				  keyboardhid.MODIFIER = 0x02;  // left shift pressed
 8000514:	4b41      	ldr	r3, [pc, #260]	; (800061c <main+0x200>)
 8000516:	2202      	movs	r2, #2
 8000518:	701a      	strb	r2, [r3, #0]
				  keyboardhid.KEYCODE1 = 0x04;  // press 'a'
 800051a:	4b40      	ldr	r3, [pc, #256]	; (800061c <main+0x200>)
 800051c:	2204      	movs	r2, #4
 800051e:	709a      	strb	r2, [r3, #2]
			  }
			  if (key == 'B')
 8000520:	4b3d      	ldr	r3, [pc, #244]	; (8000618 <main+0x1fc>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b42      	cmp	r3, #66	; 0x42
 8000526:	d105      	bne.n	8000534 <main+0x118>
			  {
				  keyboardhid.MODIFIER = 0x02;  // left shift pressed
 8000528:	4b3c      	ldr	r3, [pc, #240]	; (800061c <main+0x200>)
 800052a:	2202      	movs	r2, #2
 800052c:	701a      	strb	r2, [r3, #0]
				  keyboardhid.KEYCODE1 = 0x05;  // press 'a'
 800052e:	4b3b      	ldr	r3, [pc, #236]	; (800061c <main+0x200>)
 8000530:	2205      	movs	r2, #5
 8000532:	709a      	strb	r2, [r3, #2]
			  }
			  if (key == 'C')
 8000534:	4b38      	ldr	r3, [pc, #224]	; (8000618 <main+0x1fc>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b43      	cmp	r3, #67	; 0x43
 800053a:	d105      	bne.n	8000548 <main+0x12c>
			  {
				  keyboardhid.MODIFIER = 0x02;  // left shift pressed
 800053c:	4b37      	ldr	r3, [pc, #220]	; (800061c <main+0x200>)
 800053e:	2202      	movs	r2, #2
 8000540:	701a      	strb	r2, [r3, #0]
				  keyboardhid.KEYCODE1 = 0x06;  // press 'a'
 8000542:	4b36      	ldr	r3, [pc, #216]	; (800061c <main+0x200>)
 8000544:	2206      	movs	r2, #6
 8000546:	709a      	strb	r2, [r3, #2]
			  }
			  if (key == 'D')
 8000548:	4b33      	ldr	r3, [pc, #204]	; (8000618 <main+0x1fc>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b44      	cmp	r3, #68	; 0x44
 800054e:	d105      	bne.n	800055c <main+0x140>
			  {
				  keyboardhid.MODIFIER = 0x02;  // left shift pressed
 8000550:	4b32      	ldr	r3, [pc, #200]	; (800061c <main+0x200>)
 8000552:	2202      	movs	r2, #2
 8000554:	701a      	strb	r2, [r3, #0]
				  keyboardhid.KEYCODE1 = 0x07;  // press 'a'
 8000556:	4b31      	ldr	r3, [pc, #196]	; (800061c <main+0x200>)
 8000558:	2207      	movs	r2, #7
 800055a:	709a      	strb	r2, [r3, #2]
			  }

			  if (key == '*')
 800055c:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <main+0x1fc>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b2a      	cmp	r3, #42	; 0x2a
 8000562:	d105      	bne.n	8000570 <main+0x154>
			  {
				  keyboardhid.MODIFIER = 0x02;  // left shift pressed
 8000564:	4b2d      	ldr	r3, [pc, #180]	; (800061c <main+0x200>)
 8000566:	2202      	movs	r2, #2
 8000568:	701a      	strb	r2, [r3, #0]
				  keyboardhid.KEYCODE1 = 0x25;  // press '*'
 800056a:	4b2c      	ldr	r3, [pc, #176]	; (800061c <main+0x200>)
 800056c:	2225      	movs	r2, #37	; 0x25
 800056e:	709a      	strb	r2, [r3, #2]
			  }

			  if (key == '#')
 8000570:	4b29      	ldr	r3, [pc, #164]	; (8000618 <main+0x1fc>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b23      	cmp	r3, #35	; 0x23
 8000576:	d105      	bne.n	8000584 <main+0x168>
			  {
				  keyboardhid.MODIFIER = 0x02;  // left shift pressed
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <main+0x200>)
 800057a:	2202      	movs	r2, #2
 800057c:	701a      	strb	r2, [r3, #0]
				  keyboardhid.KEYCODE1 = 0x20;  // press '#'
 800057e:	4b27      	ldr	r3, [pc, #156]	; (800061c <main+0x200>)
 8000580:	2220      	movs	r2, #32
 8000582:	709a      	strb	r2, [r3, #2]
			  }


			  HAL_Delay (50);
 8000584:	2032      	movs	r0, #50	; 0x32
 8000586:	f000 fec9 	bl	800131c <HAL_Delay>
			  keyboardhid.MODIFIER = 0x00;  // shift release
 800058a:	4b24      	ldr	r3, [pc, #144]	; (800061c <main+0x200>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
			  keyboardhid.KEYCODE1 = 0x00;  // release key
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <main+0x200>)
 8000592:	2200      	movs	r2, #0
 8000594:	709a      	strb	r2, [r3, #2]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000596:	2208      	movs	r2, #8
 8000598:	4920      	ldr	r1, [pc, #128]	; (800061c <main+0x200>)
 800059a:	4821      	ldr	r0, [pc, #132]	; (8000620 <main+0x204>)
 800059c:	f006 ff96 	bl	80074cc <USBD_HID_SendReport>
			  }


		//SSD1306_Clear();
		SSD1306_DrawLine(30, 0, 30, 64, 1);   // dik ayırma çizgisi
 80005a0:	2301      	movs	r3, #1
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2340      	movs	r3, #64	; 0x40
 80005a6:	221e      	movs	r2, #30
 80005a8:	2100      	movs	r1, #0
 80005aa:	201e      	movs	r0, #30
 80005ac:	f000 fbb3 	bl	8000d16 <SSD1306_DrawLine>
		SSD1306_DrawLine(30, 32, 128, 32, 1); // yatay ayırma çizgisi
 80005b0:	2301      	movs	r3, #1
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2320      	movs	r3, #32
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	2120      	movs	r1, #32
 80005ba:	201e      	movs	r0, #30
 80005bc:	f000 fbab 	bl	8000d16 <SSD1306_DrawLine>
		SSD1306_DrawBitmap(0, 32, MouseIcon, 28, 28, 1);
 80005c0:	2301      	movs	r3, #1
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	231c      	movs	r3, #28
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	231c      	movs	r3, #28
 80005ca:	4a16      	ldr	r2, [pc, #88]	; (8000624 <main+0x208>)
 80005cc:	2120      	movs	r1, #32
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f915 	bl	80007fe <SSD1306_DrawBitmap>
		SSD1306_DrawBitmap(30, 0, OrbitIcon, 24, 24, 1);
 80005d4:	2301      	movs	r3, #1
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2318      	movs	r3, #24
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2318      	movs	r3, #24
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <main+0x20c>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	201e      	movs	r0, #30
 80005e4:	f000 f90b 	bl	80007fe <SSD1306_DrawBitmap>
		SSD1306_GotoXY (0, 0);
 80005e8:	2100      	movs	r1, #0
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 fad8 	bl	8000ba0 <SSD1306_GotoXY>
		char mesaj[1];
		sprintf(mesaj,"%c",key);
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <main+0x1fc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	490c      	ldr	r1, [pc, #48]	; (800062c <main+0x210>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f008 fc42 	bl	8008e84 <siprintf>
		SSD1306_Puts(mesaj, &Font_11x18, 1);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2201      	movs	r2, #1
 8000604:	490a      	ldr	r1, [pc, #40]	; (8000630 <main+0x214>)
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fb60 	bl	8000ccc <SSD1306_Puts>
//SSD1306_Puts(Char key,FontDef_t* Font_16x26, 1);
		SSD1306_UpdateScreen();
 800060c:	f000 fa24 	bl	8000a58 <SSD1306_UpdateScreen>
	while (1) {
 8000610:	e72b      	b.n	800046a <main+0x4e>
 8000612:	bf00      	nop
 8000614:	0800a548 	.word	0x0800a548
 8000618:	2000023c 	.word	0x2000023c
 800061c:	20000234 	.word	0x20000234
 8000620:	20000654 	.word	0x20000654
 8000624:	0800a948 	.word	0x0800a948
 8000628:	0800a9b8 	.word	0x0800a9b8
 800062c:	08009790 	.word	0x08009790
 8000630:	20000000 	.word	0x20000000

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800063e:	2228      	movs	r2, #40	; 0x28
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f008 fc16 	bl	8008e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000672:	2301      	movs	r3, #1
 8000674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000680:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fb50 	bl	8003d30 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000696:	f000 f8ad 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	2101      	movs	r1, #1
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 fdbc 	bl	8004234 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006c2:	f000 f897 	bl	80007f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006c6:	2310      	movs	r3, #16
 80006c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80006ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ce:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 ff32 	bl	800453c <HAL_RCCEx_PeriphCLKConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006de:	f000 f889 	bl	80007f4 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f001 f8dd 	bl	80018e8 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 f85e 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200001e0 	.word	0x200001e0
 8000740:	40005400 	.word	0x40005400
 8000744:	00061a80 	.word	0x00061a80

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_GPIO_Init+0xa4>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a22      	ldr	r2, [pc, #136]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_GPIO_Init+0xa4>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0320 	and.w	r3, r3, #32
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_GPIO_Init+0xa4>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_GPIO_Init+0xa4>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a16      	ldr	r2, [pc, #88]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_GPIO_Init+0xa4>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	21f0      	movs	r1, #240	; 0xf0
 80007a8:	4811      	ldr	r0, [pc, #68]	; (80007f0 <MX_GPIO_Init+0xa8>)
 80007aa:	f001 f884 	bl	80018b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007ae:	230f      	movs	r3, #15
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4619      	mov	r1, r3
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <MX_GPIO_Init+0xa8>)
 80007c2:	f000 fedd 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007c6:	23f0      	movs	r3, #240	; 0xf0
 80007c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2302      	movs	r3, #2
 80007d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	4619      	mov	r1, r3
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_GPIO_Init+0xa8>)
 80007de:	f000 fecf 	bl	8001580 <HAL_GPIO_Init>

}
 80007e2:	bf00      	nop
 80007e4:	3720      	adds	r7, #32
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40010800 	.word	0x40010800

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>

080007fe <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	60ba      	str	r2, [r7, #8]
 8000806:	461a      	mov	r2, r3
 8000808:	4603      	mov	r3, r0
 800080a:	81fb      	strh	r3, [r7, #14]
 800080c:	460b      	mov	r3, r1
 800080e:	81bb      	strh	r3, [r7, #12]
 8000810:	4613      	mov	r3, r2
 8000812:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000814:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000818:	3307      	adds	r3, #7
 800081a:	2b00      	cmp	r3, #0
 800081c:	da00      	bge.n	8000820 <SSD1306_DrawBitmap+0x22>
 800081e:	3307      	adds	r3, #7
 8000820:	10db      	asrs	r3, r3, #3
 8000822:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000828:	2300      	movs	r3, #0
 800082a:	82bb      	strh	r3, [r7, #20]
 800082c:	e044      	b.n	80008b8 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	827b      	strh	r3, [r7, #18]
 8000832:	e02f      	b.n	8000894 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000834:	8a7b      	ldrh	r3, [r7, #18]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800083e:	7dfb      	ldrb	r3, [r7, #23]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	75fb      	strb	r3, [r7, #23]
 8000844:	e012      	b.n	800086c <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000846:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800084a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800084e:	fb03 f202 	mul.w	r2, r3, r2
 8000852:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000856:	2b00      	cmp	r3, #0
 8000858:	da00      	bge.n	800085c <SSD1306_DrawBitmap+0x5e>
 800085a:	3307      	adds	r3, #7
 800085c:	10db      	asrs	r3, r3, #3
 800085e:	b21b      	sxth	r3, r3
 8000860:	4413      	add	r3, r2
 8000862:	461a      	mov	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4413      	add	r3, r2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800086c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000870:	2b00      	cmp	r3, #0
 8000872:	da09      	bge.n	8000888 <SSD1306_DrawBitmap+0x8a>
 8000874:	89fa      	ldrh	r2, [r7, #14]
 8000876:	8a7b      	ldrh	r3, [r7, #18]
 8000878:	4413      	add	r3, r2
 800087a:	b29b      	uxth	r3, r3
 800087c:	89b9      	ldrh	r1, [r7, #12]
 800087e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f92e 	bl	8000ae4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000888:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800088c:	b29b      	uxth	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b29b      	uxth	r3, r3
 8000892:	827b      	strh	r3, [r7, #18]
 8000894:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800089c:	429a      	cmp	r2, r3
 800089e:	dbc9      	blt.n	8000834 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80008a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	3301      	adds	r3, #1
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	82bb      	strh	r3, [r7, #20]
 80008ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	3301      	adds	r3, #1
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	81bb      	strh	r3, [r7, #12]
 80008b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80008bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbb4      	blt.n	800082e <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80008d6:	f000 fb23 	bl	8000f20 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80008da:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008de:	2201      	movs	r2, #1
 80008e0:	2178      	movs	r1, #120	; 0x78
 80008e2:	485b      	ldr	r0, [pc, #364]	; (8000a50 <SSD1306_Init+0x180>)
 80008e4:	f001 fa42 	bl	8001d6c <HAL_I2C_IsDeviceReady>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e0a9      	b.n	8000a46 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80008f2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80008f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008f8:	e002      	b.n	8000900 <SSD1306_Init+0x30>
		p--;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1f9      	bne.n	80008fa <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000906:	22ae      	movs	r2, #174	; 0xae
 8000908:	2100      	movs	r1, #0
 800090a:	2078      	movs	r0, #120	; 0x78
 800090c:	f000 fb82 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000910:	2220      	movs	r2, #32
 8000912:	2100      	movs	r1, #0
 8000914:	2078      	movs	r0, #120	; 0x78
 8000916:	f000 fb7d 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800091a:	2210      	movs	r2, #16
 800091c:	2100      	movs	r1, #0
 800091e:	2078      	movs	r0, #120	; 0x78
 8000920:	f000 fb78 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000924:	22b0      	movs	r2, #176	; 0xb0
 8000926:	2100      	movs	r1, #0
 8000928:	2078      	movs	r0, #120	; 0x78
 800092a:	f000 fb73 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800092e:	22c8      	movs	r2, #200	; 0xc8
 8000930:	2100      	movs	r1, #0
 8000932:	2078      	movs	r0, #120	; 0x78
 8000934:	f000 fb6e 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	2078      	movs	r0, #120	; 0x78
 800093e:	f000 fb69 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000942:	2210      	movs	r2, #16
 8000944:	2100      	movs	r1, #0
 8000946:	2078      	movs	r0, #120	; 0x78
 8000948:	f000 fb64 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800094c:	2240      	movs	r2, #64	; 0x40
 800094e:	2100      	movs	r1, #0
 8000950:	2078      	movs	r0, #120	; 0x78
 8000952:	f000 fb5f 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000956:	2281      	movs	r2, #129	; 0x81
 8000958:	2100      	movs	r1, #0
 800095a:	2078      	movs	r0, #120	; 0x78
 800095c:	f000 fb5a 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000960:	22ff      	movs	r2, #255	; 0xff
 8000962:	2100      	movs	r1, #0
 8000964:	2078      	movs	r0, #120	; 0x78
 8000966:	f000 fb55 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800096a:	22a1      	movs	r2, #161	; 0xa1
 800096c:	2100      	movs	r1, #0
 800096e:	2078      	movs	r0, #120	; 0x78
 8000970:	f000 fb50 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000974:	22a6      	movs	r2, #166	; 0xa6
 8000976:	2100      	movs	r1, #0
 8000978:	2078      	movs	r0, #120	; 0x78
 800097a:	f000 fb4b 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800097e:	22a8      	movs	r2, #168	; 0xa8
 8000980:	2100      	movs	r1, #0
 8000982:	2078      	movs	r0, #120	; 0x78
 8000984:	f000 fb46 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000988:	223f      	movs	r2, #63	; 0x3f
 800098a:	2100      	movs	r1, #0
 800098c:	2078      	movs	r0, #120	; 0x78
 800098e:	f000 fb41 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000992:	22a4      	movs	r2, #164	; 0xa4
 8000994:	2100      	movs	r1, #0
 8000996:	2078      	movs	r0, #120	; 0x78
 8000998:	f000 fb3c 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800099c:	22d3      	movs	r2, #211	; 0xd3
 800099e:	2100      	movs	r1, #0
 80009a0:	2078      	movs	r0, #120	; 0x78
 80009a2:	f000 fb37 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2078      	movs	r0, #120	; 0x78
 80009ac:	f000 fb32 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80009b0:	22d5      	movs	r2, #213	; 0xd5
 80009b2:	2100      	movs	r1, #0
 80009b4:	2078      	movs	r0, #120	; 0x78
 80009b6:	f000 fb2d 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80009ba:	22f0      	movs	r2, #240	; 0xf0
 80009bc:	2100      	movs	r1, #0
 80009be:	2078      	movs	r0, #120	; 0x78
 80009c0:	f000 fb28 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80009c4:	22d9      	movs	r2, #217	; 0xd9
 80009c6:	2100      	movs	r1, #0
 80009c8:	2078      	movs	r0, #120	; 0x78
 80009ca:	f000 fb23 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80009ce:	2222      	movs	r2, #34	; 0x22
 80009d0:	2100      	movs	r1, #0
 80009d2:	2078      	movs	r0, #120	; 0x78
 80009d4:	f000 fb1e 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80009d8:	22da      	movs	r2, #218	; 0xda
 80009da:	2100      	movs	r1, #0
 80009dc:	2078      	movs	r0, #120	; 0x78
 80009de:	f000 fb19 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80009e2:	2212      	movs	r2, #18
 80009e4:	2100      	movs	r1, #0
 80009e6:	2078      	movs	r0, #120	; 0x78
 80009e8:	f000 fb14 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80009ec:	22db      	movs	r2, #219	; 0xdb
 80009ee:	2100      	movs	r1, #0
 80009f0:	2078      	movs	r0, #120	; 0x78
 80009f2:	f000 fb0f 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80009f6:	2220      	movs	r2, #32
 80009f8:	2100      	movs	r1, #0
 80009fa:	2078      	movs	r0, #120	; 0x78
 80009fc:	f000 fb0a 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000a00:	228d      	movs	r2, #141	; 0x8d
 8000a02:	2100      	movs	r1, #0
 8000a04:	2078      	movs	r0, #120	; 0x78
 8000a06:	f000 fb05 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a0a:	2214      	movs	r2, #20
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2078      	movs	r0, #120	; 0x78
 8000a10:	f000 fb00 	bl	8001014 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a14:	22af      	movs	r2, #175	; 0xaf
 8000a16:	2100      	movs	r1, #0
 8000a18:	2078      	movs	r0, #120	; 0x78
 8000a1a:	f000 fafb 	bl	8001014 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a1e:	222e      	movs	r2, #46	; 0x2e
 8000a20:	2100      	movs	r1, #0
 8000a22:	2078      	movs	r0, #120	; 0x78
 8000a24:	f000 faf6 	bl	8001014 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f843 	bl	8000ab4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000a2e:	f000 f813 	bl	8000a58 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <SSD1306_Init+0x184>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SSD1306_Init+0x184>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <SSD1306_Init+0x184>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000a44:	2301      	movs	r3, #1
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200001e0 	.word	0x200001e0
 8000a54:	20000640 	.word	0x20000640

08000a58 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	e01d      	b.n	8000aa0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	3b50      	subs	r3, #80	; 0x50
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2078      	movs	r0, #120	; 0x78
 8000a70:	f000 fad0 	bl	8001014 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	2078      	movs	r0, #120	; 0x78
 8000a7a:	f000 facb 	bl	8001014 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a7e:	2210      	movs	r2, #16
 8000a80:	2100      	movs	r1, #0
 8000a82:	2078      	movs	r0, #120	; 0x78
 8000a84:	f000 fac6 	bl	8001014 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	01db      	lsls	r3, r3, #7
 8000a8c:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <SSD1306_UpdateScreen+0x58>)
 8000a8e:	441a      	add	r2, r3
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	2140      	movs	r1, #64	; 0x40
 8000a94:	2078      	movs	r0, #120	; 0x78
 8000a96:	f000 fa57 	bl	8000f48 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b07      	cmp	r3, #7
 8000aa4:	d9de      	bls.n	8000a64 <SSD1306_UpdateScreen+0xc>
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000240 	.word	0x20000240

08000ab4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d101      	bne.n	8000ac8 <SSD1306_Fill+0x14>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e000      	b.n	8000aca <SSD1306_Fill+0x16>
 8000ac8:	23ff      	movs	r3, #255	; 0xff
 8000aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <SSD1306_Fill+0x2c>)
 8000ad2:	f008 f9cf 	bl	8008e74 <memset>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000240 	.word	0x20000240

08000ae4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	460b      	mov	r3, r1
 8000af0:	80bb      	strh	r3, [r7, #4]
 8000af2:	4613      	mov	r3, r2
 8000af4:	70fb      	strb	r3, [r7, #3]
	if (
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	2b7f      	cmp	r3, #127	; 0x7f
 8000afa:	d848      	bhi.n	8000b8e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000afc:	88bb      	ldrh	r3, [r7, #4]
 8000afe:	2b3f      	cmp	r3, #63	; 0x3f
 8000b00:	d845      	bhi.n	8000b8e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <SSD1306_DrawPixel+0xb4>)
 8000b04:	791b      	ldrb	r3, [r3, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf0c      	ite	eq
 8000b10:	2301      	moveq	r3, #1
 8000b12:	2300      	movne	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d11a      	bne.n	8000b54 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b1e:	88fa      	ldrh	r2, [r7, #6]
 8000b20:	88bb      	ldrh	r3, [r7, #4]
 8000b22:	08db      	lsrs	r3, r3, #3
 8000b24:	b298      	uxth	r0, r3
 8000b26:	4603      	mov	r3, r0
 8000b28:	01db      	lsls	r3, r3, #7
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <SSD1306_DrawPixel+0xb8>)
 8000b2e:	5cd3      	ldrb	r3, [r2, r3]
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	2101      	movs	r1, #1
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b259      	sxtb	r1, r3
 8000b44:	88fa      	ldrh	r2, [r7, #6]
 8000b46:	4603      	mov	r3, r0
 8000b48:	01db      	lsls	r3, r3, #7
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b2c9      	uxtb	r1, r1
 8000b4e:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <SSD1306_DrawPixel+0xb8>)
 8000b50:	54d1      	strb	r1, [r2, r3]
 8000b52:	e01d      	b.n	8000b90 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b54:	88fa      	ldrh	r2, [r7, #6]
 8000b56:	88bb      	ldrh	r3, [r7, #4]
 8000b58:	08db      	lsrs	r3, r3, #3
 8000b5a:	b298      	uxth	r0, r3
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	01db      	lsls	r3, r3, #7
 8000b60:	4413      	add	r3, r2
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <SSD1306_DrawPixel+0xb8>)
 8000b64:	5cd3      	ldrb	r3, [r2, r3]
 8000b66:	b25a      	sxtb	r2, r3
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	2101      	movs	r1, #1
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	b259      	sxtb	r1, r3
 8000b7e:	88fa      	ldrh	r2, [r7, #6]
 8000b80:	4603      	mov	r3, r0
 8000b82:	01db      	lsls	r3, r3, #7
 8000b84:	4413      	add	r3, r2
 8000b86:	b2c9      	uxtb	r1, r1
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <SSD1306_DrawPixel+0xb8>)
 8000b8a:	54d1      	strb	r1, [r2, r3]
 8000b8c:	e000      	b.n	8000b90 <SSD1306_DrawPixel+0xac>
		return;
 8000b8e:	bf00      	nop
	}
}
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	20000640 	.word	0x20000640
 8000b9c:	20000240 	.word	0x20000240

08000ba0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	80fb      	strh	r3, [r7, #6]
 8000bac:	4613      	mov	r3, r2
 8000bae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000bb0:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SSD1306_GotoXY+0x28>)
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <SSD1306_GotoXY+0x28>)
 8000bb8:	88bb      	ldrh	r3, [r7, #4]
 8000bba:	8053      	strh	r3, [r2, #2]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000640 	.word	0x20000640

08000bcc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bdc:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <SSD1306_Putc+0xfc>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
	if (
 8000be8:	2b7f      	cmp	r3, #127	; 0x7f
 8000bea:	dc07      	bgt.n	8000bfc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <SSD1306_Putc+0xfc>)
 8000bee:	885b      	ldrh	r3, [r3, #2]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	785b      	ldrb	r3, [r3, #1]
 8000bf6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bf8:	2b3f      	cmp	r3, #63	; 0x3f
 8000bfa:	dd01      	ble.n	8000c00 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e05e      	b.n	8000cbe <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e04b      	b.n	8000c9e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	3b20      	subs	r3, #32
 8000c0e:	6839      	ldr	r1, [r7, #0]
 8000c10:	7849      	ldrb	r1, [r1, #1]
 8000c12:	fb01 f303 	mul.w	r3, r1, r3
 8000c16:	4619      	mov	r1, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	440b      	add	r3, r1
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	e030      	b.n	8000c8c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d010      	beq.n	8000c5c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <SSD1306_Putc+0xfc>)
 8000c3c:	881a      	ldrh	r2, [r3, #0]
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	4413      	add	r3, r2
 8000c44:	b298      	uxth	r0, r3
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <SSD1306_Putc+0xfc>)
 8000c48:	885a      	ldrh	r2, [r3, #2]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4413      	add	r3, r2
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	79ba      	ldrb	r2, [r7, #6]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f7ff ff45 	bl	8000ae4 <SSD1306_DrawPixel>
 8000c5a:	e014      	b.n	8000c86 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <SSD1306_Putc+0xfc>)
 8000c5e:	881a      	ldrh	r2, [r3, #0]
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	4413      	add	r3, r2
 8000c66:	b298      	uxth	r0, r3
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <SSD1306_Putc+0xfc>)
 8000c6a:	885a      	ldrh	r2, [r3, #2]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	b299      	uxth	r1, r3
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	f7ff ff2f 	bl	8000ae4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d3c8      	bcc.n	8000c2a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	785b      	ldrb	r3, [r3, #1]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d3ad      	bcc.n	8000c06 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <SSD1306_Putc+0xfc>)
 8000cac:	881a      	ldrh	r2, [r3, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	4413      	add	r3, r2
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <SSD1306_Putc+0xfc>)
 8000cba:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000640 	.word	0x20000640

08000ccc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000cda:	e012      	b.n	8000d02 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	79fa      	ldrb	r2, [r7, #7]
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff71 	bl	8000bcc <SSD1306_Putc>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d002      	beq.n	8000cfc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	e008      	b.n	8000d0e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1e8      	bne.n	8000cdc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000d16:	b590      	push	{r4, r7, lr}
 8000d18:	b087      	sub	sp, #28
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4604      	mov	r4, r0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	4611      	mov	r1, r2
 8000d22:	461a      	mov	r2, r3
 8000d24:	4623      	mov	r3, r4
 8000d26:	80fb      	strh	r3, [r7, #6]
 8000d28:	4603      	mov	r3, r0
 8000d2a:	80bb      	strh	r3, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	807b      	strh	r3, [r7, #2]
 8000d30:	4613      	mov	r3, r2
 8000d32:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	2b7f      	cmp	r3, #127	; 0x7f
 8000d38:	d901      	bls.n	8000d3e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000d3a:	237f      	movs	r3, #127	; 0x7f
 8000d3c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	2b7f      	cmp	r3, #127	; 0x7f
 8000d42:	d901      	bls.n	8000d48 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000d44:	237f      	movs	r3, #127	; 0x7f
 8000d46:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000d48:	88bb      	ldrh	r3, [r7, #4]
 8000d4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d4c:	d901      	bls.n	8000d52 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000d4e:	233f      	movs	r3, #63	; 0x3f
 8000d50:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000d52:	883b      	ldrh	r3, [r7, #0]
 8000d54:	2b3f      	cmp	r3, #63	; 0x3f
 8000d56:	d901      	bls.n	8000d5c <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000d58:	233f      	movs	r3, #63	; 0x3f
 8000d5a:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000d5c:	88fa      	ldrh	r2, [r7, #6]
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d205      	bcs.n	8000d70 <SSD1306_DrawLine+0x5a>
 8000d64:	887a      	ldrh	r2, [r7, #2]
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	e004      	b.n	8000d7a <SSD1306_DrawLine+0x64>
 8000d70:	88fa      	ldrh	r2, [r7, #6]
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000d7c:	88ba      	ldrh	r2, [r7, #4]
 8000d7e:	883b      	ldrh	r3, [r7, #0]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d205      	bcs.n	8000d90 <SSD1306_DrawLine+0x7a>
 8000d84:	883a      	ldrh	r2, [r7, #0]
 8000d86:	88bb      	ldrh	r3, [r7, #4]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	e004      	b.n	8000d9a <SSD1306_DrawLine+0x84>
 8000d90:	88ba      	ldrh	r2, [r7, #4]
 8000d92:	883b      	ldrh	r3, [r7, #0]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8000d9c:	88fa      	ldrh	r2, [r7, #6]
 8000d9e:	887b      	ldrh	r3, [r7, #2]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d201      	bcs.n	8000da8 <SSD1306_DrawLine+0x92>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e001      	b.n	8000dac <SSD1306_DrawLine+0x96>
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dac:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8000dae:	88ba      	ldrh	r2, [r7, #4]
 8000db0:	883b      	ldrh	r3, [r7, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d201      	bcs.n	8000dba <SSD1306_DrawLine+0xa4>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e001      	b.n	8000dbe <SSD1306_DrawLine+0xa8>
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dbe:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000dc0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000dc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dd06      	ble.n	8000dda <SSD1306_DrawLine+0xc4>
 8000dcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dd0:	0fda      	lsrs	r2, r3, #31
 8000dd2:	4413      	add	r3, r2
 8000dd4:	105b      	asrs	r3, r3, #1
 8000dd6:	b21b      	sxth	r3, r3
 8000dd8:	e006      	b.n	8000de8 <SSD1306_DrawLine+0xd2>
 8000dda:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dde:	0fda      	lsrs	r2, r3, #31
 8000de0:	4413      	add	r3, r2
 8000de2:	105b      	asrs	r3, r3, #1
 8000de4:	425b      	negs	r3, r3
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000dea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d129      	bne.n	8000e46 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000df2:	883a      	ldrh	r2, [r7, #0]
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d205      	bcs.n	8000e06 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000dfa:	883b      	ldrh	r3, [r7, #0]
 8000dfc:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000dfe:	88bb      	ldrh	r3, [r7, #4]
 8000e00:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e02:	893b      	ldrh	r3, [r7, #8]
 8000e04:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000e06:	887a      	ldrh	r2, [r7, #2]
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d205      	bcs.n	8000e1a <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e16:	893b      	ldrh	r3, [r7, #8]
 8000e18:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	82bb      	strh	r3, [r7, #20]
 8000e1e:	e00c      	b.n	8000e3a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000e20:	8ab9      	ldrh	r1, [r7, #20]
 8000e22:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fe5b 	bl	8000ae4 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000e2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3301      	adds	r3, #1
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	82bb      	strh	r3, [r7, #20]
 8000e3a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e3e:	883b      	ldrh	r3, [r7, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dded      	ble.n	8000e20 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8000e44:	e05f      	b.n	8000f06 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8000e46:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d129      	bne.n	8000ea2 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000e4e:	883a      	ldrh	r2, [r7, #0]
 8000e50:	88bb      	ldrh	r3, [r7, #4]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d205      	bcs.n	8000e62 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000e56:	883b      	ldrh	r3, [r7, #0]
 8000e58:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e5e:	893b      	ldrh	r3, [r7, #8]
 8000e60:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d205      	bcs.n	8000e76 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e72:	893b      	ldrh	r3, [r7, #8]
 8000e74:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	82bb      	strh	r3, [r7, #20]
 8000e7a:	e00c      	b.n	8000e96 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000e7c:	8abb      	ldrh	r3, [r7, #20]
 8000e7e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e82:	88b9      	ldrh	r1, [r7, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fe2d 	bl	8000ae4 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000e8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3301      	adds	r3, #1
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	82bb      	strh	r3, [r7, #20]
 8000e96:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	dded      	ble.n	8000e7c <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8000ea0:	e031      	b.n	8000f06 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000ea2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000ea6:	88b9      	ldrh	r1, [r7, #4]
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fe1a 	bl	8000ae4 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d103      	bne.n	8000ec0 <SSD1306_DrawLine+0x1aa>
 8000eb8:	88ba      	ldrh	r2, [r7, #4]
 8000eba:	883b      	ldrh	r3, [r7, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d021      	beq.n	8000f04 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8000ec0:	8afb      	ldrh	r3, [r7, #22]
 8000ec2:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000ec4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ec8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ecc:	425b      	negs	r3, r3
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dd08      	ble.n	8000ee4 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000ed2:	8afa      	ldrh	r2, [r7, #22]
 8000ed4:	8a3b      	ldrh	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000edc:	89fa      	ldrh	r2, [r7, #14]
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8000ee4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ee8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	dad8      	bge.n	8000ea2 <SSD1306_DrawLine+0x18c>
			err += dx;
 8000ef0:	8afa      	ldrh	r2, [r7, #22]
 8000ef2:	8a7b      	ldrh	r3, [r7, #18]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000efa:	89ba      	ldrh	r2, [r7, #12]
 8000efc:	88bb      	ldrh	r3, [r7, #4]
 8000efe:	4413      	add	r3, r2
 8000f00:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000f02:	e7ce      	b.n	8000ea2 <SSD1306_DrawLine+0x18c>
			break;
 8000f04:	bf00      	nop
		} 
	}
}
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd90      	pop	{r4, r7, pc}

08000f0c <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fdcf 	bl	8000ab4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000f16:	f7ff fd9f 	bl	8000a58 <SSD1306_UpdateScreen>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <ssd1306_I2C_Init+0x24>)
 8000f28:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f2a:	e002      	b.n	8000f32 <ssd1306_I2C_Init+0x12>
		p--;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f9      	bne.n	8000f2c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	0003d090 	.word	0x0003d090

08000f48 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b0c7      	sub	sp, #284	; 0x11c
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000f56:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000f5a:	600a      	str	r2, [r1, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f62:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f66:	4622      	mov	r2, r4
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f6e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000f72:	4602      	mov	r2, r0
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f7e:	460a      	mov	r2, r1
 8000f80:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000f82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f8a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f8e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000f92:	7812      	ldrb	r2, [r2, #0]
 8000f94:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f9c:	e015      	b.n	8000fca <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000f9e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fa2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fa6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	441a      	add	r2, r3
 8000fae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	7811      	ldrb	r1, [r2, #0]
 8000fb6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fba:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000fbe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000fc0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000fca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fd4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000fd8:	8812      	ldrh	r2, [r2, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d8df      	bhi.n	8000f9e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000fde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fe2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b299      	uxth	r1, r3
 8000fea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	f107 020c 	add.w	r2, r7, #12
 8000ffc:	200a      	movs	r0, #10
 8000ffe:	9000      	str	r0, [sp, #0]
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <ssd1306_I2C_WriteMulti+0xc8>)
 8001002:	f000 fdb5 	bl	8001b70 <HAL_I2C_Master_Transmit>
}
 8001006:	bf00      	nop
 8001008:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	200001e0 	.word	0x200001e0

08001014 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af02      	add	r7, sp, #8
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	460b      	mov	r3, r1
 8001020:	71bb      	strb	r3, [r7, #6]
 8001022:	4613      	mov	r3, r2
 8001024:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	b299      	uxth	r1, r3
 8001032:	f107 020c 	add.w	r2, r7, #12
 8001036:	230a      	movs	r3, #10
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2302      	movs	r3, #2
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <ssd1306_I2C_Write+0x38>)
 800103e:	f000 fd97 	bl	8001b70 <HAL_I2C_Master_Transmit>
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001e0 	.word	0x200001e0

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_MspInit+0x5c>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <HAL_MspInit+0x5c>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_MspInit+0x5c>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_MspInit+0x5c>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_MspInit+0x5c>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	61d3      	str	r3, [r2, #28]
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_MspInit+0x5c>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_MspInit+0x60>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_MspInit+0x60>)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010000 	.word	0x40010000

080010b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a15      	ldr	r2, [pc, #84]	; (8001124 <HAL_I2C_MspInit+0x70>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d123      	bne.n	800111c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_I2C_MspInit+0x74>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a13      	ldr	r2, [pc, #76]	; (8001128 <HAL_I2C_MspInit+0x74>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_I2C_MspInit+0x74>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ec:	23c0      	movs	r3, #192	; 0xc0
 80010ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f0:	2312      	movs	r3, #18
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4619      	mov	r1, r3
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <HAL_I2C_MspInit+0x78>)
 8001100:	f000 fa3e 	bl	8001580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_I2C_MspInit+0x74>)
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_I2C_MspInit+0x74>)
 800110a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800110e:	61d3      	str	r3, [r2, #28]
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_I2C_MspInit+0x74>)
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40005400 	.word	0x40005400
 8001128:	40021000 	.word	0x40021000
 800112c:	40010c00 	.word	0x40010c00

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001176:	f000 f8b5 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001186:	f001 fa58 	bl	800263a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000b18 	.word	0x20000b18

08001194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <_sbrk+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <_sbrk+0x60>)
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <_sbrk+0x64>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <_sbrk+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c4:	f007 fe2c 	bl	8008e20 <__errno>
 80011c8:	4603      	mov	r3, r0
 80011ca:	220c      	movs	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20005000 	.word	0x20005000
 80011f4:	00000400 	.word	0x00000400
 80011f8:	20000648 	.word	0x20000648
 80011fc:	20000e28 	.word	0x20000e28

08001200 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001232:	f7ff ffe5 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001236:	f007 fdf9 	bl	8008e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123a:	f7ff f8ef 	bl	800041c <main>
  bx lr
 800123e:	4770      	bx	lr
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8001248:	0800aa54 	.word	0x0800aa54
  ldr r2, =_sbss
 800124c:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8001250:	20000e28 	.word	0x20000e28

08001254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC1_2_IRQHandler>
	...

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_Init+0x28>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_Init+0x28>)
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f947 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126e:	200f      	movs	r0, #15
 8001270:	f000 f808 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001274:	f7ff feec 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40022000 	.word	0x40022000

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x54>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x58>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	fbb3 f3f1 	udiv	r3, r3, r1
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f95f 	bl	8001566 <HAL_SYSTICK_Config>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00e      	b.n	80012d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d80a      	bhi.n	80012ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c0:	f000 f927 	bl	8001512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_InitTick+0x5c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e000      	b.n	80012d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000010 	.word	0x20000010
 80012e0:	2000000c 	.word	0x2000000c

080012e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_IncTick+0x1c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_IncTick+0x20>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <HAL_IncTick+0x20>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	20000010 	.word	0x20000010
 8001304:	2000064c 	.word	0x2000064c

08001308 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b02      	ldr	r3, [pc, #8]	; (8001318 <HAL_GetTick+0x10>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	2000064c 	.word	0x2000064c

0800131c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff fff0 	bl	8001308 <HAL_GetTick>
 8001328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001334:	d005      	beq.n	8001342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_Delay+0x44>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001342:	bf00      	nop
 8001344:	f7ff ffe0 	bl	8001308 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	d8f7      	bhi.n	8001344 <HAL_Delay+0x28>
  {
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000010 	.word	0x20000010

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4906      	ldr	r1, [pc, #24]	; (80013fc <__NVIC_EnableIRQ+0x34>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c8:	d301      	bcc.n	80014ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00f      	b.n	80014ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <SysTick_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d6:	210f      	movs	r1, #15
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014dc:	f7ff ff90 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x40>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff2d 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff42 	bl	80013ac <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff90 	bl	8001454 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5f 	bl	8001400 <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff35 	bl	80013c8 <__NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffa2 	bl	80014b8 <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b08b      	sub	sp, #44	; 0x2c
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001592:	e169      	b.n	8001868 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001594:	2201      	movs	r2, #1
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f040 8158 	bne.w	8001862 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4a9a      	ldr	r2, [pc, #616]	; (8001820 <HAL_GPIO_Init+0x2a0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d05e      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015bc:	4a98      	ldr	r2, [pc, #608]	; (8001820 <HAL_GPIO_Init+0x2a0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d875      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015c2:	4a98      	ldr	r2, [pc, #608]	; (8001824 <HAL_GPIO_Init+0x2a4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d058      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015c8:	4a96      	ldr	r2, [pc, #600]	; (8001824 <HAL_GPIO_Init+0x2a4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d86f      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015ce:	4a96      	ldr	r2, [pc, #600]	; (8001828 <HAL_GPIO_Init+0x2a8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d052      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015d4:	4a94      	ldr	r2, [pc, #592]	; (8001828 <HAL_GPIO_Init+0x2a8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d869      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015da:	4a94      	ldr	r2, [pc, #592]	; (800182c <HAL_GPIO_Init+0x2ac>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d04c      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015e0:	4a92      	ldr	r2, [pc, #584]	; (800182c <HAL_GPIO_Init+0x2ac>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d863      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015e6:	4a92      	ldr	r2, [pc, #584]	; (8001830 <HAL_GPIO_Init+0x2b0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d046      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015ec:	4a90      	ldr	r2, [pc, #576]	; (8001830 <HAL_GPIO_Init+0x2b0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d85d      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015f2:	2b12      	cmp	r3, #18
 80015f4:	d82a      	bhi.n	800164c <HAL_GPIO_Init+0xcc>
 80015f6:	2b12      	cmp	r3, #18
 80015f8:	d859      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015fa:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <HAL_GPIO_Init+0x80>)
 80015fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001600:	0800167b 	.word	0x0800167b
 8001604:	08001655 	.word	0x08001655
 8001608:	08001667 	.word	0x08001667
 800160c:	080016a9 	.word	0x080016a9
 8001610:	080016af 	.word	0x080016af
 8001614:	080016af 	.word	0x080016af
 8001618:	080016af 	.word	0x080016af
 800161c:	080016af 	.word	0x080016af
 8001620:	080016af 	.word	0x080016af
 8001624:	080016af 	.word	0x080016af
 8001628:	080016af 	.word	0x080016af
 800162c:	080016af 	.word	0x080016af
 8001630:	080016af 	.word	0x080016af
 8001634:	080016af 	.word	0x080016af
 8001638:	080016af 	.word	0x080016af
 800163c:	080016af 	.word	0x080016af
 8001640:	080016af 	.word	0x080016af
 8001644:	0800165d 	.word	0x0800165d
 8001648:	08001671 	.word	0x08001671
 800164c:	4a79      	ldr	r2, [pc, #484]	; (8001834 <HAL_GPIO_Init+0x2b4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001652:	e02c      	b.n	80016ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	623b      	str	r3, [r7, #32]
          break;
 800165a:	e029      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	3304      	adds	r3, #4
 8001662:	623b      	str	r3, [r7, #32]
          break;
 8001664:	e024      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	3308      	adds	r3, #8
 800166c:	623b      	str	r3, [r7, #32]
          break;
 800166e:	e01f      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	330c      	adds	r3, #12
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	e01a      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d102      	bne.n	8001688 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001682:	2304      	movs	r3, #4
 8001684:	623b      	str	r3, [r7, #32]
          break;
 8001686:	e013      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d105      	bne.n	800169c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001690:	2308      	movs	r3, #8
 8001692:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	611a      	str	r2, [r3, #16]
          break;
 800169a:	e009      	b.n	80016b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800169c:	2308      	movs	r3, #8
 800169e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	615a      	str	r2, [r3, #20]
          break;
 80016a6:	e003      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e000      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          break;
 80016ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2bff      	cmp	r3, #255	; 0xff
 80016b4:	d801      	bhi.n	80016ba <HAL_GPIO_Init+0x13a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	e001      	b.n	80016be <HAL_GPIO_Init+0x13e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3304      	adds	r3, #4
 80016be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	2bff      	cmp	r3, #255	; 0xff
 80016c4:	d802      	bhi.n	80016cc <HAL_GPIO_Init+0x14c>
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	e002      	b.n	80016d2 <HAL_GPIO_Init+0x152>
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	3b08      	subs	r3, #8
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	210f      	movs	r1, #15
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	401a      	ands	r2, r3
 80016e4:	6a39      	ldr	r1, [r7, #32]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80b1 	beq.w	8001862 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001700:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <HAL_GPIO_Init+0x2b8>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a4c      	ldr	r2, [pc, #304]	; (8001838 <HAL_GPIO_Init+0x2b8>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <HAL_GPIO_Init+0x2b8>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001718:	4a48      	ldr	r2, [pc, #288]	; (800183c <HAL_GPIO_Init+0x2bc>)
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3302      	adds	r3, #2
 8001720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001724:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4013      	ands	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a40      	ldr	r2, [pc, #256]	; (8001840 <HAL_GPIO_Init+0x2c0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d013      	beq.n	800176c <HAL_GPIO_Init+0x1ec>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a3f      	ldr	r2, [pc, #252]	; (8001844 <HAL_GPIO_Init+0x2c4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d00d      	beq.n	8001768 <HAL_GPIO_Init+0x1e8>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a3e      	ldr	r2, [pc, #248]	; (8001848 <HAL_GPIO_Init+0x2c8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d007      	beq.n	8001764 <HAL_GPIO_Init+0x1e4>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a3d      	ldr	r2, [pc, #244]	; (800184c <HAL_GPIO_Init+0x2cc>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_GPIO_Init+0x1e0>
 800175c:	2303      	movs	r3, #3
 800175e:	e006      	b.n	800176e <HAL_GPIO_Init+0x1ee>
 8001760:	2304      	movs	r3, #4
 8001762:	e004      	b.n	800176e <HAL_GPIO_Init+0x1ee>
 8001764:	2302      	movs	r3, #2
 8001766:	e002      	b.n	800176e <HAL_GPIO_Init+0x1ee>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_GPIO_Init+0x1ee>
 800176c:	2300      	movs	r3, #0
 800176e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001770:	f002 0203 	and.w	r2, r2, #3
 8001774:	0092      	lsls	r2, r2, #2
 8001776:	4093      	lsls	r3, r2
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800177e:	492f      	ldr	r1, [pc, #188]	; (800183c <HAL_GPIO_Init+0x2bc>)
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	492c      	ldr	r1, [pc, #176]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4928      	ldr	r1, [pc, #160]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4922      	ldr	r1, [pc, #136]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	491e      	ldr	r1, [pc, #120]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	4918      	ldr	r1, [pc, #96]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	608b      	str	r3, [r1, #8]
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4914      	ldr	r1, [pc, #80]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 8001800:	4013      	ands	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d021      	beq.n	8001854 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	490e      	ldr	r1, [pc, #56]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
 800181c:	e021      	b.n	8001862 <HAL_GPIO_Init+0x2e2>
 800181e:	bf00      	nop
 8001820:	10320000 	.word	0x10320000
 8001824:	10310000 	.word	0x10310000
 8001828:	10220000 	.word	0x10220000
 800182c:	10210000 	.word	0x10210000
 8001830:	10120000 	.word	0x10120000
 8001834:	10110000 	.word	0x10110000
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000
 8001840:	40010800 	.word	0x40010800
 8001844:	40010c00 	.word	0x40010c00
 8001848:	40011000 	.word	0x40011000
 800184c:	40011400 	.word	0x40011400
 8001850:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_GPIO_Init+0x304>)
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	43db      	mvns	r3, r3
 800185c:	4909      	ldr	r1, [pc, #36]	; (8001884 <HAL_GPIO_Init+0x304>)
 800185e:	4013      	ands	r3, r2
 8001860:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	3301      	adds	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	f47f ae8e 	bne.w	8001594 <HAL_GPIO_Init+0x14>
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	372c      	adds	r7, #44	; 0x2c
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40010400 	.word	0x40010400

08001888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e001      	b.n	80018aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	807b      	strh	r3, [r7, #2]
 80018c2:	4613      	mov	r3, r2
 80018c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c6:	787b      	ldrb	r3, [r7, #1]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018cc:	887a      	ldrh	r2, [r7, #2]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018d2:	e003      	b.n	80018dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	041a      	lsls	r2, r3, #16
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	611a      	str	r2, [r3, #16]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e12b      	b.n	8001b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fbd0 	bl	80010b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2224      	movs	r2, #36	; 0x24
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800193a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800194a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800194c:	f002 fdc4 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8001950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4a81      	ldr	r2, [pc, #516]	; (8001b5c <HAL_I2C_Init+0x274>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d807      	bhi.n	800196c <HAL_I2C_Init+0x84>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4a80      	ldr	r2, [pc, #512]	; (8001b60 <HAL_I2C_Init+0x278>)
 8001960:	4293      	cmp	r3, r2
 8001962:	bf94      	ite	ls
 8001964:	2301      	movls	r3, #1
 8001966:	2300      	movhi	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	e006      	b.n	800197a <HAL_I2C_Init+0x92>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4a7d      	ldr	r2, [pc, #500]	; (8001b64 <HAL_I2C_Init+0x27c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	bf94      	ite	ls
 8001974:	2301      	movls	r3, #1
 8001976:	2300      	movhi	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0e7      	b.n	8001b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4a78      	ldr	r2, [pc, #480]	; (8001b68 <HAL_I2C_Init+0x280>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	0c9b      	lsrs	r3, r3, #18
 800198c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	430a      	orrs	r2, r1
 80019a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a6a      	ldr	r2, [pc, #424]	; (8001b5c <HAL_I2C_Init+0x274>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d802      	bhi.n	80019bc <HAL_I2C_Init+0xd4>
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	3301      	adds	r3, #1
 80019ba:	e009      	b.n	80019d0 <HAL_I2C_Init+0xe8>
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	4a69      	ldr	r2, [pc, #420]	; (8001b6c <HAL_I2C_Init+0x284>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	099b      	lsrs	r3, r3, #6
 80019ce:	3301      	adds	r3, #1
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	495c      	ldr	r1, [pc, #368]	; (8001b5c <HAL_I2C_Init+0x274>)
 80019ec:	428b      	cmp	r3, r1
 80019ee:	d819      	bhi.n	8001a24 <HAL_I2C_Init+0x13c>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1e59      	subs	r1, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80019fe:	1c59      	adds	r1, r3, #1
 8001a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a04:	400b      	ands	r3, r1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00a      	beq.n	8001a20 <HAL_I2C_Init+0x138>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1e59      	subs	r1, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1e:	e051      	b.n	8001ac4 <HAL_I2C_Init+0x1dc>
 8001a20:	2304      	movs	r3, #4
 8001a22:	e04f      	b.n	8001ac4 <HAL_I2C_Init+0x1dc>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d111      	bne.n	8001a50 <HAL_I2C_Init+0x168>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1e58      	subs	r0, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	440b      	add	r3, r1
 8001a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	e012      	b.n	8001a76 <HAL_I2C_Init+0x18e>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1e58      	subs	r0, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6859      	ldr	r1, [r3, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	0099      	lsls	r1, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_Init+0x196>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e022      	b.n	8001ac4 <HAL_I2C_Init+0x1dc>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10e      	bne.n	8001aa4 <HAL_I2C_Init+0x1bc>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1e58      	subs	r0, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6859      	ldr	r1, [r3, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	440b      	add	r3, r1
 8001a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa2:	e00f      	b.n	8001ac4 <HAL_I2C_Init+0x1dc>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1e58      	subs	r0, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	0099      	lsls	r1, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	6809      	ldr	r1, [r1, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69da      	ldr	r2, [r3, #28]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6911      	ldr	r1, [r2, #16]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68d2      	ldr	r2, [r2, #12]
 8001afe:	4311      	orrs	r1, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	000186a0 	.word	0x000186a0
 8001b60:	001e847f 	.word	0x001e847f
 8001b64:	003d08ff 	.word	0x003d08ff
 8001b68:	431bde83 	.word	0x431bde83
 8001b6c:	10624dd3 	.word	0x10624dd3

08001b70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	817b      	strh	r3, [r7, #10]
 8001b80:	4613      	mov	r3, r2
 8001b82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff fbc0 	bl	8001308 <HAL_GetTick>
 8001b88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	f040 80e0 	bne.w	8001d58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2319      	movs	r3, #25
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4970      	ldr	r1, [pc, #448]	; (8001d64 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fa92 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0d3      	b.n	8001d5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_I2C_Master_Transmit+0x50>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e0cc      	b.n	8001d5a <HAL_I2C_Master_Transmit+0x1ea>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d007      	beq.n	8001be6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2221      	movs	r2, #33	; 0x21
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2210      	movs	r2, #16
 8001c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	893a      	ldrh	r2, [r7, #8]
 8001c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4a50      	ldr	r2, [pc, #320]	; (8001d68 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c28:	8979      	ldrh	r1, [r7, #10]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f9ca 	bl	8001fc8 <I2C_MasterRequestWrite>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e08d      	b.n	8001d5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c54:	e066      	b.n	8001d24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	6a39      	ldr	r1, [r7, #32]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fb0c 	bl	8002278 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00d      	beq.n	8001c82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d107      	bne.n	8001c7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e06b      	b.n	8001d5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	781a      	ldrb	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_I2C_Master_Transmit+0x188>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d017      	beq.n	8001cf8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	6a39      	ldr	r1, [r7, #32]
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 fafc 	bl	80022fa <I2C_WaitOnBTFFlagUntilTimeout>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00d      	beq.n	8001d24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d107      	bne.n	8001d20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e01a      	b.n	8001d5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d194      	bne.n	8001c56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e000      	b.n	8001d5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d58:	2302      	movs	r3, #2
  }
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	00100002 	.word	0x00100002
 8001d68:	ffff0000 	.word	0xffff0000

08001d6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff fac4 	bl	8001308 <HAL_GetTick>
 8001d80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001d82:	2301      	movs	r3, #1
 8001d84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	f040 8111 	bne.w	8001fb6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2319      	movs	r3, #25
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4988      	ldr	r1, [pc, #544]	; (8001fc0 <HAL_I2C_IsDeviceReady+0x254>)
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f994 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
 8001dac:	e104      	b.n	8001fb8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_I2C_IsDeviceReady+0x50>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e0fd      	b.n	8001fb8 <HAL_I2C_IsDeviceReady+0x24c>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d007      	beq.n	8001de2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2224      	movs	r2, #36	; 0x24
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4a70      	ldr	r2, [pc, #448]	; (8001fc4 <HAL_I2C_IsDeviceReady+0x258>)
 8001e04:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f952 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00d      	beq.n	8001e4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3c:	d103      	bne.n	8001e46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0b6      	b.n	8001fb8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e4a:	897b      	ldrh	r3, [r7, #10]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fa55 	bl	8001308 <HAL_GetTick>
 8001e5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	bf0c      	ite	eq
 8001e6e:	2301      	moveq	r3, #1
 8001e70:	2300      	movne	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e8e:	e025      	b.n	8001edc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e90:	f7ff fa3a 	bl	8001308 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d302      	bcc.n	8001ea6 <HAL_I2C_IsDeviceReady+0x13a>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	22a0      	movs	r2, #160	; 0xa0
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2ba0      	cmp	r3, #160	; 0xa0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_I2C_IsDeviceReady+0x188>
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_I2C_IsDeviceReady+0x188>
 8001eee:	7dbb      	ldrb	r3, [r7, #22]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0cd      	beq.n	8001e90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d129      	bne.n	8001f5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2319      	movs	r3, #25
 8001f36:	2201      	movs	r2, #1
 8001f38:	4921      	ldr	r1, [pc, #132]	; (8001fc0 <HAL_I2C_IsDeviceReady+0x254>)
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f8c6 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e036      	b.n	8001fb8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e02c      	b.n	8001fb8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	2319      	movs	r3, #25
 8001f7e:	2201      	movs	r2, #1
 8001f80:	490f      	ldr	r1, [pc, #60]	; (8001fc0 <HAL_I2C_IsDeviceReady+0x254>)
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f8a2 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e012      	b.n	8001fb8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	3301      	adds	r3, #1
 8001f96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f4ff af32 	bcc.w	8001e06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001fb6:	2302      	movs	r3, #2
  }
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	00100002 	.word	0x00100002
 8001fc4:	ffff0000 	.word	0xffff0000

08001fc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d006      	beq.n	8001ff2 <I2C_MasterRequestWrite+0x2a>
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d003      	beq.n	8001ff2 <I2C_MasterRequestWrite+0x2a>
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ff0:	d108      	bne.n	8002004 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	e00b      	b.n	800201c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	2b12      	cmp	r3, #18
 800200a:	d107      	bne.n	800201c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800201a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f84f 	bl	80020cc <I2C_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00d      	beq.n	8002050 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002042:	d103      	bne.n	800204c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e035      	b.n	80020bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002058:	d108      	bne.n	800206c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800205a:	897b      	ldrh	r3, [r7, #10]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	e01b      	b.n	80020a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800206c:	897b      	ldrh	r3, [r7, #10]
 800206e:	11db      	asrs	r3, r3, #7
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f003 0306 	and.w	r3, r3, #6
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f063 030f 	orn	r3, r3, #15
 800207c:	b2da      	uxtb	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	490e      	ldr	r1, [pc, #56]	; (80020c4 <I2C_MasterRequestWrite+0xfc>)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f875 	bl	800217a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e010      	b.n	80020bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800209a:	897b      	ldrh	r3, [r7, #10]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <I2C_MasterRequestWrite+0x100>)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f865 	bl	800217a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	00010008 	.word	0x00010008
 80020c8:	00010002 	.word	0x00010002

080020cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020dc:	e025      	b.n	800212a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e4:	d021      	beq.n	800212a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e6:	f7ff f90f 	bl	8001308 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d302      	bcc.n	80020fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d116      	bne.n	800212a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f043 0220 	orr.w	r2, r3, #32
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e023      	b.n	8002172 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10d      	bne.n	8002150 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4013      	ands	r3, r2
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf0c      	ite	eq
 8002146:	2301      	moveq	r3, #1
 8002148:	2300      	movne	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	e00c      	b.n	800216a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4013      	ands	r3, r2
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	429a      	cmp	r2, r3
 800216e:	d0b6      	beq.n	80020de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002188:	e051      	b.n	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002198:	d123      	bne.n	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f043 0204 	orr.w	r2, r3, #4
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e046      	b.n	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e8:	d021      	beq.n	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ea:	f7ff f88d 	bl	8001308 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d302      	bcc.n	8002200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d116      	bne.n	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f043 0220 	orr.w	r2, r3, #32
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e020      	b.n	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10c      	bne.n	8002252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4013      	ands	r3, r2
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf14      	ite	ne
 800224a:	2301      	movne	r3, #1
 800224c:	2300      	moveq	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	e00b      	b.n	800226a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	43da      	mvns	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4013      	ands	r3, r2
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d18d      	bne.n	800218a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002284:	e02d      	b.n	80022e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f878 	bl	800237c <I2C_IsAcknowledgeFailed>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e02d      	b.n	80022f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800229c:	d021      	beq.n	80022e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229e:	f7ff f833 	bl	8001308 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d302      	bcc.n	80022b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d116      	bne.n	80022e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f043 0220 	orr.w	r2, r3, #32
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e007      	b.n	80022f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ec:	2b80      	cmp	r3, #128	; 0x80
 80022ee:	d1ca      	bne.n	8002286 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002306:	e02d      	b.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f837 	bl	800237c <I2C_IsAcknowledgeFailed>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e02d      	b.n	8002374 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800231e:	d021      	beq.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002320:	f7fe fff2 	bl	8001308 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	429a      	cmp	r2, r3
 800232e:	d302      	bcc.n	8002336 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d116      	bne.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e007      	b.n	8002374 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b04      	cmp	r3, #4
 8002370:	d1ca      	bne.n	8002308 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002392:	d11b      	bne.n	80023cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800239c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f043 0204 	orr.w	r2, r3, #4
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023da:	b08b      	sub	sp, #44	; 0x2c
 80023dc:	af06      	add	r7, sp, #24
 80023de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0fd      	b.n	80025e6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f006 fa88 	bl	8008914 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2203      	movs	r2, #3
 8002408:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f002 f96f 	bl	80046f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	687e      	ldr	r6, [r7, #4]
 800241e:	466d      	mov	r5, sp
 8002420:	f106 0410 	add.w	r4, r6, #16
 8002424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	602b      	str	r3, [r5, #0]
 800242c:	1d33      	adds	r3, r6, #4
 800242e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002430:	6838      	ldr	r0, [r7, #0]
 8002432:	f002 f939 	bl	80046a8 <USB_CoreInit>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0ce      	b.n	80025e6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f002 f96a 	bl	8004728 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	e04c      	b.n	80024f4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	3301      	adds	r3, #1
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	b298      	uxth	r0, r3
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	3336      	adds	r3, #54	; 0x36
 8002498:	4602      	mov	r2, r0
 800249a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	3303      	adds	r3, #3
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	440b      	add	r3, r1
 80024c0:	3338      	adds	r3, #56	; 0x38
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	333c      	adds	r3, #60	; 0x3c
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024da:	7bfa      	ldrb	r2, [r7, #15]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	3340      	adds	r3, #64	; 0x40
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	3301      	adds	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d3ad      	bcc.n	800245a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024fe:	2300      	movs	r3, #0
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	e044      	b.n	800258e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	440b      	add	r3, r1
 800253e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	440b      	add	r3, r1
 8002554:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	440b      	add	r3, r1
 8002580:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	3301      	adds	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	d3b5      	bcc.n	8002504 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	687e      	ldr	r6, [r7, #4]
 80025a0:	466d      	mov	r5, sp
 80025a2:	f106 0410 	add.w	r4, r6, #16
 80025a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025aa:	6823      	ldr	r3, [r4, #0]
 80025ac:	602b      	str	r3, [r5, #0]
 80025ae:	1d33      	adds	r3, r6, #4
 80025b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b2:	6838      	ldr	r0, [r7, #0]
 80025b4:	f002 f8c4 	bl	8004740 <USB_DevInit>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2202      	movs	r2, #2
 80025c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00d      	b.n	80025e6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f004 fd76 	bl	80070d0 <USB_DevDisconnect>

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_PCD_Start+0x16>
 8002600:	2302      	movs	r3, #2
 8002602:	e016      	b.n	8002632 <HAL_PCD_Start+0x44>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f002 f859 	bl	80046c8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002616:	2101      	movs	r1, #1
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f006 fbca 	bl	8008db2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f004 fd4a 	bl	80070bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b088      	sub	sp, #32
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f004 fd4c 	bl	80070e4 <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002656:	d102      	bne.n	800265e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fb48 	bl	8002cee <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f004 fd3e 	bl	80070e4 <USB_ReadInterrupts>
 8002668:	4603      	mov	r3, r0
 800266a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002672:	d112      	bne.n	800269a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800267c:	b29a      	uxth	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002686:	b292      	uxth	r2, r2
 8002688:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f006 f9bc 	bl	8008a0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002692:	2100      	movs	r1, #0
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f923 	bl	80028e0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f004 fd20 	bl	80070e4 <USB_ReadInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ae:	d10b      	bne.n	80026c8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026c2:	b292      	uxth	r2, r2
 80026c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 fd09 	bl	80070e4 <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026dc:	d10b      	bne.n	80026f6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026f0:	b292      	uxth	r2, r2
 80026f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 fcf2 	bl	80070e4 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270a:	d126      	bne.n	800275a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002714:	b29a      	uxth	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0204 	bic.w	r2, r2, #4
 800271e:	b292      	uxth	r2, r2
 8002720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800272c:	b29a      	uxth	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0208 	bic.w	r2, r2, #8
 8002736:	b292      	uxth	r2, r2
 8002738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f006 f99d 	bl	8008a7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800274a:	b29a      	uxth	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002754:	b292      	uxth	r2, r2
 8002756:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f004 fcc0 	bl	80070e4 <USB_ReadInterrupts>
 8002764:	4603      	mov	r3, r0
 8002766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800276a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800276e:	f040 8082 	bne.w	8002876 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002772:	2300      	movs	r3, #0
 8002774:	77fb      	strb	r3, [r7, #31]
 8002776:	e010      	b.n	800279a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	7ffb      	ldrb	r3, [r7, #31]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	441a      	add	r2, r3
 8002784:	7ffb      	ldrb	r3, [r7, #31]
 8002786:	8812      	ldrh	r2, [r2, #0]
 8002788:	b292      	uxth	r2, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	3320      	adds	r3, #32
 800278e:	443b      	add	r3, r7
 8002790:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002794:	7ffb      	ldrb	r3, [r7, #31]
 8002796:	3301      	adds	r3, #1
 8002798:	77fb      	strb	r3, [r7, #31]
 800279a:	7ffb      	ldrb	r3, [r7, #31]
 800279c:	2b07      	cmp	r3, #7
 800279e:	d9eb      	bls.n	8002778 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	b292      	uxth	r2, r2
 80027b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	b292      	uxth	r2, r2
 80027cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80027d0:	bf00      	nop
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f6      	beq.n	80027d2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f6:	b292      	uxth	r2, r2
 80027f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	e00f      	b.n	8002822 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002802:	7ffb      	ldrb	r3, [r7, #31]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	4611      	mov	r1, r2
 800280a:	7ffa      	ldrb	r2, [r7, #31]
 800280c:	0092      	lsls	r2, r2, #2
 800280e:	440a      	add	r2, r1
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	3320      	adds	r3, #32
 8002814:	443b      	add	r3, r7
 8002816:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800281a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800281c:	7ffb      	ldrb	r3, [r7, #31]
 800281e:	3301      	adds	r3, #1
 8002820:	77fb      	strb	r3, [r7, #31]
 8002822:	7ffb      	ldrb	r3, [r7, #31]
 8002824:	2b07      	cmp	r3, #7
 8002826:	d9ec      	bls.n	8002802 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002830:	b29a      	uxth	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0208 	orr.w	r2, r2, #8
 800283a:	b292      	uxth	r2, r2
 800283c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002848:	b29a      	uxth	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002852:	b292      	uxth	r2, r2
 8002854:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002860:	b29a      	uxth	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0204 	orr.w	r2, r2, #4
 800286a:	b292      	uxth	r2, r2
 800286c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f006 f8e9 	bl	8008a48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f004 fc32 	bl	80070e4 <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800288a:	d10e      	bne.n	80028aa <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002894:	b29a      	uxth	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800289e:	b292      	uxth	r2, r2
 80028a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f006 f8a2 	bl	80089ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 fc18 	bl	80070e4 <USB_ReadInterrupts>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028be:	d10b      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d2:	b292      	uxth	r2, r2
 80028d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80028d8:	bf00      	nop
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_PCD_SetAddress+0x1a>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e013      	b.n	8002922 <HAL_PCD_SetAddress+0x42>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f004 fbbf 	bl	8007096 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	4608      	mov	r0, r1
 8002934:	4611      	mov	r1, r2
 8002936:	461a      	mov	r2, r3
 8002938:	4603      	mov	r3, r0
 800293a:	70fb      	strb	r3, [r7, #3]
 800293c:	460b      	mov	r3, r1
 800293e:	803b      	strh	r3, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800294c:	2b00      	cmp	r3, #0
 800294e:	da0e      	bge.n	800296e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	4413      	add	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	705a      	strb	r2, [r3, #1]
 800296c:	e00e      	b.n	800298c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	f003 0207 	and.w	r2, r3, #7
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002998:	883a      	ldrh	r2, [r7, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	78ba      	ldrb	r2, [r7, #2]
 80029a2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	785b      	ldrb	r3, [r3, #1]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029b6:	78bb      	ldrb	r3, [r7, #2]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d102      	bne.n	80029c2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_PCD_EP_Open+0xa6>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e00e      	b.n	80029ee <HAL_PCD_EP_Open+0xc4>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68f9      	ldr	r1, [r7, #12]
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 fece 	bl	8004780 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80029ec:	7afb      	ldrb	r3, [r7, #11]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	460b      	mov	r3, r1
 8002a00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	da0e      	bge.n	8002a28 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	705a      	strb	r2, [r3, #1]
 8002a26:	e00e      	b.n	8002a46 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	f003 0207 	and.w	r2, r3, #7
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_PCD_EP_Close+0x6a>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e00e      	b.n	8002a7e <HAL_PCD_EP_Close+0x88>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68f9      	ldr	r1, [r7, #12]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f002 f9f0 	bl	8004e54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	460b      	mov	r3, r1
 8002a94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a96:	7afb      	ldrb	r3, [r7, #11]
 8002a98:	f003 0207 	and.w	r2, r3, #7
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2200      	movs	r2, #0
 8002abe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ad2:	7afb      	ldrb	r3, [r7, #11]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d106      	bne.n	8002aea <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6979      	ldr	r1, [r7, #20]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 fba2 	bl	800522c <USB_EPStartXfer>
 8002ae8:	e005      	b.n	8002af6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6979      	ldr	r1, [r7, #20]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f002 fb9b 	bl	800522c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b10:	7afb      	ldrb	r3, [r7, #11]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2200      	movs	r2, #0
 8002b44:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b4c:	7afb      	ldrb	r3, [r7, #11]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b58:	7afb      	ldrb	r3, [r7, #11]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6979      	ldr	r1, [r7, #20]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f002 fb5f 	bl	800522c <USB_EPStartXfer>
 8002b6e:	e005      	b.n	8002b7c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6979      	ldr	r1, [r7, #20]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 fb58 	bl	800522c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	f003 0207 	and.w	r2, r3, #7
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d901      	bls.n	8002ba4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e04c      	b.n	8002c3e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	da0e      	bge.n	8002bca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	705a      	strb	r2, [r3, #1]
 8002bc8:	e00c      	b.n	8002be4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_PCD_EP_SetStall+0x7e>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e01c      	b.n	8002c3e <HAL_PCD_EP_SetStall+0xb8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68f9      	ldr	r1, [r7, #12]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f004 f942 	bl	8006e9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d108      	bne.n	8002c34 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	f004 fa67 	bl	8007102 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d901      	bls.n	8002c64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e040      	b.n	8002ce6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	da0e      	bge.n	8002c8a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	705a      	strb	r2, [r3, #1]
 8002c88:	e00e      	b.n	8002ca8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 0207 	and.w	r2, r3, #7
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_PCD_EP_ClrStall+0x82>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e00e      	b.n	8002ce6 <HAL_PCD_EP_ClrStall+0xa0>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68f9      	ldr	r1, [r7, #12]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f004 f930 	bl	8006f3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b08e      	sub	sp, #56	; 0x38
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cf6:	e2ec      	b.n	80032d2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d00:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002d0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 8161 	bne.w	8002fda <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d152      	bne.n	8002dc8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d32:	81fb      	strh	r3, [r7, #14]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	89fb      	ldrh	r3, [r7, #14]
 8002d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3328      	adds	r3, #40	; 0x28
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3302      	adds	r3, #2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	441a      	add	r2, r3
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002d86:	2100      	movs	r1, #0
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f005 fe16 	bl	80089ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 829b 	beq.w	80032d2 <PCD_EP_ISR_Handler+0x5e4>
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f040 8296 	bne.w	80032d2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	b292      	uxth	r2, r2
 8002dba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002dc6:	e284      	b.n	80032d2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002dd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d034      	beq.n	8002e4c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	3306      	adds	r3, #6
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f004 f9be 	bl	80071a2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e32:	4013      	ands	r3, r2
 8002e34:	823b      	strh	r3, [r7, #16]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	8a3a      	ldrh	r2, [r7, #16]
 8002e3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e40:	b292      	uxth	r2, r2
 8002e42:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f005 fd8b 	bl	8008960 <HAL_PCD_SetupStageCallback>
 8002e4a:	e242      	b.n	80032d2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f280 823e 	bge.w	80032d2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e62:	4013      	ands	r3, r2
 8002e64:	83bb      	strh	r3, [r7, #28]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	8bba      	ldrh	r2, [r7, #28]
 8002e6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e70:	b292      	uxth	r2, r2
 8002e72:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	3306      	adds	r3, #6
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d019      	beq.n	8002edc <PCD_EP_ISR_Handler+0x1ee>
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d015      	beq.n	8002edc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	6959      	ldr	r1, [r3, #20]
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	f004 f96e 	bl	80071a2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	441a      	add	r2, r3
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f005 fd54 	bl	8008984 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f040 81f2 	bne.w	80032d2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	61bb      	str	r3, [r7, #24]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	4413      	add	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d112      	bne.n	8002f3c <PCD_EP_ISR_Handler+0x24e>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	801a      	strh	r2, [r3, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	801a      	strh	r2, [r3, #0]
 8002f3a:	e02f      	b.n	8002f9c <PCD_EP_ISR_Handler+0x2ae>
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	2b3e      	cmp	r3, #62	; 0x3e
 8002f42:	d813      	bhi.n	8002f6c <PCD_EP_ISR_Handler+0x27e>
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	085b      	lsrs	r3, r3, #1
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <PCD_EP_ISR_Handler+0x270>
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	029b      	lsls	r3, r3, #10
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	801a      	strh	r2, [r3, #0]
 8002f6a:	e017      	b.n	8002f9c <PCD_EP_ISR_Handler+0x2ae>
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	633b      	str	r3, [r7, #48]	; 0x30
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <PCD_EP_ISR_Handler+0x298>
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	3b01      	subs	r3, #1
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	029b      	lsls	r3, r3, #10
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fac:	827b      	strh	r3, [r7, #18]
 8002fae:	8a7b      	ldrh	r3, [r7, #18]
 8002fb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002fb4:	827b      	strh	r3, [r7, #18]
 8002fb6:	8a7b      	ldrh	r3, [r7, #18]
 8002fb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fbc:	827b      	strh	r3, [r7, #18]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	8a7b      	ldrh	r3, [r7, #18]
 8002fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	8013      	strh	r3, [r2, #0]
 8002fd8:	e17b      	b.n	80032d2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002fec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f280 80ea 	bge.w	80031ca <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29a      	uxth	r2, r3
 8003008:	f640 738f 	movw	r3, #3983	; 0xf8f
 800300c:	4013      	ands	r3, r2
 800300e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003020:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003024:	b292      	uxth	r2, r2
 8003026:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003028:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	7b1b      	ldrb	r3, [r3, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d122      	bne.n	800308c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	3306      	adds	r3, #6
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800306e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003070:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8087 	beq.w	8003186 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	6959      	ldr	r1, [r3, #20]
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	88da      	ldrh	r2, [r3, #6]
 8003084:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003086:	f004 f88c 	bl	80071a2 <USB_ReadPMA>
 800308a:	e07c      	b.n	8003186 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	78db      	ldrb	r3, [r3, #3]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d108      	bne.n	80030a6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003094:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003096:	461a      	mov	r2, r3
 8003098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f927 	bl	80032ee <HAL_PCD_EP_DB_Receive>
 80030a0:	4603      	mov	r3, r0
 80030a2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80030a4:	e06f      	b.n	8003186 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c0:	847b      	strh	r3, [r7, #34]	; 0x22
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	441a      	add	r2, r3
 80030d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d021      	beq.n	8003144 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003108:	b29b      	uxth	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	3302      	adds	r3, #2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003128:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800312a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800312c:	2b00      	cmp	r3, #0
 800312e:	d02a      	beq.n	8003186 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	6959      	ldr	r1, [r3, #20]
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	891a      	ldrh	r2, [r3, #8]
 800313c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800313e:	f004 f830 	bl	80071a2 <USB_ReadPMA>
 8003142:	e020      	b.n	8003186 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800314c:	b29b      	uxth	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	3306      	adds	r3, #6
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800316c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800316e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	6959      	ldr	r1, [r3, #20]
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	895a      	ldrh	r2, [r3, #10]
 8003180:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003182:	f004 f80e 	bl	80071a2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800318c:	441a      	add	r2, r3
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003198:	441a      	add	r2, r3
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d004      	beq.n	80031b0 <PCD_EP_ISR_Handler+0x4c2>
 80031a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d206      	bcs.n	80031be <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f005 fbe4 	bl	8008984 <HAL_PCD_DataOutStageCallback>
 80031bc:	e005      	b.n	80031ca <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 f831 	bl	800522c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80031ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d07e      	beq.n	80032d2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80031d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	843b      	strh	r3, [r7, #32]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	441a      	add	r2, r3
 8003212:	8c3b      	ldrh	r3, [r7, #32]
 8003214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800321c:	b29b      	uxth	r3, r3
 800321e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	78db      	ldrb	r3, [r3, #3]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d00c      	beq.n	8003242 <PCD_EP_ISR_Handler+0x554>
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	78db      	ldrb	r3, [r3, #3]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003234:	2b02      	cmp	r3, #2
 8003236:	d146      	bne.n	80032c6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003238:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d141      	bne.n	80032c6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	3302      	adds	r3, #2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800326a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	8bfb      	ldrh	r3, [r7, #30]
 8003272:	429a      	cmp	r2, r3
 8003274:	d906      	bls.n	8003284 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	8bfb      	ldrh	r3, [r7, #30]
 800327c:	1ad2      	subs	r2, r2, r3
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	619a      	str	r2, [r3, #24]
 8003282:	e002      	b.n	800328a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	2200      	movs	r2, #0
 8003288:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	4619      	mov	r1, r3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f005 fb8e 	bl	80089ba <HAL_PCD_DataInStageCallback>
 800329e:	e018      	b.n	80032d2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	8bfb      	ldrh	r3, [r7, #30]
 80032a6:	441a      	add	r2, r3
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	8bfb      	ldrh	r3, [r7, #30]
 80032b2:	441a      	add	r2, r3
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 ffb4 	bl	800522c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80032c4:	e005      	b.n	80032d2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80032c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032c8:	461a      	mov	r2, r3
 80032ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f91b 	bl	8003508 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032da:	b29b      	uxth	r3, r3
 80032dc:	b21b      	sxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f6ff ad0a 	blt.w	8002cf8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3738      	adds	r7, #56	; 0x38
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b088      	sub	sp, #32
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	4613      	mov	r3, r2
 80032fa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d07e      	beq.n	8003404 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800330e:	b29b      	uxth	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	3302      	adds	r3, #2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800332e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	8b7b      	ldrh	r3, [r7, #26]
 8003336:	429a      	cmp	r2, r3
 8003338:	d306      	bcc.n	8003348 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	8b7b      	ldrh	r3, [r7, #26]
 8003340:	1ad2      	subs	r2, r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	619a      	str	r2, [r3, #24]
 8003346:	e002      	b.n	800334e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2200      	movs	r2, #0
 800334c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d123      	bne.n	800339e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800336c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003370:	833b      	strh	r3, [r7, #24]
 8003372:	8b3b      	ldrh	r3, [r7, #24]
 8003374:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003378:	833b      	strh	r3, [r7, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	441a      	add	r2, r3
 8003388:	8b3b      	ldrh	r3, [r7, #24]
 800338a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800338e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339a:	b29b      	uxth	r3, r3
 800339c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01f      	beq.n	80033e8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c2:	82fb      	strh	r3, [r7, #22]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	441a      	add	r2, r3
 80033d2:	8afb      	ldrh	r3, [r7, #22]
 80033d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033e8:	8b7b      	ldrh	r3, [r7, #26]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8087 	beq.w	80034fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	6959      	ldr	r1, [r3, #20]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	891a      	ldrh	r2, [r3, #8]
 80033fc:	8b7b      	ldrh	r3, [r7, #26]
 80033fe:	f003 fed0 	bl	80071a2 <USB_ReadPMA>
 8003402:	e07c      	b.n	80034fe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340c:	b29b      	uxth	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	3306      	adds	r3, #6
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800342c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	8b7b      	ldrh	r3, [r7, #26]
 8003434:	429a      	cmp	r2, r3
 8003436:	d306      	bcc.n	8003446 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	699a      	ldr	r2, [r3, #24]
 800343c:	8b7b      	ldrh	r3, [r7, #26]
 800343e:	1ad2      	subs	r2, r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	619a      	str	r2, [r3, #24]
 8003444:	e002      	b.n	800344c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2200      	movs	r2, #0
 800344a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d123      	bne.n	800349c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800346a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346e:	83fb      	strh	r3, [r7, #30]
 8003470:	8bfb      	ldrh	r3, [r7, #30]
 8003472:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003476:	83fb      	strh	r3, [r7, #30]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	441a      	add	r2, r3
 8003486:	8bfb      	ldrh	r3, [r7, #30]
 8003488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800348c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003498:	b29b      	uxth	r3, r3
 800349a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11f      	bne.n	80034e6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c0:	83bb      	strh	r3, [r7, #28]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	441a      	add	r2, r3
 80034d0:	8bbb      	ldrh	r3, [r7, #28]
 80034d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034e6:	8b7b      	ldrh	r3, [r7, #26]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	6959      	ldr	r1, [r3, #20]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	895a      	ldrh	r2, [r3, #10]
 80034f8:	8b7b      	ldrh	r3, [r7, #26]
 80034fa:	f003 fe52 	bl	80071a2 <USB_ReadPMA>
    }
  }

  return count;
 80034fe:	8b7b      	ldrh	r3, [r7, #26]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b0a2      	sub	sp, #136	; 0x88
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 81c7 	beq.w	80038b0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800352a:	b29b      	uxth	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	3302      	adds	r3, #2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800354a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003556:	429a      	cmp	r2, r3
 8003558:	d907      	bls.n	800356a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	619a      	str	r2, [r3, #24]
 8003568:	e002      	b.n	8003570 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2200      	movs	r2, #0
 800356e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f040 80b9 	bne.w	80036ec <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	785b      	ldrb	r3, [r3, #1]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d126      	bne.n	80035d0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003590:	b29b      	uxth	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003596:	4413      	add	r3, r2
 8003598:	62bb      	str	r3, [r7, #40]	; 0x28
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	011a      	lsls	r2, r3, #4
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	4413      	add	r3, r2
 80035a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	801a      	strh	r2, [r3, #0]
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	801a      	strh	r2, [r3, #0]
 80035ce:	e01a      	b.n	8003606 <HAL_PCD_EP_DB_Transmit+0xfe>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d116      	bne.n	8003606 <HAL_PCD_EP_DB_Transmit+0xfe>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	633b      	str	r3, [r7, #48]	; 0x30
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	4413      	add	r3, r2
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	011a      	lsls	r2, r3, #4
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	4413      	add	r3, r2
 80035fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	2200      	movs	r2, #0
 8003604:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	785b      	ldrb	r3, [r3, #1]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d126      	bne.n	8003662 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003622:	b29b      	uxth	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	4413      	add	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	011a      	lsls	r2, r3, #4
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4413      	add	r3, r2
 8003636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003646:	b29a      	uxth	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	801a      	strh	r2, [r3, #0]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800365a:	b29a      	uxth	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	e017      	b.n	8003692 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	785b      	ldrb	r3, [r3, #1]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d113      	bne.n	8003692 <HAL_PCD_EP_DB_Transmit+0x18a>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003672:	b29b      	uxth	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	4413      	add	r3, r2
 800367a:	623b      	str	r3, [r7, #32]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	011a      	lsls	r2, r3, #4
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	4413      	add	r3, r2
 8003686:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	2200      	movs	r2, #0
 8003690:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	4619      	mov	r1, r3
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f005 f98e 	bl	80089ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 82d4 	beq.w	8003c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c4:	827b      	strh	r3, [r7, #18]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	441a      	add	r2, r3
 80036d4:	8a7b      	ldrh	r3, [r7, #18]
 80036d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	8013      	strh	r3, [r2, #0]
 80036ea:	e2b2      	b.n	8003c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d021      	beq.n	800373a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800370c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003710:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	441a      	add	r2, r3
 8003722:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800372a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800372e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003736:	b29b      	uxth	r3, r3
 8003738:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 8286 	bne.w	8003c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800374e:	441a      	add	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800375c:	441a      	add	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	429a      	cmp	r2, r3
 800376c:	d309      	bcc.n	8003782 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	6a1a      	ldr	r2, [r3, #32]
 8003778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377a:	1ad2      	subs	r2, r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	621a      	str	r2, [r3, #32]
 8003780:	e015      	b.n	80037ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d107      	bne.n	800379a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800378a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800378e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003798:	e009      	b.n	80037ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2200      	movs	r2, #0
 80037ac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	785b      	ldrb	r3, [r3, #1]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d155      	bne.n	8003862 <HAL_PCD_EP_DB_Transmit+0x35a>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	4413      	add	r3, r2
 80037cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	011a      	lsls	r2, r3, #4
 80037d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d6:	4413      	add	r3, r2
 80037d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
 80037de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d112      	bne.n	800380a <HAL_PCD_EP_DB_Transmit+0x302>
 80037e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003802:	b29a      	uxth	r2, r3
 8003804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003806:	801a      	strh	r2, [r3, #0]
 8003808:	e047      	b.n	800389a <HAL_PCD_EP_DB_Transmit+0x392>
 800380a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800380c:	2b3e      	cmp	r3, #62	; 0x3e
 800380e:	d811      	bhi.n	8003834 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	64bb      	str	r3, [r7, #72]	; 0x48
 8003816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003822:	3301      	adds	r3, #1
 8003824:	64bb      	str	r3, [r7, #72]	; 0x48
 8003826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003828:	b29b      	uxth	r3, r3
 800382a:	029b      	lsls	r3, r3, #10
 800382c:	b29a      	uxth	r2, r3
 800382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003830:	801a      	strh	r2, [r3, #0]
 8003832:	e032      	b.n	800389a <HAL_PCD_EP_DB_Transmit+0x392>
 8003834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	64bb      	str	r3, [r7, #72]	; 0x48
 800383a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <HAL_PCD_EP_DB_Transmit+0x342>
 8003844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003846:	3b01      	subs	r3, #1
 8003848:	64bb      	str	r3, [r7, #72]	; 0x48
 800384a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800384c:	b29b      	uxth	r3, r3
 800384e:	029b      	lsls	r3, r3, #10
 8003850:	b29b      	uxth	r3, r3
 8003852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800385a:	b29a      	uxth	r2, r3
 800385c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385e:	801a      	strh	r2, [r3, #0]
 8003860:	e01b      	b.n	800389a <HAL_PCD_EP_DB_Transmit+0x392>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	785b      	ldrb	r3, [r3, #1]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d117      	bne.n	800389a <HAL_PCD_EP_DB_Transmit+0x392>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	643b      	str	r3, [r7, #64]	; 0x40
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003878:	b29b      	uxth	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387e:	4413      	add	r3, r2
 8003880:	643b      	str	r3, [r7, #64]	; 0x40
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	011a      	lsls	r2, r3, #4
 8003888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388a:	4413      	add	r3, r2
 800388c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003894:	b29a      	uxth	r2, r3
 8003896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003898:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	6959      	ldr	r1, [r3, #20]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	891a      	ldrh	r2, [r3, #8]
 80038a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f003 fc35 	bl	8007118 <USB_WritePMA>
 80038ae:	e1d0      	b.n	8003c52 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	3306      	adds	r3, #6
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d307      	bcc.n	80038f8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038f0:	1ad2      	subs	r2, r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	619a      	str	r2, [r3, #24]
 80038f6:	e002      	b.n	80038fe <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2200      	movs	r2, #0
 80038fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f040 80c4 	bne.w	8003a90 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	785b      	ldrb	r3, [r3, #1]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d126      	bne.n	800395e <HAL_PCD_EP_DB_Transmit+0x456>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800391e:	b29b      	uxth	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003924:	4413      	add	r3, r2
 8003926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	011a      	lsls	r2, r3, #4
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	4413      	add	r3, r2
 8003932:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003936:	66bb      	str	r3, [r7, #104]	; 0x68
 8003938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003942:	b29a      	uxth	r2, r3
 8003944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003946:	801a      	strh	r2, [r3, #0]
 8003948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003956:	b29a      	uxth	r2, r3
 8003958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	e01a      	b.n	8003994 <HAL_PCD_EP_DB_Transmit+0x48c>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	785b      	ldrb	r3, [r3, #1]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d116      	bne.n	8003994 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	677b      	str	r3, [r7, #116]	; 0x74
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003974:	b29b      	uxth	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397a:	4413      	add	r3, r2
 800397c:	677b      	str	r3, [r7, #116]	; 0x74
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	011a      	lsls	r2, r3, #4
 8003984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003986:	4413      	add	r3, r2
 8003988:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800398c:	673b      	str	r3, [r7, #112]	; 0x70
 800398e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003990:	2200      	movs	r2, #0
 8003992:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	67bb      	str	r3, [r7, #120]	; 0x78
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	785b      	ldrb	r3, [r3, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d12f      	bne.n	8003a02 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039ba:	4413      	add	r3, r2
 80039bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	011a      	lsls	r2, r3, #4
 80039c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039ca:	4413      	add	r3, r2
 80039cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039e6:	801a      	strh	r2, [r3, #0]
 80039e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	e017      	b.n	8003a32 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	785b      	ldrb	r3, [r3, #1]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d113      	bne.n	8003a32 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a18:	4413      	add	r3, r2
 8003a1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	011a      	lsls	r2, r3, #4
 8003a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a24:	4413      	add	r3, r2
 8003a26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a2e:	2200      	movs	r2, #0
 8003a30:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	4619      	mov	r1, r3
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f004 ffbe 	bl	80089ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f040 8104 	bne.w	8003c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a64:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	441a      	add	r2, r3
 8003a76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	8013      	strh	r3, [r2, #0]
 8003a8e:	e0e0      	b.n	8003c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d121      	bne.n	8003ade <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	441a      	add	r2, r3
 8003ac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	f040 80b4 	bne.w	8003c52 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003af2:	441a      	add	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b00:	441a      	add	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	6a1a      	ldr	r2, [r3, #32]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d309      	bcc.n	8003b26 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	6a1a      	ldr	r2, [r3, #32]
 8003b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	621a      	str	r2, [r3, #32]
 8003b24:	e015      	b.n	8003b52 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d107      	bne.n	8003b3e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003b2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b32:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b3c:	e009      	b.n	8003b52 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2200      	movs	r2, #0
 8003b48:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	667b      	str	r3, [r7, #100]	; 0x64
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	785b      	ldrb	r3, [r3, #1]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d155      	bne.n	8003c0c <HAL_PCD_EP_DB_Transmit+0x704>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	461a      	mov	r2, r3
 8003b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b74:	4413      	add	r3, r2
 8003b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	011a      	lsls	r2, r3, #4
 8003b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b80:	4413      	add	r3, r2
 8003b82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b86:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d112      	bne.n	8003bb4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb0:	801a      	strh	r2, [r3, #0]
 8003bb2:	e044      	b.n	8003c3e <HAL_PCD_EP_DB_Transmit+0x736>
 8003bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8003bb8:	d811      	bhi.n	8003bde <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8003bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bcc:	3301      	adds	r3, #1
 8003bce:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	029b      	lsls	r3, r3, #10
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bda:	801a      	strh	r2, [r3, #0]
 8003bdc:	e02f      	b.n	8003c3e <HAL_PCD_EP_DB_Transmit+0x736>
 8003bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	657b      	str	r3, [r7, #84]	; 0x54
 8003be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d102      	bne.n	8003bf4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	029b      	lsls	r3, r3, #10
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	e018      	b.n	8003c3e <HAL_PCD_EP_DB_Transmit+0x736>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d114      	bne.n	8003c3e <HAL_PCD_EP_DB_Transmit+0x736>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c22:	4413      	add	r3, r2
 8003c24:	667b      	str	r3, [r7, #100]	; 0x64
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	011a      	lsls	r2, r3, #4
 8003c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c2e:	4413      	add	r3, r2
 8003c30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c34:	663b      	str	r3, [r7, #96]	; 0x60
 8003c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c3c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6959      	ldr	r1, [r3, #20]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	895a      	ldrh	r2, [r3, #10]
 8003c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f003 fa63 	bl	8007118 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c6c:	823b      	strh	r3, [r7, #16]
 8003c6e:	8a3b      	ldrh	r3, [r7, #16]
 8003c70:	f083 0310 	eor.w	r3, r3, #16
 8003c74:	823b      	strh	r3, [r7, #16]
 8003c76:	8a3b      	ldrh	r3, [r7, #16]
 8003c78:	f083 0320 	eor.w	r3, r3, #32
 8003c7c:	823b      	strh	r3, [r7, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	441a      	add	r2, r3
 8003c8c:	8a3b      	ldrh	r3, [r7, #16]
 8003c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3788      	adds	r7, #136	; 0x88
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	817b      	strh	r3, [r7, #10]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003cbe:	897b      	ldrh	r3, [r7, #10]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cca:	897b      	ldrh	r3, [r7, #10]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e009      	b.n	8003cf6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ce2:	897a      	ldrh	r2, [r7, #10]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003cf6:	893b      	ldrh	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d107      	bne.n	8003d0c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	80da      	strh	r2, [r3, #6]
 8003d0a:	e00b      	b.n	8003d24 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0c1b      	lsrs	r3, r3, #16
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e272      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8087 	beq.w	8003e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d50:	4b92      	ldr	r3, [pc, #584]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d00c      	beq.n	8003d76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d5c:	4b8f      	ldr	r3, [pc, #572]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d112      	bne.n	8003d8e <HAL_RCC_OscConfig+0x5e>
 8003d68:	4b8c      	ldr	r3, [pc, #560]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d74:	d10b      	bne.n	8003d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d76:	4b89      	ldr	r3, [pc, #548]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d06c      	beq.n	8003e5c <HAL_RCC_OscConfig+0x12c>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d168      	bne.n	8003e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e24c      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x76>
 8003d98:	4b80      	ldr	r3, [pc, #512]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7f      	ldr	r2, [pc, #508]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e02e      	b.n	8003e04 <HAL_RCC_OscConfig+0xd4>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x98>
 8003dae:	4b7b      	ldr	r3, [pc, #492]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7a      	ldr	r2, [pc, #488]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b78      	ldr	r3, [pc, #480]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a77      	ldr	r2, [pc, #476]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e01d      	b.n	8003e04 <HAL_RCC_OscConfig+0xd4>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0xbc>
 8003dd2:	4b72      	ldr	r3, [pc, #456]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a71      	ldr	r2, [pc, #452]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a6e      	ldr	r2, [pc, #440]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0xd4>
 8003dec:	4b6b      	ldr	r3, [pc, #428]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6a      	ldr	r2, [pc, #424]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4b68      	ldr	r3, [pc, #416]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a67      	ldr	r2, [pc, #412]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d013      	beq.n	8003e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fd fa7c 	bl	8001308 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fd fa78 	bl	8001308 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e200      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	4b5d      	ldr	r3, [pc, #372]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0xe4>
 8003e32:	e014      	b.n	8003e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fd fa68 	bl	8001308 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fd fa64 	bl	8001308 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	; 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e1ec      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4e:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x10c>
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d063      	beq.n	8003f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e6a:	4b4c      	ldr	r3, [pc, #304]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e76:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d11c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x18c>
 8003e82:	4b46      	ldr	r3, [pc, #280]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d116      	bne.n	8003ebc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8e:	4b43      	ldr	r3, [pc, #268]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x176>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e1c0      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4939      	ldr	r1, [pc, #228]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eba:	e03a      	b.n	8003f32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec4:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <HAL_RCC_OscConfig+0x270>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fd fa1d 	bl	8001308 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7fd fa19 	bl	8001308 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e1a1      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef0:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4927      	ldr	r1, [pc, #156]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]
 8003f04:	e015      	b.n	8003f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f06:	4b26      	ldr	r3, [pc, #152]	; (8003fa0 <HAL_RCC_OscConfig+0x270>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fd f9fc 	bl	8001308 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f14:	f7fd f9f8 	bl	8001308 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e180      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d03a      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d019      	beq.n	8003f7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f46:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4c:	f7fd f9dc 	bl	8001308 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f54:	f7fd f9d8 	bl	8001308 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e160      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <HAL_RCC_OscConfig+0x26c>)
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f72:	2001      	movs	r0, #1
 8003f74:	f000 fac4 	bl	8004500 <RCC_Delay>
 8003f78:	e01c      	b.n	8003fb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fd f9c2 	bl	8001308 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f86:	e00f      	b.n	8003fa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f88:	f7fd f9be 	bl	8001308 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d908      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e146      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	42420000 	.word	0x42420000
 8003fa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa8:	4b92      	ldr	r3, [pc, #584]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e9      	bne.n	8003f88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80a6 	beq.w	800410e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc6:	4b8b      	ldr	r3, [pc, #556]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10d      	bne.n	8003fee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd2:	4b88      	ldr	r3, [pc, #544]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	4a87      	ldr	r2, [pc, #540]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8003fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	61d3      	str	r3, [r2, #28]
 8003fde:	4b85      	ldr	r3, [pc, #532]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fea:	2301      	movs	r3, #1
 8003fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fee:	4b82      	ldr	r3, [pc, #520]	; (80041f8 <HAL_RCC_OscConfig+0x4c8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d118      	bne.n	800402c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ffa:	4b7f      	ldr	r3, [pc, #508]	; (80041f8 <HAL_RCC_OscConfig+0x4c8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7e      	ldr	r2, [pc, #504]	; (80041f8 <HAL_RCC_OscConfig+0x4c8>)
 8004000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004006:	f7fd f97f 	bl	8001308 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400e:	f7fd f97b 	bl	8001308 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b64      	cmp	r3, #100	; 0x64
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e103      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	4b75      	ldr	r3, [pc, #468]	; (80041f8 <HAL_RCC_OscConfig+0x4c8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d106      	bne.n	8004042 <HAL_RCC_OscConfig+0x312>
 8004034:	4b6f      	ldr	r3, [pc, #444]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	4a6e      	ldr	r2, [pc, #440]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	6213      	str	r3, [r2, #32]
 8004040:	e02d      	b.n	800409e <HAL_RCC_OscConfig+0x36e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x334>
 800404a:	4b6a      	ldr	r3, [pc, #424]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4a69      	ldr	r2, [pc, #420]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6213      	str	r3, [r2, #32]
 8004056:	4b67      	ldr	r3, [pc, #412]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	4a66      	ldr	r2, [pc, #408]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	6213      	str	r3, [r2, #32]
 8004062:	e01c      	b.n	800409e <HAL_RCC_OscConfig+0x36e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b05      	cmp	r3, #5
 800406a:	d10c      	bne.n	8004086 <HAL_RCC_OscConfig+0x356>
 800406c:	4b61      	ldr	r3, [pc, #388]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4a60      	ldr	r2, [pc, #384]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	6213      	str	r3, [r2, #32]
 8004078:	4b5e      	ldr	r3, [pc, #376]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	4a5d      	ldr	r2, [pc, #372]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6213      	str	r3, [r2, #32]
 8004084:	e00b      	b.n	800409e <HAL_RCC_OscConfig+0x36e>
 8004086:	4b5b      	ldr	r3, [pc, #364]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4a5a      	ldr	r2, [pc, #360]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	6213      	str	r3, [r2, #32]
 8004092:	4b58      	ldr	r3, [pc, #352]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	4a57      	ldr	r2, [pc, #348]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d015      	beq.n	80040d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a6:	f7fd f92f 	bl	8001308 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fd f92b 	bl	8001308 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e0b1      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	4b4b      	ldr	r3, [pc, #300]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ee      	beq.n	80040ae <HAL_RCC_OscConfig+0x37e>
 80040d0:	e014      	b.n	80040fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d2:	f7fd f919 	bl	8001308 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fd f915 	bl	8001308 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e09b      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f0:	4b40      	ldr	r3, [pc, #256]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ee      	bne.n	80040da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004102:	4b3c      	ldr	r3, [pc, #240]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a3b      	ldr	r2, [pc, #236]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8087 	beq.w	8004226 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004118:	4b36      	ldr	r3, [pc, #216]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b08      	cmp	r3, #8
 8004122:	d061      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d146      	bne.n	80041ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <HAL_RCC_OscConfig+0x4cc>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fd f8e9 	bl	8001308 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413a:	f7fd f8e5 	bl	8001308 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e06d      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414c:	4b29      	ldr	r3, [pc, #164]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004160:	d108      	bne.n	8004174 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4921      	ldr	r1, [pc, #132]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004174:	4b1f      	ldr	r3, [pc, #124]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a19      	ldr	r1, [r3, #32]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	430b      	orrs	r3, r1
 8004186:	491b      	ldr	r1, [pc, #108]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCC_OscConfig+0x4cc>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004192:	f7fd f8b9 	bl	8001308 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419a:	f7fd f8b5 	bl	8001308 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e03d      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ac:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x46a>
 80041b8:	e035      	b.n	8004226 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ba:	4b10      	ldr	r3, [pc, #64]	; (80041fc <HAL_RCC_OscConfig+0x4cc>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7fd f8a2 	bl	8001308 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fd f89e 	bl	8001308 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e026      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_RCC_OscConfig+0x4c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x498>
 80041e6:	e01e      	b.n	8004226 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e019      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40007000 	.word	0x40007000
 80041fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_OscConfig+0x500>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	429a      	cmp	r2, r3
 8004212:	d106      	bne.n	8004222 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d001      	beq.n	8004226 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40021000 	.word	0x40021000

08004234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0d0      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004248:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d910      	bls.n	8004278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b67      	ldr	r3, [pc, #412]	; (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 0207 	bic.w	r2, r3, #7
 800425e:	4965      	ldr	r1, [pc, #404]	; (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b63      	ldr	r3, [pc, #396]	; (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0b8      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d020      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004290:	4b59      	ldr	r3, [pc, #356]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4a58      	ldr	r2, [pc, #352]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800429a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a8:	4b53      	ldr	r3, [pc, #332]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4a52      	ldr	r2, [pc, #328]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b4:	4b50      	ldr	r3, [pc, #320]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	494d      	ldr	r1, [pc, #308]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d040      	beq.n	8004354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d107      	bne.n	80042ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	4b47      	ldr	r3, [pc, #284]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d115      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e07f      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d107      	bne.n	8004302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f2:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e073      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004302:	4b3d      	ldr	r3, [pc, #244]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e06b      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004312:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f023 0203 	bic.w	r2, r3, #3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4936      	ldr	r1, [pc, #216]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004324:	f7fc fff0 	bl	8001308 <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	e00a      	b.n	8004342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800432c:	f7fc ffec 	bl	8001308 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e053      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 020c 	and.w	r2, r3, #12
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	429a      	cmp	r2, r3
 8004352:	d1eb      	bne.n	800432c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004354:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d210      	bcs.n	8004384 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 0207 	bic.w	r2, r3, #7
 800436a:	4922      	ldr	r1, [pc, #136]	; (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e032      	b.n	80043ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004390:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4916      	ldr	r1, [pc, #88]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043ae:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	490e      	ldr	r1, [pc, #56]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043c2:	f000 f821 	bl	8004408 <HAL_RCC_GetSysClockFreq>
 80043c6:	4602      	mov	r2, r0
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCC_ClockConfig+0x1c4>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	091b      	lsrs	r3, r3, #4
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	490a      	ldr	r1, [pc, #40]	; (80043fc <HAL_RCC_ClockConfig+0x1c8>)
 80043d4:	5ccb      	ldrb	r3, [r1, r3]
 80043d6:	fa22 f303 	lsr.w	r3, r2, r3
 80043da:	4a09      	ldr	r2, [pc, #36]	; (8004400 <HAL_RCC_ClockConfig+0x1cc>)
 80043dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_RCC_ClockConfig+0x1d0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fc ff4e 	bl	8001284 <HAL_InitTick>

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40022000 	.word	0x40022000
 80043f8:	40021000 	.word	0x40021000
 80043fc:	0800aa00 	.word	0x0800aa00
 8004400:	20000008 	.word	0x20000008
 8004404:	2000000c 	.word	0x2000000c

08004408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004408:	b490      	push	{r4, r7}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800440e:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004410:	1d3c      	adds	r4, r7, #4
 8004412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004418:	f240 2301 	movw	r3, #513	; 0x201
 800441c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	2300      	movs	r3, #0
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	2300      	movs	r3, #0
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004432:	4b21      	ldr	r3, [pc, #132]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b04      	cmp	r3, #4
 8004440:	d002      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x40>
 8004442:	2b08      	cmp	r3, #8
 8004444:	d003      	beq.n	800444e <HAL_RCC_GetSysClockFreq+0x46>
 8004446:	e02b      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004448:	4b1c      	ldr	r3, [pc, #112]	; (80044bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800444a:	623b      	str	r3, [r7, #32]
      break;
 800444c:	e02b      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	0c9b      	lsrs	r3, r3, #18
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	3328      	adds	r3, #40	; 0x28
 8004458:	443b      	add	r3, r7
 800445a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800445e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d012      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	0c5b      	lsrs	r3, r3, #17
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	3328      	adds	r3, #40	; 0x28
 8004476:	443b      	add	r3, r7
 8004478:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800447c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	4a0e      	ldr	r2, [pc, #56]	; (80044bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004482:	fb03 f202 	mul.w	r2, r3, r2
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
 800448e:	e004      	b.n	800449a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	623b      	str	r3, [r7, #32]
      break;
 800449e:	e002      	b.n	80044a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80044a2:	623b      	str	r3, [r7, #32]
      break;
 80044a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a6:	6a3b      	ldr	r3, [r7, #32]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3728      	adds	r7, #40	; 0x28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc90      	pop	{r4, r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	08009794 	.word	0x08009794
 80044b8:	40021000 	.word	0x40021000
 80044bc:	007a1200 	.word	0x007a1200
 80044c0:	003d0900 	.word	0x003d0900

080044c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c8:	4b02      	ldr	r3, [pc, #8]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80044ca:	681b      	ldr	r3, [r3, #0]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	20000008 	.word	0x20000008

080044d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044dc:	f7ff fff2 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000
 80044fc:	0800aa10 	.word	0x0800aa10

08004500 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <RCC_Delay+0x34>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <RCC_Delay+0x38>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	0a5b      	lsrs	r3, r3, #9
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800451c:	bf00      	nop
  }
  while (Delay --);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1e5a      	subs	r2, r3, #1
 8004522:	60fa      	str	r2, [r7, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f9      	bne.n	800451c <RCC_Delay+0x1c>
}
 8004528:	bf00      	nop
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	20000008 	.word	0x20000008
 8004538:	10624dd3 	.word	0x10624dd3

0800453c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d07d      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004558:	2300      	movs	r3, #0
 800455a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455c:	4b4f      	ldr	r3, [pc, #316]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004568:	4b4c      	ldr	r3, [pc, #304]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	4a4b      	ldr	r2, [pc, #300]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004572:	61d3      	str	r3, [r2, #28]
 8004574:	4b49      	ldr	r3, [pc, #292]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004580:	2301      	movs	r3, #1
 8004582:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	4b46      	ldr	r3, [pc, #280]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d118      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004590:	4b43      	ldr	r3, [pc, #268]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a42      	ldr	r2, [pc, #264]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459c:	f7fc feb4 	bl	8001308 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a2:	e008      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a4:	f7fc feb0 	bl	8001308 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e06d      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b6:	4b3a      	ldr	r3, [pc, #232]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045c2:	4b36      	ldr	r3, [pc, #216]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d02e      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d027      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e0:	4b2e      	ldr	r3, [pc, #184]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ea:	4b2e      	ldr	r3, [pc, #184]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045f0:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045f6:	4a29      	ldr	r2, [pc, #164]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d014      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004606:	f7fc fe7f 	bl	8001308 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460c:	e00a      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7fc fe7b 	bl	8001308 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f241 3288 	movw	r2, #5000	; 0x1388
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e036      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004624:	4b1d      	ldr	r3, [pc, #116]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0ee      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004630:	4b1a      	ldr	r3, [pc, #104]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4917      	ldr	r1, [pc, #92]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	4313      	orrs	r3, r2
 8004640:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004642:	7dfb      	ldrb	r3, [r7, #23]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d105      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004648:	4b14      	ldr	r3, [pc, #80]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	4a13      	ldr	r2, [pc, #76]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004652:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004660:	4b0e      	ldr	r3, [pc, #56]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	490b      	ldr	r1, [pc, #44]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466e:	4313      	orrs	r3, r2
 8004670:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800467e:	4b07      	ldr	r3, [pc, #28]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	4904      	ldr	r1, [pc, #16]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	40007000 	.word	0x40007000
 80046a4:	42420440 	.word	0x42420440

080046a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046a8:	b084      	sub	sp, #16
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	f107 0014 	add.w	r0, r7, #20
 80046b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	b004      	add	sp, #16
 80046c6:	4770      	bx	lr

080046c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80046dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004700:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	b29b      	uxth	r3, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	b29b      	uxth	r3, r3
 8004712:	4013      	ands	r3, r2
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004740:	b084      	sub	sp, #16
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	f107 0014 	add.w	r0, r7, #20
 800474e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	b004      	add	sp, #16
 800477e:	4770      	bx	lr

08004780 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004780:	b480      	push	{r7}
 8004782:	b09b      	sub	sp, #108	; 0x6c
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80047a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	78db      	ldrb	r3, [r3, #3]
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d81f      	bhi.n	80047f2 <USB_ActivateEndpoint+0x72>
 80047b2:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <USB_ActivateEndpoint+0x38>)
 80047b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b8:	080047c9 	.word	0x080047c9
 80047bc:	080047e5 	.word	0x080047e5
 80047c0:	080047fb 	.word	0x080047fb
 80047c4:	080047d7 	.word	0x080047d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80047c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80047d4:	e012      	b.n	80047fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80047d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80047de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80047e2:	e00b      	b.n	80047fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80047e4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80047f0:	e004      	b.n	80047fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80047f8:	e000      	b.n	80047fc <USB_ActivateEndpoint+0x7c>
      break;
 80047fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	441a      	add	r2, r3
 8004806:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800480a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481a:	b29b      	uxth	r3, r3
 800481c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004834:	b29a      	uxth	r2, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	4313      	orrs	r3, r2
 800483e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004860:	b29b      	uxth	r3, r3
 8004862:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	7b1b      	ldrb	r3, [r3, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f040 8149 	bne.w	8004b00 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	785b      	ldrb	r3, [r3, #1]
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8084 	beq.w	8004980 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	4413      	add	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	011a      	lsls	r2, r3, #4
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	88db      	ldrh	r3, [r3, #6]
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	81fb      	strh	r3, [r7, #14]
 80048ba:	89fb      	ldrh	r3, [r7, #14]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01b      	beq.n	80048fc <USB_ActivateEndpoint+0x17c>
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	81bb      	strh	r3, [r7, #12]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	441a      	add	r2, r3
 80048e6:	89bb      	ldrh	r3, [r7, #12]
 80048e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	78db      	ldrb	r3, [r3, #3]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d020      	beq.n	8004946 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491a:	813b      	strh	r3, [r7, #8]
 800491c:	893b      	ldrh	r3, [r7, #8]
 800491e:	f083 0320 	eor.w	r3, r3, #32
 8004922:	813b      	strh	r3, [r7, #8]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	441a      	add	r2, r3
 800492e:	893b      	ldrh	r3, [r7, #8]
 8004930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004940:	b29b      	uxth	r3, r3
 8004942:	8013      	strh	r3, [r2, #0]
 8004944:	e27f      	b.n	8004e46 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495c:	817b      	strh	r3, [r7, #10]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	441a      	add	r2, r3
 8004968:	897b      	ldrh	r3, [r7, #10]
 800496a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497a:	b29b      	uxth	r3, r3
 800497c:	8013      	strh	r3, [r2, #0]
 800497e:	e262      	b.n	8004e46 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800498a:	b29b      	uxth	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	4413      	add	r3, r2
 8004992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	011a      	lsls	r2, r3, #4
 800499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499c:	4413      	add	r3, r2
 800499e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	88db      	ldrh	r3, [r3, #6]
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	4413      	add	r3, r2
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	011a      	lsls	r2, r3, #4
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	4413      	add	r3, r2
 80049d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049d6:	623b      	str	r3, [r7, #32]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d112      	bne.n	8004a06 <USB_ActivateEndpoint+0x286>
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	801a      	strh	r2, [r3, #0]
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	e02f      	b.n	8004a66 <USB_ActivateEndpoint+0x2e6>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a0c:	d813      	bhi.n	8004a36 <USB_ActivateEndpoint+0x2b6>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	663b      	str	r3, [r7, #96]	; 0x60
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <USB_ActivateEndpoint+0x2a8>
 8004a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a24:	3301      	adds	r3, #1
 8004a26:	663b      	str	r3, [r7, #96]	; 0x60
 8004a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	029b      	lsls	r3, r3, #10
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	801a      	strh	r2, [r3, #0]
 8004a34:	e017      	b.n	8004a66 <USB_ActivateEndpoint+0x2e6>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <USB_ActivateEndpoint+0x2d0>
 8004a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	029b      	lsls	r3, r3, #10
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	83fb      	strh	r3, [r7, #30]
 8004a74:	8bfb      	ldrh	r3, [r7, #30]
 8004a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01b      	beq.n	8004ab6 <USB_ActivateEndpoint+0x336>
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a94:	83bb      	strh	r3, [r7, #28]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	8bbb      	ldrh	r3, [r7, #28]
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	837b      	strh	r3, [r7, #26]
 8004ace:	8b7b      	ldrh	r3, [r7, #26]
 8004ad0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ad4:	837b      	strh	r3, [r7, #26]
 8004ad6:	8b7b      	ldrh	r3, [r7, #26]
 8004ad8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004adc:	837b      	strh	r3, [r7, #26]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	8b7b      	ldrh	r3, [r7, #26]
 8004aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	8013      	strh	r3, [r2, #0]
 8004afe:	e1a2      	b.n	8004e46 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	441a      	add	r2, r3
 8004b24:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b30:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b4c:	4413      	add	r3, r2
 8004b4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	011a      	lsls	r2, r3, #4
 8004b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	891b      	ldrh	r3, [r3, #8]
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	653b      	str	r3, [r7, #80]	; 0x50
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b80:	4413      	add	r3, r2
 8004b82:	653b      	str	r3, [r7, #80]	; 0x50
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	011a      	lsls	r2, r3, #4
 8004b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	895b      	ldrh	r3, [r3, #10]
 8004b98:	085b      	lsrs	r3, r3, #1
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 8091 	bne.w	8004cd0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004bbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01b      	beq.n	8004bfe <USB_ActivateEndpoint+0x47e>
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bdc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	441a      	add	r2, r3
 8004be8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d01b      	beq.n	8004c4e <USB_ActivateEndpoint+0x4ce>
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	441a      	add	r2, r3
 8004c38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c6c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c74:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	441a      	add	r2, r3
 8004c80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cac:	867b      	strh	r3, [r7, #50]	; 0x32
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	441a      	add	r2, r3
 8004cb8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	8013      	strh	r3, [r2, #0]
 8004cce:	e0ba      	b.n	8004e46 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ce0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01d      	beq.n	8004d28 <USB_ActivateEndpoint+0x5a8>
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	441a      	add	r2, r3
 8004d10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004d38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01d      	beq.n	8004d80 <USB_ActivateEndpoint+0x600>
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	441a      	add	r2, r3
 8004d68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	78db      	ldrb	r3, [r3, #3]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d024      	beq.n	8004dd2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004da2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004da6:	f083 0320 	eor.w	r3, r3, #32
 8004daa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	441a      	add	r2, r3
 8004db8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	8013      	strh	r3, [r2, #0]
 8004dd0:	e01d      	b.n	8004e0e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e24:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	441a      	add	r2, r3
 8004e30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004e46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	376c      	adds	r7, #108	; 0x6c
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr

08004e54 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b08d      	sub	sp, #52	; 0x34
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	7b1b      	ldrb	r3, [r3, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 808e 	bne.w	8004f84 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d044      	beq.n	8004efa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	81bb      	strh	r3, [r7, #12]
 8004e7e:	89bb      	ldrh	r3, [r7, #12]
 8004e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01b      	beq.n	8004ec0 <USB_DeactivateEndpoint+0x6c>
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	817b      	strh	r3, [r7, #10]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	441a      	add	r2, r3
 8004eaa:	897b      	ldrh	r3, [r7, #10]
 8004eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed6:	813b      	strh	r3, [r7, #8]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	441a      	add	r2, r3
 8004ee2:	893b      	ldrh	r3, [r7, #8]
 8004ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	8013      	strh	r3, [r2, #0]
 8004ef8:	e192      	b.n	8005220 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	827b      	strh	r3, [r7, #18]
 8004f08:	8a7b      	ldrh	r3, [r7, #18]
 8004f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01b      	beq.n	8004f4a <USB_DeactivateEndpoint+0xf6>
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f28:	823b      	strh	r3, [r7, #16]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	441a      	add	r2, r3
 8004f34:	8a3b      	ldrh	r3, [r7, #16]
 8004f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f60:	81fb      	strh	r3, [r7, #14]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	441a      	add	r2, r3
 8004f6c:	89fb      	ldrh	r3, [r7, #14]
 8004f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	8013      	strh	r3, [r2, #0]
 8004f82:	e14d      	b.n	8005220 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	785b      	ldrb	r3, [r3, #1]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f040 80a5 	bne.w	80050d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	843b      	strh	r3, [r7, #32]
 8004f9c:	8c3b      	ldrh	r3, [r7, #32]
 8004f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01b      	beq.n	8004fde <USB_DeactivateEndpoint+0x18a>
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbc:	83fb      	strh	r3, [r7, #30]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	441a      	add	r2, r3
 8004fc8:	8bfb      	ldrh	r3, [r7, #30]
 8004fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	83bb      	strh	r3, [r7, #28]
 8004fec:	8bbb      	ldrh	r3, [r7, #28]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01b      	beq.n	800502e <USB_DeactivateEndpoint+0x1da>
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500c:	837b      	strh	r3, [r7, #26]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	441a      	add	r2, r3
 8005018:	8b7b      	ldrh	r3, [r7, #26]
 800501a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005026:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800502a:	b29b      	uxth	r3, r3
 800502c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005044:	833b      	strh	r3, [r7, #24]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	441a      	add	r2, r3
 8005050:	8b3b      	ldrh	r3, [r7, #24]
 8005052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005062:	b29b      	uxth	r3, r3
 8005064:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507c:	82fb      	strh	r3, [r7, #22]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	441a      	add	r2, r3
 8005088:	8afb      	ldrh	r3, [r7, #22]
 800508a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509a:	b29b      	uxth	r3, r3
 800509c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b4:	82bb      	strh	r3, [r7, #20]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	8abb      	ldrh	r3, [r7, #20]
 80050c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	8013      	strh	r3, [r2, #0]
 80050d6:	e0a3      	b.n	8005220 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01b      	beq.n	8005128 <USB_DeactivateEndpoint+0x2d4>
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005136:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <USB_DeactivateEndpoint+0x324>
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005156:	853b      	strh	r3, [r7, #40]	; 0x28
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	441a      	add	r2, r3
 8005162:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005170:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005174:	b29b      	uxth	r3, r3
 8005176:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	b29b      	uxth	r3, r3
 8005186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	441a      	add	r2, r3
 800519a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800519c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	441a      	add	r2, r3
 80051d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	441a      	add	r2, r3
 800520a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800520c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521c:	b29b      	uxth	r3, r3
 800521e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3734      	adds	r7, #52	; 0x34
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b0cc      	sub	sp, #304	; 0x130
 8005230:	af00      	add	r7, sp, #0
 8005232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005236:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800523a:	6018      	str	r0, [r3, #0]
 800523c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005244:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	2b01      	cmp	r3, #1
 8005254:	f041 817d 	bne.w	8006552 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699a      	ldr	r2, [r3, #24]
 8005264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	429a      	cmp	r2, r3
 8005272:	d908      	bls.n	8005286 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005284:	e007      	b.n	8005296 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	7b1b      	ldrb	r3, [r3, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d152      	bne.n	800534c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80052a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6959      	ldr	r1, [r3, #20]
 80052b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	88da      	ldrh	r2, [r3, #6]
 80052be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80052c8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80052cc:	6800      	ldr	r0, [r0, #0]
 80052ce:	f001 ff23 	bl	8007118 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80052da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052de:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80052e2:	6812      	ldr	r2, [r2, #0]
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	4619      	mov	r1, r3
 80052f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005300:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005304:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	440a      	add	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	011a      	lsls	r2, r3, #4
 800531c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005320:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4413      	add	r3, r2
 8005328:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800532c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005330:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533a:	b29a      	uxth	r2, r3
 800533c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005340:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	f001 b8b5 	b.w	80064b6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800534c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	78db      	ldrb	r3, [r3, #3]
 8005358:	2b02      	cmp	r3, #2
 800535a:	f040 84c6 	bne.w	8005cea <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800535e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6a1a      	ldr	r2, [r3, #32]
 800536a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	429a      	cmp	r2, r3
 8005378:	f240 8443 	bls.w	8005c02 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800537c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005380:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80053a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	441a      	add	r2, r3
 80053c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80053c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80053d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80053d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6a1a      	ldr	r2, [r3, #32]
 80053e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e8:	1ad2      	subs	r2, r2, r3
 80053ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80053f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29b      	uxth	r3, r3
 8005414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 823e 	beq.w	800589a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800541e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005422:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005426:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800542a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	785b      	ldrb	r3, [r3, #1]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f040 809a 	bne.w	8005578 <USB_EPStartXfer+0x34c>
 8005444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800544c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005450:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005466:	b29b      	uxth	r3, r3
 8005468:	4619      	mov	r1, r3
 800546a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005472:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005476:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	440a      	add	r2, r1
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	011a      	lsls	r2, r3, #4
 800548e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4413      	add	r3, r2
 800549a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800549e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d122      	bne.n	80054f6 <USB_EPStartXfer+0x2ca>
 80054b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	801a      	strh	r2, [r3, #0]
 80054d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	e079      	b.n	80055ea <USB_EPStartXfer+0x3be>
 80054f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fa:	2b3e      	cmp	r3, #62	; 0x3e
 80054fc:	d81b      	bhi.n	8005536 <USB_EPStartXfer+0x30a>
 80054fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d004      	beq.n	800551e <USB_EPStartXfer+0x2f2>
 8005514:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005518:	3301      	adds	r3, #1
 800551a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800551e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005522:	b29b      	uxth	r3, r3
 8005524:	029b      	lsls	r3, r3, #10
 8005526:	b29a      	uxth	r2, r3
 8005528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	801a      	strh	r2, [r3, #0]
 8005534:	e059      	b.n	80055ea <USB_EPStartXfer+0x3be>
 8005536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005544:	f003 031f 	and.w	r3, r3, #31
 8005548:	2b00      	cmp	r3, #0
 800554a:	d104      	bne.n	8005556 <USB_EPStartXfer+0x32a>
 800554c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005550:	3b01      	subs	r3, #1
 8005552:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005556:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800555a:	b29b      	uxth	r3, r3
 800555c:	029b      	lsls	r3, r3, #10
 800555e:	b29b      	uxth	r3, r3
 8005560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005568:	b29a      	uxth	r2, r3
 800556a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	801a      	strh	r2, [r3, #0]
 8005576:	e038      	b.n	80055ea <USB_EPStartXfer+0x3be>
 8005578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d130      	bne.n	80055ea <USB_EPStartXfer+0x3be>
 8005588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005596:	b29b      	uxth	r3, r3
 8005598:	4619      	mov	r1, r3
 800559a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80055a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055a6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	440a      	add	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	011a      	lsls	r2, r3, #4
 80055be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4413      	add	r3, r2
 80055ca:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80055ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055dc:	b29a      	uxth	r2, r3
 80055de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	895b      	ldrh	r3, [r3, #10]
 80055f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6959      	ldr	r1, [r3, #20]
 8005606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560a:	b29b      	uxth	r3, r3
 800560c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005610:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005614:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005618:	6800      	ldr	r0, [r0, #0]
 800561a:	f001 fd7d 	bl	8007118 <USB_WritePMA>
            ep->xfer_buff += len;
 800561e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800562e:	441a      	add	r2, r3
 8005630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800563c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6a1a      	ldr	r2, [r3, #32]
 8005648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	429a      	cmp	r2, r3
 8005656:	d90f      	bls.n	8005678 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6a1a      	ldr	r2, [r3, #32]
 8005664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005668:	1ad2      	subs	r2, r2, r3
 800566a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	621a      	str	r2, [r3, #32]
 8005676:	e00e      	b.n	8005696 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2200      	movs	r2, #0
 8005694:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 809a 	bne.w	80057dc <USB_EPStartXfer+0x5b0>
 80056a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80056b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056b4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	4619      	mov	r1, r3
 80056ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80056d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056da:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	440a      	add	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	011a      	lsls	r2, r3, #4
 80056f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4413      	add	r3, r2
 80056fe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005706:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d122      	bne.n	800575a <USB_EPStartXfer+0x52e>
 8005714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005718:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005726:	b29a      	uxth	r2, r3
 8005728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	801a      	strh	r2, [r3, #0]
 8005734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005738:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800574a:	b29a      	uxth	r2, r3
 800574c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005750:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	801a      	strh	r2, [r3, #0]
 8005758:	e083      	b.n	8005862 <USB_EPStartXfer+0x636>
 800575a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575e:	2b3e      	cmp	r3, #62	; 0x3e
 8005760:	d81b      	bhi.n	800579a <USB_EPStartXfer+0x56e>
 8005762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005766:	085b      	lsrs	r3, r3, #1
 8005768:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800576c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d004      	beq.n	8005782 <USB_EPStartXfer+0x556>
 8005778:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800577c:	3301      	adds	r3, #1
 800577e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005782:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005786:	b29b      	uxth	r3, r3
 8005788:	029b      	lsls	r3, r3, #10
 800578a:	b29a      	uxth	r2, r3
 800578c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005790:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	e063      	b.n	8005862 <USB_EPStartXfer+0x636>
 800579a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80057a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <USB_EPStartXfer+0x58e>
 80057b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80057b4:	3b01      	subs	r3, #1
 80057b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80057ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80057be:	b29b      	uxth	r3, r3
 80057c0:	029b      	lsls	r3, r3, #10
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	801a      	strh	r2, [r3, #0]
 80057da:	e042      	b.n	8005862 <USB_EPStartXfer+0x636>
 80057dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d13a      	bne.n	8005862 <USB_EPStartXfer+0x636>
 80057ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057f8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580e:	b29b      	uxth	r3, r3
 8005810:	4619      	mov	r1, r3
 8005812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005816:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800581a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800581e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	440a      	add	r2, r1
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	011a      	lsls	r2, r3, #4
 8005836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4413      	add	r3, r2
 8005842:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005854:	b29a      	uxth	r2, r3
 8005856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	891b      	ldrh	r3, [r3, #8]
 800586e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6959      	ldr	r1, [r3, #20]
 800587e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005882:	b29b      	uxth	r3, r3
 8005884:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005888:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800588c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005890:	6800      	ldr	r0, [r0, #0]
 8005892:	f001 fc41 	bl	8007118 <USB_WritePMA>
 8005896:	f000 be0e 	b.w	80064b6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d16d      	bne.n	8005986 <USB_EPStartXfer+0x75a>
 80058aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ca:	4413      	add	r3, r2
 80058cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	011a      	lsls	r2, r3, #4
 80058dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058de:	4413      	add	r3, r2
 80058e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058e4:	647b      	str	r3, [r7, #68]	; 0x44
 80058e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d112      	bne.n	8005914 <USB_EPStartXfer+0x6e8>
 80058ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058fc:	801a      	strh	r2, [r3, #0]
 80058fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590c:	b29a      	uxth	r2, r3
 800590e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	e063      	b.n	80059dc <USB_EPStartXfer+0x7b0>
 8005914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005918:	2b3e      	cmp	r3, #62	; 0x3e
 800591a:	d817      	bhi.n	800594c <USB_EPStartXfer+0x720>
 800591c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005920:	085b      	lsrs	r3, r3, #1
 8005922:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d004      	beq.n	800593c <USB_EPStartXfer+0x710>
 8005932:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005936:	3301      	adds	r3, #1
 8005938:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800593c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005940:	b29b      	uxth	r3, r3
 8005942:	029b      	lsls	r3, r3, #10
 8005944:	b29a      	uxth	r2, r3
 8005946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	e047      	b.n	80059dc <USB_EPStartXfer+0x7b0>
 800594c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <USB_EPStartXfer+0x740>
 8005962:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005966:	3b01      	subs	r3, #1
 8005968:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800596c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005970:	b29b      	uxth	r3, r3
 8005972:	029b      	lsls	r3, r3, #10
 8005974:	b29b      	uxth	r3, r3
 8005976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597e:	b29a      	uxth	r2, r3
 8005980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	e02a      	b.n	80059dc <USB_EPStartXfer+0x7b0>
 8005986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d122      	bne.n	80059dc <USB_EPStartXfer+0x7b0>
 8005996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	653b      	str	r3, [r7, #80]	; 0x50
 80059a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	461a      	mov	r2, r3
 80059b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b6:	4413      	add	r3, r2
 80059b8:	653b      	str	r3, [r7, #80]	; 0x50
 80059ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	011a      	lsls	r2, r3, #4
 80059c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ca:	4413      	add	r3, r2
 80059cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	891b      	ldrh	r3, [r3, #8]
 80059e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6959      	ldr	r1, [r3, #20]
 80059f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a02:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a06:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	f001 fb84 	bl	8007118 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a20:	441a      	add	r2, r3
 8005a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6a1a      	ldr	r2, [r3, #32]
 8005a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d90f      	bls.n	8005a6a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6a1a      	ldr	r2, [r3, #32]
 8005a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a5a:	1ad2      	subs	r2, r2, r3
 8005a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	621a      	str	r2, [r3, #32]
 8005a68:	e00e      	b.n	8005a88 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2200      	movs	r2, #0
 8005a86:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	643b      	str	r3, [r7, #64]	; 0x40
 8005a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	785b      	ldrb	r3, [r3, #1]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d16d      	bne.n	8005b80 <USB_EPStartXfer+0x954>
 8005aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	4413      	add	r3, r2
 8005ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	011a      	lsls	r2, r3, #4
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	4413      	add	r3, r2
 8005ada:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d112      	bne.n	8005b0e <USB_EPStartXfer+0x8e2>
 8005ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af6:	801a      	strh	r2, [r3, #0]
 8005af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	e05d      	b.n	8005bca <USB_EPStartXfer+0x99e>
 8005b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b12:	2b3e      	cmp	r3, #62	; 0x3e
 8005b14:	d817      	bhi.n	8005b46 <USB_EPStartXfer+0x91a>
 8005b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d004      	beq.n	8005b36 <USB_EPStartXfer+0x90a>
 8005b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b30:	3301      	adds	r3, #1
 8005b32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	029b      	lsls	r3, r3, #10
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	e041      	b.n	8005bca <USB_EPStartXfer+0x99e>
 8005b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b54:	f003 031f 	and.w	r3, r3, #31
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d104      	bne.n	8005b66 <USB_EPStartXfer+0x93a>
 8005b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b60:	3b01      	subs	r3, #1
 8005b62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	029b      	lsls	r3, r3, #10
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	e024      	b.n	8005bca <USB_EPStartXfer+0x99e>
 8005b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d11c      	bne.n	8005bca <USB_EPStartXfer+0x99e>
 8005b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba4:	4413      	add	r3, r2
 8005ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	011a      	lsls	r2, r3, #4
 8005bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb8:	4413      	add	r3, r2
 8005bba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	895b      	ldrh	r3, [r3, #10]
 8005bd6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6959      	ldr	r1, [r3, #20]
 8005be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bf0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005bf4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005bf8:	6800      	ldr	r0, [r0, #0]
 8005bfa:	f001 fa8d 	bl	8007118 <USB_WritePMA>
 8005bfe:	f000 bc5a 	b.w	80064b6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c38:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c8e:	4413      	add	r3, r2
 8005c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	011a      	lsls	r2, r3, #4
 8005ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ca8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	891b      	ldrh	r3, [r3, #8]
 8005cc0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6959      	ldr	r1, [r3, #20]
 8005cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cda:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cde:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ce2:	6800      	ldr	r0, [r0, #0]
 8005ce4:	f001 fa18 	bl	8007118 <USB_WritePMA>
 8005ce8:	e3e5      	b.n	80064b6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d10:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6a1a      	ldr	r2, [r3, #32]
 8005d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d56:	1ad2      	subs	r2, r2, r3
 8005d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 81bc 	beq.w	8006104 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d16d      	bne.n	8005e86 <USB_EPStartXfer+0xc5a>
 8005daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dca:	4413      	add	r3, r2
 8005dcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	011a      	lsls	r2, r3, #4
 8005ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dde:	4413      	add	r3, r2
 8005de0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005de4:	677b      	str	r3, [r7, #116]	; 0x74
 8005de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d112      	bne.n	8005e14 <USB_EPStartXfer+0xbe8>
 8005dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e060      	b.n	8005ed6 <USB_EPStartXfer+0xcaa>
 8005e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e18:	2b3e      	cmp	r3, #62	; 0x3e
 8005e1a:	d817      	bhi.n	8005e4c <USB_EPStartXfer+0xc20>
 8005e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <USB_EPStartXfer+0xc10>
 8005e32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e36:	3301      	adds	r3, #1
 8005e38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	029b      	lsls	r3, r3, #10
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e48:	801a      	strh	r2, [r3, #0]
 8005e4a:	e044      	b.n	8005ed6 <USB_EPStartXfer+0xcaa>
 8005e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5a:	f003 031f 	and.w	r3, r3, #31
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d104      	bne.n	8005e6c <USB_EPStartXfer+0xc40>
 8005e62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e66:	3b01      	subs	r3, #1
 8005e68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	029b      	lsls	r3, r3, #10
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e82:	801a      	strh	r2, [r3, #0]
 8005e84:	e027      	b.n	8005ed6 <USB_EPStartXfer+0xcaa>
 8005e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d11f      	bne.n	8005ed6 <USB_EPStartXfer+0xcaa>
 8005e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005eac:	4413      	add	r3, r2
 8005eae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	011a      	lsls	r2, r3, #4
 8005ec0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ed4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	895b      	ldrh	r3, [r3, #10]
 8005ee2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6959      	ldr	r1, [r3, #20]
 8005ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005efc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f00:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f04:	6800      	ldr	r0, [r0, #0]
 8005f06:	f001 f907 	bl	8007118 <USB_WritePMA>
          ep->xfer_buff += len;
 8005f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1a:	441a      	add	r2, r3
 8005f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6a1a      	ldr	r2, [r3, #32]
 8005f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d90f      	bls.n	8005f64 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6a1a      	ldr	r2, [r3, #32]
 8005f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f54:	1ad2      	subs	r2, r2, r3
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	621a      	str	r2, [r3, #32]
 8005f62:	e00e      	b.n	8005f82 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8295 	beq.w	80064b6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d16d      	bne.n	8006078 <USB_EPStartXfer+0xe4c>
 8005f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fbc:	4413      	add	r3, r2
 8005fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	011a      	lsls	r2, r3, #4
 8005fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fd6:	667b      	str	r3, [r7, #100]	; 0x64
 8005fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d112      	bne.n	8006006 <USB_EPStartXfer+0xdda>
 8005fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	e063      	b.n	80060ce <USB_EPStartXfer+0xea2>
 8006006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600a:	2b3e      	cmp	r3, #62	; 0x3e
 800600c:	d817      	bhi.n	800603e <USB_EPStartXfer+0xe12>
 800600e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <USB_EPStartXfer+0xe02>
 8006024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006028:	3301      	adds	r3, #1
 800602a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006032:	b29b      	uxth	r3, r3
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	b29a      	uxth	r2, r3
 8006038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	e047      	b.n	80060ce <USB_EPStartXfer+0xea2>
 800603e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	2b00      	cmp	r3, #0
 8006052:	d104      	bne.n	800605e <USB_EPStartXfer+0xe32>
 8006054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006058:	3b01      	subs	r3, #1
 800605a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006062:	b29b      	uxth	r3, r3
 8006064:	029b      	lsls	r3, r3, #10
 8006066:	b29b      	uxth	r3, r3
 8006068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006070:	b29a      	uxth	r2, r3
 8006072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	e02a      	b.n	80060ce <USB_EPStartXfer+0xea2>
 8006078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d122      	bne.n	80060ce <USB_EPStartXfer+0xea2>
 8006088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	673b      	str	r3, [r7, #112]	; 0x70
 8006094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006098:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	461a      	mov	r2, r3
 80060a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060a8:	4413      	add	r3, r2
 80060aa:	673b      	str	r3, [r7, #112]	; 0x70
 80060ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	011a      	lsls	r2, r3, #4
 80060ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060bc:	4413      	add	r3, r2
 80060be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	891b      	ldrh	r3, [r3, #8]
 80060da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6959      	ldr	r1, [r3, #20]
 80060ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80060f8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80060fc:	6800      	ldr	r0, [r0, #0]
 80060fe:	f001 f80b 	bl	8007118 <USB_WritePMA>
 8006102:	e1d8      	b.n	80064b6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d178      	bne.n	8006206 <USB_EPStartXfer+0xfda>
 8006114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006118:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006126:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006130:	b29b      	uxth	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006138:	4413      	add	r3, r2
 800613a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800613e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	011a      	lsls	r2, r3, #4
 800614c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006150:	4413      	add	r3, r2
 8006152:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006156:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800615a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d116      	bne.n	8006190 <USB_EPStartXfer+0xf64>
 8006162:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800616e:	b29a      	uxth	r2, r3
 8006170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006186:	b29a      	uxth	r2, r3
 8006188:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	e06b      	b.n	8006268 <USB_EPStartXfer+0x103c>
 8006190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006194:	2b3e      	cmp	r3, #62	; 0x3e
 8006196:	d818      	bhi.n	80061ca <USB_EPStartXfer+0xf9e>
 8006198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619c:	085b      	lsrs	r3, r3, #1
 800619e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d004      	beq.n	80061b8 <USB_EPStartXfer+0xf8c>
 80061ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061b2:	3301      	adds	r3, #1
 80061b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061bc:	b29b      	uxth	r3, r3
 80061be:	029b      	lsls	r3, r3, #10
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	e04e      	b.n	8006268 <USB_EPStartXfer+0x103c>
 80061ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <USB_EPStartXfer+0xfbe>
 80061e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061e4:	3b01      	subs	r3, #1
 80061e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	029b      	lsls	r3, r3, #10
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	e030      	b.n	8006268 <USB_EPStartXfer+0x103c>
 8006206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d128      	bne.n	8006268 <USB_EPStartXfer+0x103c>
 8006216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006228:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006232:	b29b      	uxth	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800623a:	4413      	add	r3, r2
 800623c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	011a      	lsls	r2, r3, #4
 800624e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006252:	4413      	add	r3, r2
 8006254:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006258:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800625c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006260:	b29a      	uxth	r2, r3
 8006262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006266:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	891b      	ldrh	r3, [r3, #8]
 8006274:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6959      	ldr	r1, [r3, #20]
 8006284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006288:	b29b      	uxth	r3, r3
 800628a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800628e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006292:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006296:	6800      	ldr	r0, [r0, #0]
 8006298:	f000 ff3e 	bl	8007118 <USB_WritePMA>
          ep->xfer_buff += len;
 800629c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695a      	ldr	r2, [r3, #20]
 80062a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ac:	441a      	add	r2, r3
 80062ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80062ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6a1a      	ldr	r2, [r3, #32]
 80062c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d90f      	bls.n	80062f6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80062d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6a1a      	ldr	r2, [r3, #32]
 80062e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e6:	1ad2      	subs	r2, r2, r3
 80062e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	621a      	str	r2, [r3, #32]
 80062f4:	e00e      	b.n	8006314 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2200      	movs	r2, #0
 8006312:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 80cc 	beq.w	80064b6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800631e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006322:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800632c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d178      	bne.n	800642e <USB_EPStartXfer+0x1202>
 800633c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006340:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800634a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006358:	b29b      	uxth	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006360:	4413      	add	r3, r2
 8006362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	011a      	lsls	r2, r3, #4
 8006374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006378:	4413      	add	r3, r2
 800637a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800637e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d116      	bne.n	80063b8 <USB_EPStartXfer+0x118c>
 800638a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006396:	b29a      	uxth	r2, r3
 8006398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800639c:	801a      	strh	r2, [r3, #0]
 800639e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063b4:	801a      	strh	r2, [r3, #0]
 80063b6:	e064      	b.n	8006482 <USB_EPStartXfer+0x1256>
 80063b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063bc:	2b3e      	cmp	r3, #62	; 0x3e
 80063be:	d818      	bhi.n	80063f2 <USB_EPStartXfer+0x11c6>
 80063c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c4:	085b      	lsrs	r3, r3, #1
 80063c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <USB_EPStartXfer+0x11b4>
 80063d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063da:	3301      	adds	r3, #1
 80063dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	029b      	lsls	r3, r3, #10
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063ee:	801a      	strh	r2, [r3, #0]
 80063f0:	e047      	b.n	8006482 <USB_EPStartXfer+0x1256>
 80063f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <USB_EPStartXfer+0x11e6>
 8006408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800640c:	3b01      	subs	r3, #1
 800640e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006416:	b29b      	uxth	r3, r3
 8006418:	029b      	lsls	r3, r3, #10
 800641a:	b29b      	uxth	r3, r3
 800641c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	e029      	b.n	8006482 <USB_EPStartXfer+0x1256>
 800642e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	785b      	ldrb	r3, [r3, #1]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d121      	bne.n	8006482 <USB_EPStartXfer+0x1256>
 800643e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644c:	b29b      	uxth	r3, r3
 800644e:	461a      	mov	r2, r3
 8006450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006454:	4413      	add	r3, r2
 8006456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800645a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	011a      	lsls	r2, r3, #4
 8006468:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800646c:	4413      	add	r3, r2
 800646e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800647a:	b29a      	uxth	r2, r3
 800647c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006480:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	895b      	ldrh	r3, [r3, #10]
 800648e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6959      	ldr	r1, [r3, #20]
 800649e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064b0:	6800      	ldr	r0, [r0, #0]
 80064b2:	f000 fe31 	bl	8007118 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80064b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064d8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80064dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e4:	8013      	strh	r3, [r2, #0]
 80064e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ea:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80064ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064f2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80064f6:	8812      	ldrh	r2, [r2, #0]
 80064f8:	f082 0210 	eor.w	r2, r2, #16
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006502:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006506:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800650a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800650e:	8812      	ldrh	r2, [r2, #0]
 8006510:	f082 0220 	eor.w	r2, r2, #32
 8006514:	801a      	strh	r2, [r3, #0]
 8006516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	441a      	add	r2, r3
 8006530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006534:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800653e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800654a:	b29b      	uxth	r3, r3
 800654c:	8013      	strh	r3, [r2, #0]
 800654e:	f000 bc9f 	b.w	8006e90 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	7b1b      	ldrb	r3, [r3, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f040 80ae 	bne.w	80066c0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699a      	ldr	r2, [r3, #24]
 8006570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	429a      	cmp	r2, r3
 800657e:	d917      	bls.n	80065b0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699a      	ldr	r2, [r3, #24]
 800659c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a0:	1ad2      	subs	r2, r2, r3
 80065a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	619a      	str	r2, [r3, #24]
 80065ae:	e00e      	b.n	80065ce <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80065b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80065c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2200      	movs	r2, #0
 80065cc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80065ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065f2:	4413      	add	r3, r2
 80065f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	011a      	lsls	r2, r3, #4
 8006606:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800660a:	4413      	add	r3, r2
 800660c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d116      	bne.n	800664a <USB_EPStartXfer+0x141e>
 800661c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006628:	b29a      	uxth	r2, r3
 800662a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800663c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006640:	b29a      	uxth	r2, r3
 8006642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006646:	801a      	strh	r2, [r3, #0]
 8006648:	e3e8      	b.n	8006e1c <USB_EPStartXfer+0x1bf0>
 800664a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800664e:	2b3e      	cmp	r3, #62	; 0x3e
 8006650:	d818      	bhi.n	8006684 <USB_EPStartXfer+0x1458>
 8006652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800665c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <USB_EPStartXfer+0x1446>
 8006668:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800666c:	3301      	adds	r3, #1
 800666e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006672:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006676:	b29b      	uxth	r3, r3
 8006678:	029b      	lsls	r3, r3, #10
 800667a:	b29a      	uxth	r2, r3
 800667c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	e3cb      	b.n	8006e1c <USB_EPStartXfer+0x1bf0>
 8006684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800668e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006692:	f003 031f 	and.w	r3, r3, #31
 8006696:	2b00      	cmp	r3, #0
 8006698:	d104      	bne.n	80066a4 <USB_EPStartXfer+0x1478>
 800669a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800669e:	3b01      	subs	r3, #1
 80066a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80066a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	029b      	lsls	r3, r3, #10
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066bc:	801a      	strh	r2, [r3, #0]
 80066be:	e3ad      	b.n	8006e1c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80066c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	78db      	ldrb	r3, [r3, #3]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	f040 8200 	bne.w	8006ad2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80066d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f040 8091 	bne.w	8006806 <USB_EPStartXfer+0x15da>
 80066e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006700:	b29b      	uxth	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006708:	4413      	add	r3, r2
 800670a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800670e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	011a      	lsls	r2, r3, #4
 800671c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006720:	4413      	add	r3, r2
 8006722:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006726:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800672a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d116      	bne.n	8006768 <USB_EPStartXfer+0x153c>
 800673a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006746:	b29a      	uxth	r2, r3
 8006748:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800675a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675e:	b29a      	uxth	r2, r3
 8006760:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	e083      	b.n	8006870 <USB_EPStartXfer+0x1644>
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b3e      	cmp	r3, #62	; 0x3e
 8006776:	d820      	bhi.n	80067ba <USB_EPStartXfer+0x158e>
 8006778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800678a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <USB_EPStartXfer+0x157c>
 800679e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a2:	3301      	adds	r3, #1
 80067a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	029b      	lsls	r3, r3, #10
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067b6:	801a      	strh	r2, [r3, #0]
 80067b8:	e05a      	b.n	8006870 <USB_EPStartXfer+0x1644>
 80067ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	095b      	lsrs	r3, r3, #5
 80067c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <USB_EPStartXfer+0x15be>
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e4:	3b01      	subs	r3, #1
 80067e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	029b      	lsls	r3, r3, #10
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	e034      	b.n	8006870 <USB_EPStartXfer+0x1644>
 8006806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	785b      	ldrb	r3, [r3, #1]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d12c      	bne.n	8006870 <USB_EPStartXfer+0x1644>
 8006816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006828:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006832:	b29b      	uxth	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800683a:	4413      	add	r3, r2
 800683c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	011a      	lsls	r2, r3, #4
 800684e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006852:	4413      	add	r3, r2
 8006854:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800685c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	b29a      	uxth	r2, r3
 800686a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800686e:	801a      	strh	r2, [r3, #0]
 8006870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800687e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	785b      	ldrb	r3, [r3, #1]
 800688a:	2b00      	cmp	r3, #0
 800688c:	f040 8091 	bne.w	80069b2 <USB_EPStartXfer+0x1786>
 8006890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800689e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068b4:	4413      	add	r3, r2
 80068b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80068ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	011a      	lsls	r2, r3, #4
 80068c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068cc:	4413      	add	r3, r2
 80068ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d116      	bne.n	8006914 <USB_EPStartXfer+0x16e8>
 80068e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068f8:	801a      	strh	r2, [r3, #0]
 80068fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800690a:	b29a      	uxth	r2, r3
 800690c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006910:	801a      	strh	r2, [r3, #0]
 8006912:	e07c      	b.n	8006a0e <USB_EPStartXfer+0x17e2>
 8006914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	2b3e      	cmp	r3, #62	; 0x3e
 8006922:	d820      	bhi.n	8006966 <USB_EPStartXfer+0x173a>
 8006924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d004      	beq.n	8006954 <USB_EPStartXfer+0x1728>
 800694a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800694e:	3301      	adds	r3, #1
 8006950:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006954:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006958:	b29b      	uxth	r3, r3
 800695a:	029b      	lsls	r3, r3, #10
 800695c:	b29a      	uxth	r2, r3
 800695e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	e053      	b.n	8006a0e <USB_EPStartXfer+0x17e2>
 8006966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <USB_EPStartXfer+0x176a>
 800698c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006990:	3b01      	subs	r3, #1
 8006992:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006996:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800699a:	b29b      	uxth	r3, r3
 800699c:	029b      	lsls	r3, r3, #10
 800699e:	b29b      	uxth	r3, r3
 80069a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069ae:	801a      	strh	r2, [r3, #0]
 80069b0:	e02d      	b.n	8006a0e <USB_EPStartXfer+0x17e2>
 80069b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d125      	bne.n	8006a0e <USB_EPStartXfer+0x17e2>
 80069c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	461a      	mov	r2, r3
 80069d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80069d8:	4413      	add	r3, r2
 80069da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	011a      	lsls	r2, r3, #4
 80069ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80069f0:	4413      	add	r3, r2
 80069f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a0c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 81fe 	beq.w	8006e1c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a40:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <USB_EPStartXfer+0x182c>
 8006a4c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10d      	bne.n	8006a74 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a58:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f040 81db 	bne.w	8006e1c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006a66:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f040 81d4 	bne.w	8006e1c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	441a      	add	r2, r3
 8006ab8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	8013      	strh	r3, [r2, #0]
 8006ad0:	e1a4      	b.n	8006e1c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	78db      	ldrb	r3, [r3, #3]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	f040 819a 	bne.w	8006e18 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	699a      	ldr	r2, [r3, #24]
 8006af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d917      	bls.n	8006b30 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699a      	ldr	r2, [r3, #24]
 8006b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b20:	1ad2      	subs	r2, r2, r3
 8006b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	619a      	str	r2, [r3, #24]
 8006b2e:	e00e      	b.n	8006b4e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d178      	bne.n	8006c50 <USB_EPStartXfer+0x1a24>
 8006b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b82:	4413      	add	r3, r2
 8006b84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	011a      	lsls	r2, r3, #4
 8006b96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ba0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d116      	bne.n	8006bda <USB_EPStartXfer+0x19ae>
 8006bac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bbe:	801a      	strh	r2, [r3, #0]
 8006bc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	e06b      	b.n	8006cb2 <USB_EPStartXfer+0x1a86>
 8006bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bde:	2b3e      	cmp	r3, #62	; 0x3e
 8006be0:	d818      	bhi.n	8006c14 <USB_EPStartXfer+0x19e8>
 8006be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d004      	beq.n	8006c02 <USB_EPStartXfer+0x19d6>
 8006bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	029b      	lsls	r3, r3, #10
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e04e      	b.n	8006cb2 <USB_EPStartXfer+0x1a86>
 8006c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c18:	095b      	lsrs	r3, r3, #5
 8006c1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c22:	f003 031f 	and.w	r3, r3, #31
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <USB_EPStartXfer+0x1a08>
 8006c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	029b      	lsls	r3, r3, #10
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c4c:	801a      	strh	r2, [r3, #0]
 8006c4e:	e030      	b.n	8006cb2 <USB_EPStartXfer+0x1a86>
 8006c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d128      	bne.n	8006cb2 <USB_EPStartXfer+0x1a86>
 8006c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	4413      	add	r3, r2
 8006c86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	011a      	lsls	r2, r3, #4
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ca2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cb0:	801a      	strh	r2, [r3, #0]
 8006cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d178      	bne.n	8006dc2 <USB_EPStartXfer+0x1b96>
 8006cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	011a      	lsls	r2, r3, #4
 8006d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d116      	bne.n	8006d4c <USB_EPStartXfer+0x1b20>
 8006d1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d30:	801a      	strh	r2, [r3, #0]
 8006d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d48:	801a      	strh	r2, [r3, #0]
 8006d4a:	e067      	b.n	8006e1c <USB_EPStartXfer+0x1bf0>
 8006d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d50:	2b3e      	cmp	r3, #62	; 0x3e
 8006d52:	d818      	bhi.n	8006d86 <USB_EPStartXfer+0x1b5a>
 8006d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d58:	085b      	lsrs	r3, r3, #1
 8006d5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <USB_EPStartXfer+0x1b48>
 8006d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d6e:	3301      	adds	r3, #1
 8006d70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	029b      	lsls	r3, r3, #10
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	e04a      	b.n	8006e1c <USB_EPStartXfer+0x1bf0>
 8006d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d104      	bne.n	8006da6 <USB_EPStartXfer+0x1b7a>
 8006d9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006da0:	3b01      	subs	r3, #1
 8006da2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	029b      	lsls	r3, r3, #10
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e02c      	b.n	8006e1c <USB_EPStartXfer+0x1bf0>
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d124      	bne.n	8006e1c <USB_EPStartXfer+0x1bf0>
 8006dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de8:	4413      	add	r3, r2
 8006dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	011a      	lsls	r2, r3, #4
 8006dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e00:	4413      	add	r3, r2
 8006e02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e14:	801a      	strh	r2, [r3, #0]
 8006e16:	e001      	b.n	8006e1c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e03a      	b.n	8006e92 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006e46:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006e4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006e52:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006e56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	441a      	add	r2, r3
 8006e78:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	785b      	ldrb	r3, [r3, #1]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d020      	beq.n	8006ef0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec4:	81bb      	strh	r3, [r7, #12]
 8006ec6:	89bb      	ldrh	r3, [r7, #12]
 8006ec8:	f083 0310 	eor.w	r3, r3, #16
 8006ecc:	81bb      	strh	r3, [r7, #12]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	441a      	add	r2, r3
 8006ed8:	89bb      	ldrh	r3, [r7, #12]
 8006eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	8013      	strh	r3, [r2, #0]
 8006eee:	e01f      	b.n	8006f30 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	81fb      	strh	r3, [r7, #14]
 8006f08:	89fb      	ldrh	r3, [r7, #14]
 8006f0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f0e:	81fb      	strh	r3, [r7, #14]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	441a      	add	r2, r3
 8006f1a:	89fb      	ldrh	r3, [r7, #14]
 8006f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr

08006f3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	7b1b      	ldrb	r3, [r3, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f040 809d 	bne.w	800708a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d04c      	beq.n	8006ff2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	823b      	strh	r3, [r7, #16]
 8006f66:	8a3b      	ldrh	r3, [r7, #16]
 8006f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01b      	beq.n	8006fa8 <USB_EPClearStall+0x6c>
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f86:	81fb      	strh	r3, [r7, #14]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	441a      	add	r2, r3
 8006f92:	89fb      	ldrh	r3, [r7, #14]
 8006f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	78db      	ldrb	r3, [r3, #3]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d06c      	beq.n	800708a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc6:	81bb      	strh	r3, [r7, #12]
 8006fc8:	89bb      	ldrh	r3, [r7, #12]
 8006fca:	f083 0320 	eor.w	r3, r3, #32
 8006fce:	81bb      	strh	r3, [r7, #12]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	441a      	add	r2, r3
 8006fda:	89bb      	ldrh	r3, [r7, #12]
 8006fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	8013      	strh	r3, [r2, #0]
 8006ff0:	e04b      	b.n	800708a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	82fb      	strh	r3, [r7, #22]
 8007000:	8afb      	ldrh	r3, [r7, #22]
 8007002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01b      	beq.n	8007042 <USB_EPClearStall+0x106>
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007020:	82bb      	strh	r3, [r7, #20]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	441a      	add	r2, r3
 800702c:	8abb      	ldrh	r3, [r7, #20]
 800702e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007036:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800703a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703e:	b29b      	uxth	r3, r3
 8007040:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007058:	827b      	strh	r3, [r7, #18]
 800705a:	8a7b      	ldrh	r3, [r7, #18]
 800705c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007060:	827b      	strh	r3, [r7, #18]
 8007062:	8a7b      	ldrh	r3, [r7, #18]
 8007064:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007068:	827b      	strh	r3, [r7, #18]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	441a      	add	r2, r3
 8007074:	8a7b      	ldrh	r3, [r7, #18]
 8007076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800707a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800707e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007086:	b29b      	uxth	r3, r3
 8007088:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	371c      	adds	r7, #28
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr

08007096 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80070a2:	78fb      	ldrb	r3, [r7, #3]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d103      	bne.n	80070b0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2280      	movs	r2, #128	; 0x80
 80070ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr

080070bc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bc80      	pop	{r7}
 80070ce:	4770      	bx	lr

080070d0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	bc80      	pop	{r7}
 80070e2:	4770      	bx	lr

080070e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80070f6:	68fb      	ldr	r3, [r7, #12]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bc80      	pop	{r7}
 8007100:	4770      	bx	lr

08007102 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007102:	b480      	push	{r7}
 8007104:	b083      	sub	sp, #12
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr

08007118 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007118:	b480      	push	{r7}
 800711a:	b08d      	sub	sp, #52	; 0x34
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	4611      	mov	r1, r2
 8007124:	461a      	mov	r2, r3
 8007126:	460b      	mov	r3, r1
 8007128:	80fb      	strh	r3, [r7, #6]
 800712a:	4613      	mov	r3, r2
 800712c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800712e:	88bb      	ldrh	r3, [r7, #4]
 8007130:	3301      	adds	r3, #1
 8007132:	085b      	lsrs	r3, r3, #1
 8007134:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800713e:	88fb      	ldrh	r3, [r7, #6]
 8007140:	005a      	lsls	r2, r3, #1
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800714a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007150:	e01e      	b.n	8007190 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	3301      	adds	r3, #1
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	021b      	lsls	r3, r3, #8
 8007166:	b29b      	uxth	r3, r3
 8007168:	461a      	mov	r2, r3
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	b29a      	uxth	r2, r3
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	3302      	adds	r3, #2
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	3302      	adds	r3, #2
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	3301      	adds	r3, #1
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	3b01      	subs	r3, #1
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1dd      	bne.n	8007152 <USB_WritePMA+0x3a>
  }
}
 8007196:	bf00      	nop
 8007198:	bf00      	nop
 800719a:	3734      	adds	r7, #52	; 0x34
 800719c:	46bd      	mov	sp, r7
 800719e:	bc80      	pop	{r7}
 80071a0:	4770      	bx	lr

080071a2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b08b      	sub	sp, #44	; 0x2c
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	4611      	mov	r1, r2
 80071ae:	461a      	mov	r2, r3
 80071b0:	460b      	mov	r3, r1
 80071b2:	80fb      	strh	r3, [r7, #6]
 80071b4:	4613      	mov	r3, r2
 80071b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80071b8:	88bb      	ldrh	r3, [r7, #4]
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	b29b      	uxth	r3, r3
 80071be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	005a      	lsls	r2, r3, #1
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071d4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
 80071da:	e01b      	b.n	8007214 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	3302      	adds	r3, #2
 80071e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	3301      	adds	r3, #1
 80071f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	0a1b      	lsrs	r3, r3, #8
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	3301      	adds	r3, #1
 8007206:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	3302      	adds	r3, #2
 800720c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	3b01      	subs	r3, #1
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e0      	bne.n	80071dc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800721a:	88bb      	ldrh	r3, [r7, #4]
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	b29b      	uxth	r3, r3
 800722c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	b2da      	uxtb	r2, r3
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	701a      	strb	r2, [r3, #0]
  }
}
 8007236:	bf00      	nop
 8007238:	372c      	adds	r7, #44	; 0x2c
 800723a:	46bd      	mov	sp, r7
 800723c:	bc80      	pop	{r7}
 800723e:	4770      	bx	lr

08007240 <USBD_HID_Init>:
 *         Initialize the HID interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
	/* Open EP IN */
	USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800724c:	2304      	movs	r3, #4
 800724e:	2203      	movs	r2, #3
 8007250:	2181      	movs	r1, #129	; 0x81
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 fc83 	bl	8008b5e <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	62da      	str	r2, [r3, #44]	; 0x2c

	pdev->pClassData = USBD_malloc (sizeof(USBD_HID_HandleTypeDef));
 800725e:	2010      	movs	r0, #16
 8007260:	f001 fd92 	bl	8008d88 <USBD_static_malloc>
 8007264:	4602      	mov	r2, r0
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

	if (pdev->pClassData == NULL) {
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <USBD_HID_Init+0x3a>
		return USBD_FAIL;
 8007276:	2302      	movs	r3, #2
 8007278:	e005      	b.n	8007286 <USBD_HID_Init+0x46>
	}

	((USBD_HID_HandleTypeDef*) pdev->pClassData)->state = HID_IDLE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007280:	2200      	movs	r2, #0
 8007282:	731a      	strb	r2, [r3, #12]

	return USBD_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_HID_DeInit>:
 *         DeInitialize the HID layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]
	/* Close HID EPs */
	USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800729a:	2181      	movs	r1, #129	; 0x81
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 fc84 	bl	8008baa <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	62da      	str	r2, [r3, #44]	; 0x2c

	/* FRee allocated memory */
	if (pdev->pClassData != NULL) {
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d009      	beq.n	80072c6 <USBD_HID_DeInit+0x38>
		USBD_free(pdev->pClassData);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 fd71 	bl	8008da0 <USBD_static_free>
		pdev->pClassData = NULL;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	}

	return USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req) {
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e0:	613b      	str	r3, [r7, #16]
	uint16_t len = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	83fb      	strh	r3, [r7, #30]
	uint8_t *pbuf = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	61bb      	str	r3, [r7, #24]
	uint16_t status_info = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	81fb      	strh	r3, [r7, #14]
	USBD_StatusTypeDef ret = USBD_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	75fb      	strb	r3, [r7, #23]

	switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d045      	beq.n	800738a <USBD_HID_Setup+0xba>
 80072fe:	2b20      	cmp	r3, #32
 8007300:	f040 80d3 	bne.w	80074aa <USBD_HID_Setup+0x1da>
	case USB_REQ_TYPE_CLASS:
		switch (req->bRequest) {
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	785b      	ldrb	r3, [r3, #1]
 8007308:	3b02      	subs	r3, #2
 800730a:	2b09      	cmp	r3, #9
 800730c:	d835      	bhi.n	800737a <USBD_HID_Setup+0xaa>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <USBD_HID_Setup+0x44>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	0800736b 	.word	0x0800736b
 8007318:	0800734b 	.word	0x0800734b
 800731c:	0800737b 	.word	0x0800737b
 8007320:	0800737b 	.word	0x0800737b
 8007324:	0800737b 	.word	0x0800737b
 8007328:	0800737b 	.word	0x0800737b
 800732c:	0800737b 	.word	0x0800737b
 8007330:	0800737b 	.word	0x0800737b
 8007334:	08007359 	.word	0x08007359
 8007338:	0800733d 	.word	0x0800733d
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t) (req->wValue);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	885b      	ldrh	r3, [r3, #2]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	461a      	mov	r2, r3
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	601a      	str	r2, [r3, #0]
			break;
 8007348:	e01e      	b.n	8007388 <USBD_HID_Setup+0xb8>

		case HID_REQ_GET_PROTOCOL:
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->Protocol, 1U);
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2201      	movs	r2, #1
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 f944 	bl	80085de <USBD_CtlSendData>
			break;
 8007356:	e017      	b.n	8007388 <USBD_HID_Setup+0xb8>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t) (req->wValue >> 8);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	885b      	ldrh	r3, [r3, #2]
 800735c:	0a1b      	lsrs	r3, r3, #8
 800735e:	b29b      	uxth	r3, r3
 8007360:	b2db      	uxtb	r3, r3
 8007362:	461a      	mov	r2, r3
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	605a      	str	r2, [r3, #4]
			break;
 8007368:	e00e      	b.n	8007388 <USBD_HID_Setup+0xb8>

		case HID_REQ_GET_IDLE:
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->IdleState, 1U);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	3304      	adds	r3, #4
 800736e:	2201      	movs	r2, #1
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 f933 	bl	80085de <USBD_CtlSendData>
			break;
 8007378:	e006      	b.n	8007388 <USBD_HID_Setup+0xb8>

		default:
			USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f8c4 	bl	800850a <USBD_CtlError>
			ret = USBD_FAIL;
 8007382:	2302      	movs	r3, #2
 8007384:	75fb      	strb	r3, [r7, #23]
			break;
 8007386:	bf00      	nop
		}
		break;
 8007388:	e096      	b.n	80074b8 <USBD_HID_Setup+0x1e8>
	case USB_REQ_TYPE_STANDARD:
		switch (req->bRequest) {
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	785b      	ldrb	r3, [r3, #1]
 800738e:	2b0b      	cmp	r3, #11
 8007390:	f200 8083 	bhi.w	800749a <USBD_HID_Setup+0x1ca>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <USBD_HID_Setup+0xcc>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073cd 	.word	0x080073cd
 80073a0:	0800749b 	.word	0x0800749b
 80073a4:	0800749b 	.word	0x0800749b
 80073a8:	0800749b 	.word	0x0800749b
 80073ac:	0800749b 	.word	0x0800749b
 80073b0:	0800749b 	.word	0x0800749b
 80073b4:	080073f5 	.word	0x080073f5
 80073b8:	0800749b 	.word	0x0800749b
 80073bc:	0800749b 	.word	0x0800749b
 80073c0:	0800749b 	.word	0x0800749b
 80073c4:	0800744d 	.word	0x0800744d
 80073c8:	08007475 	.word	0x08007475
		case USB_REQ_GET_STATUS:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d107      	bne.n	80073e6 <USBD_HID_Setup+0x116>
				USBD_CtlSendData(pdev, (uint8_t*) (void*) &status_info, 2U);
 80073d6:	f107 030e 	add.w	r3, r7, #14
 80073da:	2202      	movs	r2, #2
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 f8fd 	bl	80085de <USBD_CtlSendData>
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 80073e4:	e060      	b.n	80074a8 <USBD_HID_Setup+0x1d8>
				USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 f88e 	bl	800850a <USBD_CtlError>
				ret = USBD_FAIL;
 80073ee:	2302      	movs	r3, #2
 80073f0:	75fb      	strb	r3, [r7, #23]
			break;
 80073f2:	e059      	b.n	80074a8 <USBD_HID_Setup+0x1d8>

		case USB_REQ_GET_DESCRIPTOR:
			if (req->wValue >> 8 == HID_REPORT_DESC) {
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	885b      	ldrh	r3, [r3, #2]
 80073f8:	0a1b      	lsrs	r3, r3, #8
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b22      	cmp	r3, #34	; 0x22
 80073fe:	d108      	bne.n	8007412 <USBD_HID_Setup+0x142>
				len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	88db      	ldrh	r3, [r3, #6]
 8007404:	2b3f      	cmp	r3, #63	; 0x3f
 8007406:	bf28      	it	cs
 8007408:	233f      	movcs	r3, #63	; 0x3f
 800740a:	83fb      	strh	r3, [r7, #30]
				pbuf = HID_MOUSE_ReportDesc;
 800740c:	4b2d      	ldr	r3, [pc, #180]	; (80074c4 <USBD_HID_Setup+0x1f4>)
 800740e:	61bb      	str	r3, [r7, #24]
 8007410:	e015      	b.n	800743e <USBD_HID_Setup+0x16e>
			} else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE) {
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	885b      	ldrh	r3, [r3, #2]
 8007416:	0a1b      	lsrs	r3, r3, #8
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b21      	cmp	r3, #33	; 0x21
 800741c:	d108      	bne.n	8007430 <USBD_HID_Setup+0x160>
				pbuf = USBD_HID_Desc;
 800741e:	4b2a      	ldr	r3, [pc, #168]	; (80074c8 <USBD_HID_Setup+0x1f8>)
 8007420:	61bb      	str	r3, [r7, #24]
				len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	88db      	ldrh	r3, [r3, #6]
 8007426:	2b09      	cmp	r3, #9
 8007428:	bf28      	it	cs
 800742a:	2309      	movcs	r3, #9
 800742c:	83fb      	strh	r3, [r7, #30]
 800742e:	e006      	b.n	800743e <USBD_HID_Setup+0x16e>
			} else {
				USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 f869 	bl	800850a <USBD_CtlError>
				ret = USBD_FAIL;
 8007438:	2302      	movs	r3, #2
 800743a:	75fb      	strb	r3, [r7, #23]
				break;
 800743c:	e034      	b.n	80074a8 <USBD_HID_Setup+0x1d8>
			}
			USBD_CtlSendData(pdev, pbuf, len);
 800743e:	8bfb      	ldrh	r3, [r7, #30]
 8007440:	461a      	mov	r2, r3
 8007442:	69b9      	ldr	r1, [r7, #24]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 f8ca 	bl	80085de <USBD_CtlSendData>
			break;
 800744a:	e02d      	b.n	80074a8 <USBD_HID_Setup+0x1d8>

		case USB_REQ_GET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007452:	2b03      	cmp	r3, #3
 8007454:	d107      	bne.n	8007466 <USBD_HID_Setup+0x196>
				USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->AltSetting,
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	3308      	adds	r3, #8
 800745a:	2201      	movs	r2, #1
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f001 f8bd 	bl	80085de <USBD_CtlSendData>
						1U);
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 8007464:	e020      	b.n	80074a8 <USBD_HID_Setup+0x1d8>
				USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 f84e 	bl	800850a <USBD_CtlError>
				ret = USBD_FAIL;
 800746e:	2302      	movs	r3, #2
 8007470:	75fb      	strb	r3, [r7, #23]
			break;
 8007472:	e019      	b.n	80074a8 <USBD_HID_Setup+0x1d8>

		case USB_REQ_SET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800747a:	2b03      	cmp	r3, #3
 800747c:	d106      	bne.n	800748c <USBD_HID_Setup+0x1bc>
				hhid->AltSetting = (uint8_t) (req->wValue);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	885b      	ldrh	r3, [r3, #2]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	461a      	mov	r2, r3
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	609a      	str	r2, [r3, #8]
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 800748a:	e00d      	b.n	80074a8 <USBD_HID_Setup+0x1d8>
				USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 f83b 	bl	800850a <USBD_CtlError>
				ret = USBD_FAIL;
 8007494:	2302      	movs	r3, #2
 8007496:	75fb      	strb	r3, [r7, #23]
			break;
 8007498:	e006      	b.n	80074a8 <USBD_HID_Setup+0x1d8>

		default:
			USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 f834 	bl	800850a <USBD_CtlError>
			ret = USBD_FAIL;
 80074a2:	2302      	movs	r3, #2
 80074a4:	75fb      	strb	r3, [r7, #23]
			break;
 80074a6:	bf00      	nop
		}
		break;
 80074a8:	e006      	b.n	80074b8 <USBD_HID_Setup+0x1e8>

	default:
		USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 f82c 	bl	800850a <USBD_CtlError>
		ret = USBD_FAIL;
 80074b2:	2302      	movs	r3, #2
 80074b4:	75fb      	strb	r3, [r7, #23]
		break;
 80074b6:	bf00      	nop
	}

	return ret;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3720      	adds	r7, #32
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	200000d0 	.word	0x200000d0
 80074c8:	200000b8 	.word	0x200000b8

080074cc <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report,
		uint16_t len) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	4613      	mov	r3, r2
 80074d8:	80fb      	strh	r3, [r7, #6]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e0:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d10c      	bne.n	8007506 <USBD_HID_SendReport+0x3a>
		if (hhid->state == HID_IDLE) {
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	7b1b      	ldrb	r3, [r3, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d108      	bne.n	8007506 <USBD_HID_SendReport+0x3a>
			hhid->state = HID_BUSY;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2201      	movs	r2, #1
 80074f8:	731a      	strb	r2, [r3, #12]
			USBD_LL_Transmit(pdev,
 80074fa:	88fb      	ldrh	r3, [r7, #6]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	2181      	movs	r1, #129	; 0x81
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f001 fbfa 	bl	8008cfa <USBD_LL_Transmit>
			HID_EPIN_ADDR, report, len);
		}
	}
	return USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_HID_GetFSCfgDesc>:
 *         return FS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetFSCfgDesc(uint16_t *length) {
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_CfgFSDesc);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2222      	movs	r2, #34	; 0x22
 800751c:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgFSDesc;
 800751e:	4b03      	ldr	r3, [pc, #12]	; (800752c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007520:	4618      	mov	r0, r3
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	bc80      	pop	{r7}
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	2000004c 	.word	0x2000004c

08007530 <USBD_HID_GetHSCfgDesc>:
 *         return HS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetHSCfgDesc(uint16_t *length) {
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_CfgHSDesc);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2222      	movs	r2, #34	; 0x22
 800753c:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgHSDesc;
 800753e:	4b03      	ldr	r3, [pc, #12]	; (800754c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	bc80      	pop	{r7}
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20000070 	.word	0x20000070

08007550 <USBD_HID_GetOtherSpeedCfgDesc>:
 *         return other speed configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length) {
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2222      	movs	r2, #34	; 0x22
 800755c:	801a      	strh	r2, [r3, #0]
	return USBD_HID_OtherSpeedCfgDesc;
 800755e:	4b03      	ldr	r3, [pc, #12]	; (800756c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	20000094 	.word	0x20000094

08007570 <USBD_HID_DataIn>:
 *         handle data IN Stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]

	/* Ensure that the FIFO is empty before a new transfer, this condition could
	 be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef*) pdev->pClassData)->state = HID_IDLE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007582:	2200      	movs	r2, #0
 8007584:	731a      	strb	r2, [r3, #12]
	return USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr
	...

08007594 <USBD_HID_GetDeviceQualifierDesc>:
 * @brief  DeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetDeviceQualifierDesc(uint16_t *length) {
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_HID_DeviceQualifierDesc);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	220a      	movs	r2, #10
 80075a0:	801a      	strh	r2, [r3, #0]
	return USBD_HID_DeviceQualifierDesc;
 80075a2:	4b03      	ldr	r3, [pc, #12]	; (80075b0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	200000c4 	.word	0x200000c4

080075b4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	4613      	mov	r3, r2
 80075c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80075c8:	2302      	movs	r3, #2
 80075ca:	e01a      	b.n	8007602 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	79fa      	ldrb	r2, [r7, #7]
 80075f8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f001 fa4c 	bl	8008a98 <USBD_LL_Init>

  return USBD_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800760a:	b480      	push	{r7}
 800760c:	b085      	sub	sp, #20
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d006      	beq.n	800762c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
 800762a:	e001      	b.n	8007630 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800762c:	2302      	movs	r3, #2
 800762e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007630:	7bfb      	ldrb	r3, [r7, #15]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	bc80      	pop	{r7}
 800763a:	4770      	bx	lr

0800763c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 fa6f 	bl	8008b28 <USBD_LL_Start>

  return USBD_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr

08007668 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007674:	2302      	movs	r3, #2
 8007676:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00c      	beq.n	800769c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	78fa      	ldrb	r2, [r7, #3]
 800768c:	4611      	mov	r1, r2
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	4798      	blx	r3
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800769c:	7bfb      	ldrb	r3, [r7, #15]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	460b      	mov	r3, r1
 80076b0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	78fa      	ldrb	r2, [r7, #3]
 80076bc:	4611      	mov	r1, r2
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	4798      	blx	r3

  return USBD_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 fed7 	bl	8008492 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007700:	f003 031f 	and.w	r3, r3, #31
 8007704:	2b02      	cmp	r3, #2
 8007706:	d016      	beq.n	8007736 <USBD_LL_SetupStage+0x6a>
 8007708:	2b02      	cmp	r3, #2
 800770a:	d81c      	bhi.n	8007746 <USBD_LL_SetupStage+0x7a>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <USBD_LL_SetupStage+0x4a>
 8007710:	2b01      	cmp	r3, #1
 8007712:	d008      	beq.n	8007726 <USBD_LL_SetupStage+0x5a>
 8007714:	e017      	b.n	8007746 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f9ca 	bl	8007ab8 <USBD_StdDevReq>
      break;
 8007724:	e01a      	b.n	800775c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fa2c 	bl	8007b8c <USBD_StdItfReq>
      break;
 8007734:	e012      	b.n	800775c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa6c 	bl	8007c1c <USBD_StdEPReq>
      break;
 8007744:	e00a      	b.n	800775c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800774c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007750:	b2db      	uxtb	r3, r3
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 fa47 	bl	8008be8 <USBD_LL_StallEP>
      break;
 800775a:	bf00      	nop
  }

  return USBD_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b086      	sub	sp, #24
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	460b      	mov	r3, r1
 8007770:	607a      	str	r2, [r7, #4]
 8007772:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007774:	7afb      	ldrb	r3, [r7, #11]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d14b      	bne.n	8007812 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007780:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007788:	2b03      	cmp	r3, #3
 800778a:	d134      	bne.n	80077f6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	68da      	ldr	r2, [r3, #12]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	429a      	cmp	r2, r3
 8007796:	d919      	bls.n	80077cc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	1ad2      	subs	r2, r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d203      	bcs.n	80077ba <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	e002      	b.n	80077c0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077be:	b29b      	uxth	r3, r3
 80077c0:	461a      	mov	r2, r3
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 ff38 	bl	800863a <USBD_CtlContinueRx>
 80077ca:	e038      	b.n	800783e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00a      	beq.n	80077ee <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d105      	bne.n	80077ee <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 ff35 	bl	800865e <USBD_CtlSendStatus>
 80077f4:	e023      	b.n	800783e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077fc:	2b05      	cmp	r3, #5
 80077fe:	d11e      	bne.n	800783e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007808:	2100      	movs	r1, #0
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f001 f9ec 	bl	8008be8 <USBD_LL_StallEP>
 8007810:	e015      	b.n	800783e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00d      	beq.n	800783a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007824:	2b03      	cmp	r3, #3
 8007826:	d108      	bne.n	800783a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	7afa      	ldrb	r2, [r7, #11]
 8007832:	4611      	mov	r1, r2
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	4798      	blx	r3
 8007838:	e001      	b.n	800783e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800783a:	2302      	movs	r3, #2
 800783c:	e000      	b.n	8007840 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	460b      	mov	r3, r1
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007856:	7afb      	ldrb	r3, [r7, #11]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d17f      	bne.n	800795c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3314      	adds	r3, #20
 8007860:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007868:	2b02      	cmp	r3, #2
 800786a:	d15c      	bne.n	8007926 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	429a      	cmp	r2, r3
 8007876:	d915      	bls.n	80078a4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	1ad2      	subs	r2, r2, r3
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	b29b      	uxth	r3, r3
 800788c:	461a      	mov	r2, r3
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 fec0 	bl	8008616 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007896:	2300      	movs	r3, #0
 8007898:	2200      	movs	r2, #0
 800789a:	2100      	movs	r1, #0
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f001 fa4f 	bl	8008d40 <USBD_LL_PrepareReceive>
 80078a2:	e04e      	b.n	8007942 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	6912      	ldr	r2, [r2, #16]
 80078ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80078b0:	fb01 f202 	mul.w	r2, r1, r2
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d11c      	bne.n	80078f4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d316      	bcc.n	80078f4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d20f      	bcs.n	80078f4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078d4:	2200      	movs	r2, #0
 80078d6:	2100      	movs	r1, #0
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 fe9c 	bl	8008616 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078e6:	2300      	movs	r3, #0
 80078e8:	2200      	movs	r2, #0
 80078ea:	2100      	movs	r1, #0
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f001 fa27 	bl	8008d40 <USBD_LL_PrepareReceive>
 80078f2:	e026      	b.n	8007942 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007906:	2b03      	cmp	r3, #3
 8007908:	d105      	bne.n	8007916 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007916:	2180      	movs	r1, #128	; 0x80
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f001 f965 	bl	8008be8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 feb0 	bl	8008684 <USBD_CtlReceiveStatus>
 8007924:	e00d      	b.n	8007942 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800792c:	2b04      	cmp	r3, #4
 800792e:	d004      	beq.n	800793a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800793a:	2180      	movs	r1, #128	; 0x80
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f001 f953 	bl	8008be8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007948:	2b01      	cmp	r3, #1
 800794a:	d11d      	bne.n	8007988 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f7ff fe81 	bl	8007654 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800795a:	e015      	b.n	8007988 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00d      	beq.n	8007984 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800796e:	2b03      	cmp	r3, #3
 8007970:	d108      	bne.n	8007984 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	7afa      	ldrb	r2, [r7, #11]
 800797c:	4611      	mov	r1, r2
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	4798      	blx	r3
 8007982:	e001      	b.n	8007988 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007984:	2302      	movs	r3, #2
 8007986:	e000      	b.n	800798a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800799a:	2340      	movs	r3, #64	; 0x40
 800799c:	2200      	movs	r2, #0
 800799e:	2100      	movs	r1, #0
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 f8dc 	bl	8008b5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2240      	movs	r2, #64	; 0x40
 80079b2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079b6:	2340      	movs	r3, #64	; 0x40
 80079b8:	2200      	movs	r2, #0
 80079ba:	2180      	movs	r1, #128	; 0x80
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 f8ce 	bl	8008b5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2240      	movs	r2, #64	; 0x40
 80079cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6852      	ldr	r2, [r2, #4]
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	4611      	mov	r1, r2
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	4798      	blx	r3
  }

  return USBD_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	78fa      	ldrb	r2, [r7, #3]
 8007a24:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr

08007a32 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2204      	movs	r2, #4
 8007a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr

08007a5a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d105      	bne.n	8007a78 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc80      	pop	{r7}
 8007a82:	4770      	bx	lr

08007a84 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d10b      	bne.n	8007aae <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ace:	2b40      	cmp	r3, #64	; 0x40
 8007ad0:	d005      	beq.n	8007ade <USBD_StdDevReq+0x26>
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	d84f      	bhi.n	8007b76 <USBD_StdDevReq+0xbe>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d009      	beq.n	8007aee <USBD_StdDevReq+0x36>
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	d14b      	bne.n	8007b76 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	4798      	blx	r3
      break;
 8007aec:	e048      	b.n	8007b80 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	2b09      	cmp	r3, #9
 8007af4:	d839      	bhi.n	8007b6a <USBD_StdDevReq+0xb2>
 8007af6:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <USBD_StdDevReq+0x44>)
 8007af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afc:	08007b4d 	.word	0x08007b4d
 8007b00:	08007b61 	.word	0x08007b61
 8007b04:	08007b6b 	.word	0x08007b6b
 8007b08:	08007b57 	.word	0x08007b57
 8007b0c:	08007b6b 	.word	0x08007b6b
 8007b10:	08007b2f 	.word	0x08007b2f
 8007b14:	08007b25 	.word	0x08007b25
 8007b18:	08007b6b 	.word	0x08007b6b
 8007b1c:	08007b43 	.word	0x08007b43
 8007b20:	08007b39 	.word	0x08007b39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f9dc 	bl	8007ee4 <USBD_GetDescriptor>
          break;
 8007b2c:	e022      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fb3f 	bl	80081b4 <USBD_SetAddress>
          break;
 8007b36:	e01d      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fb7e 	bl	800823c <USBD_SetConfig>
          break;
 8007b40:	e018      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fc07 	bl	8008358 <USBD_GetConfig>
          break;
 8007b4a:	e013      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fc37 	bl	80083c2 <USBD_GetStatus>
          break;
 8007b54:	e00e      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fc65 	bl	8008428 <USBD_SetFeature>
          break;
 8007b5e:	e009      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fc74 	bl	8008450 <USBD_ClrFeature>
          break;
 8007b68:	e004      	b.n	8007b74 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fccc 	bl	800850a <USBD_CtlError>
          break;
 8007b72:	bf00      	nop
      }
      break;
 8007b74:	e004      	b.n	8007b80 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fcc6 	bl	800850a <USBD_CtlError>
      break;
 8007b7e:	bf00      	nop
  }

  return ret;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop

08007b8c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ba2:	2b40      	cmp	r3, #64	; 0x40
 8007ba4:	d005      	beq.n	8007bb2 <USBD_StdItfReq+0x26>
 8007ba6:	2b40      	cmp	r3, #64	; 0x40
 8007ba8:	d82e      	bhi.n	8007c08 <USBD_StdItfReq+0x7c>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <USBD_StdItfReq+0x26>
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d12a      	bne.n	8007c08 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d81d      	bhi.n	8007bfa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	889b      	ldrh	r3, [r3, #4]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d813      	bhi.n	8007bf0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	4798      	blx	r3
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	88db      	ldrh	r3, [r3, #6]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d110      	bne.n	8007c04 <USBD_StdItfReq+0x78>
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10d      	bne.n	8007c04 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fd38 	bl	800865e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bee:	e009      	b.n	8007c04 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fc89 	bl	800850a <USBD_CtlError>
          break;
 8007bf8:	e004      	b.n	8007c04 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fc84 	bl	800850a <USBD_CtlError>
          break;
 8007c02:	e000      	b.n	8007c06 <USBD_StdItfReq+0x7a>
          break;
 8007c04:	bf00      	nop
      }
      break;
 8007c06:	e004      	b.n	8007c12 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fc7d 	bl	800850a <USBD_CtlError>
      break;
 8007c10:	bf00      	nop
  }

  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	889b      	ldrh	r3, [r3, #4]
 8007c2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c38:	2b40      	cmp	r3, #64	; 0x40
 8007c3a:	d007      	beq.n	8007c4c <USBD_StdEPReq+0x30>
 8007c3c:	2b40      	cmp	r3, #64	; 0x40
 8007c3e:	f200 8146 	bhi.w	8007ece <USBD_StdEPReq+0x2b2>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <USBD_StdEPReq+0x40>
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	f040 8141 	bne.w	8007ece <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
      break;
 8007c5a:	e13d      	b.n	8007ed8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d10a      	bne.n	8007c7e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	e12d      	b.n	8007eda <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	785b      	ldrb	r3, [r3, #1]
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d007      	beq.n	8007c96 <USBD_StdEPReq+0x7a>
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	f300 811b 	bgt.w	8007ec2 <USBD_StdEPReq+0x2a6>
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d072      	beq.n	8007d76 <USBD_StdEPReq+0x15a>
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d03a      	beq.n	8007d0a <USBD_StdEPReq+0xee>
 8007c94:	e115      	b.n	8007ec2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d002      	beq.n	8007ca6 <USBD_StdEPReq+0x8a>
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d015      	beq.n	8007cd0 <USBD_StdEPReq+0xb4>
 8007ca4:	e02b      	b.n	8007cfe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00c      	beq.n	8007cc6 <USBD_StdEPReq+0xaa>
 8007cac:	7bbb      	ldrb	r3, [r7, #14]
 8007cae:	2b80      	cmp	r3, #128	; 0x80
 8007cb0:	d009      	beq.n	8007cc6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 ff96 	bl	8008be8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007cbc:	2180      	movs	r1, #128	; 0x80
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 ff92 	bl	8008be8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cc4:	e020      	b.n	8007d08 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fc1e 	bl	800850a <USBD_CtlError>
              break;
 8007cce:	e01b      	b.n	8007d08 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	885b      	ldrh	r3, [r3, #2]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10e      	bne.n	8007cf6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00b      	beq.n	8007cf6 <USBD_StdEPReq+0xda>
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b80      	cmp	r3, #128	; 0x80
 8007ce2:	d008      	beq.n	8007cf6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	88db      	ldrh	r3, [r3, #6]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 ff79 	bl	8008be8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fcb1 	bl	800865e <USBD_CtlSendStatus>

              break;
 8007cfc:	e004      	b.n	8007d08 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fc02 	bl	800850a <USBD_CtlError>
              break;
 8007d06:	bf00      	nop
          }
          break;
 8007d08:	e0e0      	b.n	8007ecc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d002      	beq.n	8007d1a <USBD_StdEPReq+0xfe>
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d015      	beq.n	8007d44 <USBD_StdEPReq+0x128>
 8007d18:	e026      	b.n	8007d68 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00c      	beq.n	8007d3a <USBD_StdEPReq+0x11e>
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b80      	cmp	r3, #128	; 0x80
 8007d24:	d009      	beq.n	8007d3a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 ff5c 	bl	8008be8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d30:	2180      	movs	r1, #128	; 0x80
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 ff58 	bl	8008be8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d38:	e01c      	b.n	8007d74 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fbe4 	bl	800850a <USBD_CtlError>
              break;
 8007d42:	e017      	b.n	8007d74 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	885b      	ldrh	r3, [r3, #2]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d112      	bne.n	8007d72 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d004      	beq.n	8007d60 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 ff63 	bl	8008c26 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fc7c 	bl	800865e <USBD_CtlSendStatus>
              }
              break;
 8007d66:	e004      	b.n	8007d72 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fbcd 	bl	800850a <USBD_CtlError>
              break;
 8007d70:	e000      	b.n	8007d74 <USBD_StdEPReq+0x158>
              break;
 8007d72:	bf00      	nop
          }
          break;
 8007d74:	e0aa      	b.n	8007ecc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d002      	beq.n	8007d86 <USBD_StdEPReq+0x16a>
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d032      	beq.n	8007dea <USBD_StdEPReq+0x1ce>
 8007d84:	e097      	b.n	8007eb6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d007      	beq.n	8007d9c <USBD_StdEPReq+0x180>
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
 8007d8e:	2b80      	cmp	r3, #128	; 0x80
 8007d90:	d004      	beq.n	8007d9c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fbb8 	bl	800850a <USBD_CtlError>
                break;
 8007d9a:	e091      	b.n	8007ec0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	da0b      	bge.n	8007dbc <USBD_StdEPReq+0x1a0>
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007daa:	4613      	mov	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	3310      	adds	r3, #16
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	4413      	add	r3, r2
 8007db8:	3304      	adds	r3, #4
 8007dba:	e00b      	b.n	8007dd4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2202      	movs	r2, #2
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fbfb 	bl	80085de <USBD_CtlSendData>
              break;
 8007de8:	e06a      	b.n	8007ec0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007dea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	da11      	bge.n	8007e16 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	f003 020f 	and.w	r2, r3, #15
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	440b      	add	r3, r1
 8007e04:	3318      	adds	r3, #24
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d117      	bne.n	8007e3c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fb7b 	bl	800850a <USBD_CtlError>
                  break;
 8007e14:	e054      	b.n	8007ec0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	f003 020f 	and.w	r2, r3, #15
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	440b      	add	r3, r1
 8007e28:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d104      	bne.n	8007e3c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fb68 	bl	800850a <USBD_CtlError>
                  break;
 8007e3a:	e041      	b.n	8007ec0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	da0b      	bge.n	8007e5c <USBD_StdEPReq+0x240>
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	3310      	adds	r3, #16
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	4413      	add	r3, r2
 8007e58:	3304      	adds	r3, #4
 8007e5a:	e00b      	b.n	8007e74 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	4413      	add	r3, r2
 8007e72:	3304      	adds	r3, #4
 8007e74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <USBD_StdEPReq+0x266>
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	2b80      	cmp	r3, #128	; 0x80
 8007e80:	d103      	bne.n	8007e8a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	e00e      	b.n	8007ea8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fee8 	bl	8008c64 <USBD_LL_IsStallEP>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	e002      	b.n	8007ea8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fb95 	bl	80085de <USBD_CtlSendData>
              break;
 8007eb4:	e004      	b.n	8007ec0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fb26 	bl	800850a <USBD_CtlError>
              break;
 8007ebe:	bf00      	nop
          }
          break;
 8007ec0:	e004      	b.n	8007ecc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fb20 	bl	800850a <USBD_CtlError>
          break;
 8007eca:	bf00      	nop
      }
      break;
 8007ecc:	e004      	b.n	8007ed8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fb1a 	bl	800850a <USBD_CtlError>
      break;
 8007ed6:	bf00      	nop
  }

  return ret;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	885b      	ldrh	r3, [r3, #2]
 8007efe:	0a1b      	lsrs	r3, r3, #8
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	2b06      	cmp	r3, #6
 8007f06:	f200 8128 	bhi.w	800815a <USBD_GetDescriptor+0x276>
 8007f0a:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <USBD_GetDescriptor+0x2c>)
 8007f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f10:	08007f2d 	.word	0x08007f2d
 8007f14:	08007f45 	.word	0x08007f45
 8007f18:	08007f85 	.word	0x08007f85
 8007f1c:	0800815b 	.word	0x0800815b
 8007f20:	0800815b 	.word	0x0800815b
 8007f24:	080080fb 	.word	0x080080fb
 8007f28:	08008127 	.word	0x08008127
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	7c12      	ldrb	r2, [r2, #16]
 8007f38:	f107 0108 	add.w	r1, r7, #8
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4798      	blx	r3
 8007f40:	60f8      	str	r0, [r7, #12]
      break;
 8007f42:	e112      	b.n	800816a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	7c1b      	ldrb	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10d      	bne.n	8007f68 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f54:	f107 0208 	add.w	r2, r7, #8
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4798      	blx	r3
 8007f5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	2202      	movs	r2, #2
 8007f64:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f66:	e100      	b.n	800816a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f70:	f107 0208 	add.w	r2, r7, #8
 8007f74:	4610      	mov	r0, r2
 8007f76:	4798      	blx	r3
 8007f78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	2202      	movs	r2, #2
 8007f80:	701a      	strb	r2, [r3, #0]
      break;
 8007f82:	e0f2      	b.n	800816a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	885b      	ldrh	r3, [r3, #2]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b05      	cmp	r3, #5
 8007f8c:	f200 80ac 	bhi.w	80080e8 <USBD_GetDescriptor+0x204>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <USBD_GetDescriptor+0xb4>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fb1 	.word	0x08007fb1
 8007f9c:	08007fe5 	.word	0x08007fe5
 8007fa0:	08008019 	.word	0x08008019
 8007fa4:	0800804d 	.word	0x0800804d
 8007fa8:	08008081 	.word	0x08008081
 8007fac:	080080b5 	.word	0x080080b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	7c12      	ldrb	r2, [r2, #16]
 8007fc8:	f107 0108 	add.w	r1, r7, #8
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4798      	blx	r3
 8007fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fd2:	e091      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fa97 	bl	800850a <USBD_CtlError>
            err++;
 8007fdc:	7afb      	ldrb	r3, [r7, #11]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8007fe2:	e089      	b.n	80080f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00b      	beq.n	8008008 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	7c12      	ldrb	r2, [r2, #16]
 8007ffc:	f107 0108 	add.w	r1, r7, #8
 8008000:	4610      	mov	r0, r2
 8008002:	4798      	blx	r3
 8008004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008006:	e077      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa7d 	bl	800850a <USBD_CtlError>
            err++;
 8008010:	7afb      	ldrb	r3, [r7, #11]
 8008012:	3301      	adds	r3, #1
 8008014:	72fb      	strb	r3, [r7, #11]
          break;
 8008016:	e06f      	b.n	80080f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00b      	beq.n	800803c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	7c12      	ldrb	r2, [r2, #16]
 8008030:	f107 0108 	add.w	r1, r7, #8
 8008034:	4610      	mov	r0, r2
 8008036:	4798      	blx	r3
 8008038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800803a:	e05d      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa63 	bl	800850a <USBD_CtlError>
            err++;
 8008044:	7afb      	ldrb	r3, [r7, #11]
 8008046:	3301      	adds	r3, #1
 8008048:	72fb      	strb	r3, [r7, #11]
          break;
 800804a:	e055      	b.n	80080f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00b      	beq.n	8008070 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	7c12      	ldrb	r2, [r2, #16]
 8008064:	f107 0108 	add.w	r1, r7, #8
 8008068:	4610      	mov	r0, r2
 800806a:	4798      	blx	r3
 800806c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800806e:	e043      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fa49 	bl	800850a <USBD_CtlError>
            err++;
 8008078:	7afb      	ldrb	r3, [r7, #11]
 800807a:	3301      	adds	r3, #1
 800807c:	72fb      	strb	r3, [r7, #11]
          break;
 800807e:	e03b      	b.n	80080f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00b      	beq.n	80080a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	7c12      	ldrb	r2, [r2, #16]
 8008098:	f107 0108 	add.w	r1, r7, #8
 800809c:	4610      	mov	r0, r2
 800809e:	4798      	blx	r3
 80080a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080a2:	e029      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fa2f 	bl	800850a <USBD_CtlError>
            err++;
 80080ac:	7afb      	ldrb	r3, [r7, #11]
 80080ae:	3301      	adds	r3, #1
 80080b0:	72fb      	strb	r3, [r7, #11]
          break;
 80080b2:	e021      	b.n	80080f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00b      	beq.n	80080d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	7c12      	ldrb	r2, [r2, #16]
 80080cc:	f107 0108 	add.w	r1, r7, #8
 80080d0:	4610      	mov	r0, r2
 80080d2:	4798      	blx	r3
 80080d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080d6:	e00f      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fa15 	bl	800850a <USBD_CtlError>
            err++;
 80080e0:	7afb      	ldrb	r3, [r7, #11]
 80080e2:	3301      	adds	r3, #1
 80080e4:	72fb      	strb	r3, [r7, #11]
          break;
 80080e6:	e007      	b.n	80080f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fa0d 	bl	800850a <USBD_CtlError>
          err++;
 80080f0:	7afb      	ldrb	r3, [r7, #11]
 80080f2:	3301      	adds	r3, #1
 80080f4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80080f6:	e038      	b.n	800816a <USBD_GetDescriptor+0x286>
 80080f8:	e037      	b.n	800816a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	7c1b      	ldrb	r3, [r3, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d109      	bne.n	8008116 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810a:	f107 0208 	add.w	r2, r7, #8
 800810e:	4610      	mov	r0, r2
 8008110:	4798      	blx	r3
 8008112:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008114:	e029      	b.n	800816a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f9f6 	bl	800850a <USBD_CtlError>
        err++;
 800811e:	7afb      	ldrb	r3, [r7, #11]
 8008120:	3301      	adds	r3, #1
 8008122:	72fb      	strb	r3, [r7, #11]
      break;
 8008124:	e021      	b.n	800816a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7c1b      	ldrb	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10d      	bne.n	800814a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008136:	f107 0208 	add.w	r2, r7, #8
 800813a:	4610      	mov	r0, r2
 800813c:	4798      	blx	r3
 800813e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	2207      	movs	r2, #7
 8008146:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008148:	e00f      	b.n	800816a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f9dc 	bl	800850a <USBD_CtlError>
        err++;
 8008152:	7afb      	ldrb	r3, [r7, #11]
 8008154:	3301      	adds	r3, #1
 8008156:	72fb      	strb	r3, [r7, #11]
      break;
 8008158:	e007      	b.n	800816a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f9d4 	bl	800850a <USBD_CtlError>
      err++;
 8008162:	7afb      	ldrb	r3, [r7, #11]
 8008164:	3301      	adds	r3, #1
 8008166:	72fb      	strb	r3, [r7, #11]
      break;
 8008168:	bf00      	nop
  }

  if (err != 0U)
 800816a:	7afb      	ldrb	r3, [r7, #11]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d11c      	bne.n	80081aa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008170:	893b      	ldrh	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d011      	beq.n	800819a <USBD_GetDescriptor+0x2b6>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	88db      	ldrh	r3, [r3, #6]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00d      	beq.n	800819a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	88da      	ldrh	r2, [r3, #6]
 8008182:	893b      	ldrh	r3, [r7, #8]
 8008184:	4293      	cmp	r3, r2
 8008186:	bf28      	it	cs
 8008188:	4613      	movcs	r3, r2
 800818a:	b29b      	uxth	r3, r3
 800818c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800818e:	893b      	ldrh	r3, [r7, #8]
 8008190:	461a      	mov	r2, r3
 8008192:	68f9      	ldr	r1, [r7, #12]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fa22 	bl	80085de <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	88db      	ldrh	r3, [r3, #6]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa5b 	bl	800865e <USBD_CtlSendStatus>
 80081a8:	e000      	b.n	80081ac <USBD_GetDescriptor+0x2c8>
    return;
 80081aa:	bf00      	nop
    }
  }
}
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop

080081b4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	889b      	ldrh	r3, [r3, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d130      	bne.n	8008228 <USBD_SetAddress+0x74>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	88db      	ldrh	r3, [r3, #6]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d12c      	bne.n	8008228 <USBD_SetAddress+0x74>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	885b      	ldrh	r3, [r3, #2]
 80081d2:	2b7f      	cmp	r3, #127	; 0x7f
 80081d4:	d828      	bhi.n	8008228 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	885b      	ldrh	r3, [r3, #2]
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d104      	bne.n	80081f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f98b 	bl	800850a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f4:	e01d      	b.n	8008232 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	7bfa      	ldrb	r2, [r7, #15]
 80081fa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fd5a 	bl	8008cbc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fa28 	bl	800865e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821c:	e009      	b.n	8008232 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008226:	e004      	b.n	8008232 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f96d 	bl	800850a <USBD_CtlError>
  }
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	885b      	ldrh	r3, [r3, #2]
 800824a:	b2da      	uxtb	r2, r3
 800824c:	4b41      	ldr	r3, [pc, #260]	; (8008354 <USBD_SetConfig+0x118>)
 800824e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008250:	4b40      	ldr	r3, [pc, #256]	; (8008354 <USBD_SetConfig+0x118>)
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d904      	bls.n	8008262 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008258:	6839      	ldr	r1, [r7, #0]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f955 	bl	800850a <USBD_CtlError>
 8008260:	e075      	b.n	800834e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008268:	2b02      	cmp	r3, #2
 800826a:	d002      	beq.n	8008272 <USBD_SetConfig+0x36>
 800826c:	2b03      	cmp	r3, #3
 800826e:	d023      	beq.n	80082b8 <USBD_SetConfig+0x7c>
 8008270:	e062      	b.n	8008338 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008272:	4b38      	ldr	r3, [pc, #224]	; (8008354 <USBD_SetConfig+0x118>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01a      	beq.n	80082b0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800827a:	4b36      	ldr	r3, [pc, #216]	; (8008354 <USBD_SetConfig+0x118>)
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2203      	movs	r2, #3
 8008288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800828c:	4b31      	ldr	r3, [pc, #196]	; (8008354 <USBD_SetConfig+0x118>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7ff f9e8 	bl	8007668 <USBD_SetClassConfig>
 8008298:	4603      	mov	r3, r0
 800829a:	2b02      	cmp	r3, #2
 800829c:	d104      	bne.n	80082a8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f932 	bl	800850a <USBD_CtlError>
            return;
 80082a6:	e052      	b.n	800834e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f9d8 	bl	800865e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082ae:	e04e      	b.n	800834e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f9d4 	bl	800865e <USBD_CtlSendStatus>
        break;
 80082b6:	e04a      	b.n	800834e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80082b8:	4b26      	ldr	r3, [pc, #152]	; (8008354 <USBD_SetConfig+0x118>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d112      	bne.n	80082e6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80082c8:	4b22      	ldr	r3, [pc, #136]	; (8008354 <USBD_SetConfig+0x118>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	461a      	mov	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80082d2:	4b20      	ldr	r3, [pc, #128]	; (8008354 <USBD_SetConfig+0x118>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7ff f9e4 	bl	80076a6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f9bd 	bl	800865e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082e4:	e033      	b.n	800834e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80082e6:	4b1b      	ldr	r3, [pc, #108]	; (8008354 <USBD_SetConfig+0x118>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d01d      	beq.n	8008330 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7ff f9d2 	bl	80076a6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008302:	4b14      	ldr	r3, [pc, #80]	; (8008354 <USBD_SetConfig+0x118>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800830c:	4b11      	ldr	r3, [pc, #68]	; (8008354 <USBD_SetConfig+0x118>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff f9a8 	bl	8007668 <USBD_SetClassConfig>
 8008318:	4603      	mov	r3, r0
 800831a:	2b02      	cmp	r3, #2
 800831c:	d104      	bne.n	8008328 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8f2 	bl	800850a <USBD_CtlError>
            return;
 8008326:	e012      	b.n	800834e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f998 	bl	800865e <USBD_CtlSendStatus>
        break;
 800832e:	e00e      	b.n	800834e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f994 	bl	800865e <USBD_CtlSendStatus>
        break;
 8008336:	e00a      	b.n	800834e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f8e5 	bl	800850a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008340:	4b04      	ldr	r3, [pc, #16]	; (8008354 <USBD_SetConfig+0x118>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff f9ad 	bl	80076a6 <USBD_ClrClassConfig>
        break;
 800834c:	bf00      	nop
    }
  }
}
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	20000650 	.word	0x20000650

08008358 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	88db      	ldrh	r3, [r3, #6]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d004      	beq.n	8008374 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f8cc 	bl	800850a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008372:	e022      	b.n	80083ba <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837a:	2b02      	cmp	r3, #2
 800837c:	dc02      	bgt.n	8008384 <USBD_GetConfig+0x2c>
 800837e:	2b00      	cmp	r3, #0
 8008380:	dc03      	bgt.n	800838a <USBD_GetConfig+0x32>
 8008382:	e015      	b.n	80083b0 <USBD_GetConfig+0x58>
 8008384:	2b03      	cmp	r3, #3
 8008386:	d00b      	beq.n	80083a0 <USBD_GetConfig+0x48>
 8008388:	e012      	b.n	80083b0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3308      	adds	r3, #8
 8008394:	2201      	movs	r2, #1
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f920 	bl	80085de <USBD_CtlSendData>
        break;
 800839e:	e00c      	b.n	80083ba <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3304      	adds	r3, #4
 80083a4:	2201      	movs	r2, #1
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f918 	bl	80085de <USBD_CtlSendData>
        break;
 80083ae:	e004      	b.n	80083ba <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f8a9 	bl	800850a <USBD_CtlError>
        break;
 80083b8:	bf00      	nop
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b082      	sub	sp, #8
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d2:	3b01      	subs	r3, #1
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d81e      	bhi.n	8008416 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	88db      	ldrh	r3, [r3, #6]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d004      	beq.n	80083ea <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f891 	bl	800850a <USBD_CtlError>
        break;
 80083e8:	e01a      	b.n	8008420 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f043 0202 	orr.w	r2, r3, #2
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	330c      	adds	r3, #12
 800840a:	2202      	movs	r2, #2
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f8e5 	bl	80085de <USBD_CtlSendData>
      break;
 8008414:	e004      	b.n	8008420 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f876 	bl	800850a <USBD_CtlError>
      break;
 800841e:	bf00      	nop
  }
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	885b      	ldrh	r3, [r3, #2]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d106      	bne.n	8008448 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2201      	movs	r2, #1
 800843e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f90b 	bl	800865e <USBD_CtlSendStatus>
  }
}
 8008448:	bf00      	nop
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008460:	3b01      	subs	r3, #1
 8008462:	2b02      	cmp	r3, #2
 8008464:	d80b      	bhi.n	800847e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	885b      	ldrh	r3, [r3, #2]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d10c      	bne.n	8008488 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f8f1 	bl	800865e <USBD_CtlSendStatus>
      }
      break;
 800847c:	e004      	b.n	8008488 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f842 	bl	800850a <USBD_CtlError>
      break;
 8008486:	e000      	b.n	800848a <USBD_ClrFeature+0x3a>
      break;
 8008488:	bf00      	nop
  }
}
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781a      	ldrb	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	785a      	ldrb	r2, [r3, #1]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	3302      	adds	r3, #2
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	3303      	adds	r3, #3
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	b29b      	uxth	r3, r3
 80084c0:	4413      	add	r3, r2
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	3304      	adds	r3, #4
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	3305      	adds	r3, #5
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	021b      	lsls	r3, r3, #8
 80084da:	b29b      	uxth	r3, r3
 80084dc:	4413      	add	r3, r2
 80084de:	b29a      	uxth	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	3306      	adds	r3, #6
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	3307      	adds	r3, #7
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	021b      	lsls	r3, r3, #8
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	4413      	add	r3, r2
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	80da      	strh	r2, [r3, #6]

}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	bc80      	pop	{r7}
 8008508:	4770      	bx	lr

0800850a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008514:	2180      	movs	r1, #128	; 0x80
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fb66 	bl	8008be8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800851c:	2100      	movs	r1, #0
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fb62 	bl	8008be8 <USBD_LL_StallEP>
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d032      	beq.n	80085a8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f000 f834 	bl	80085b0 <USBD_GetLen>
 8008548:	4603      	mov	r3, r0
 800854a:	3301      	adds	r3, #1
 800854c:	b29b      	uxth	r3, r3
 800854e:	005b      	lsls	r3, r3, #1
 8008550:	b29a      	uxth	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	75fa      	strb	r2, [r7, #23]
 800855c:	461a      	mov	r2, r3
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	4413      	add	r3, r2
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	7812      	ldrb	r2, [r2, #0]
 8008566:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	75fa      	strb	r2, [r7, #23]
 800856e:	461a      	mov	r2, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4413      	add	r3, r2
 8008574:	2203      	movs	r2, #3
 8008576:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008578:	e012      	b.n	80085a0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	60fa      	str	r2, [r7, #12]
 8008580:	7dfa      	ldrb	r2, [r7, #23]
 8008582:	1c51      	adds	r1, r2, #1
 8008584:	75f9      	strb	r1, [r7, #23]
 8008586:	4611      	mov	r1, r2
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	440a      	add	r2, r1
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008590:	7dfb      	ldrb	r3, [r7, #23]
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	75fa      	strb	r2, [r7, #23]
 8008596:	461a      	mov	r2, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4413      	add	r3, r2
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e8      	bne.n	800857a <USBD_GetString+0x4e>
    }
  }
}
 80085a8:	bf00      	nop
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80085bc:	e005      	b.n	80085ca <USBD_GetLen+0x1a>
  {
    len++;
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	3301      	adds	r3, #1
 80085c2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3301      	adds	r3, #1
 80085c8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1f5      	bne.n	80085be <USBD_GetLen+0xe>
  }

  return len;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr

080085de <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	4613      	mov	r3, r2
 80085ea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80085f4:	88fa      	ldrh	r2, [r7, #6]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80085fa:	88fa      	ldrh	r2, [r7, #6]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008600:	88fb      	ldrh	r3, [r7, #6]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	2100      	movs	r1, #0
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 fb77 	bl	8008cfa <USBD_LL_Transmit>

  return USBD_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	60b9      	str	r1, [r7, #8]
 8008620:	4613      	mov	r3, r2
 8008622:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008624:	88fb      	ldrh	r3, [r7, #6]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	2100      	movs	r1, #0
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 fb65 	bl	8008cfa <USBD_LL_Transmit>

  return USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	4613      	mov	r3, r2
 8008646:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008648:	88fb      	ldrh	r3, [r7, #6]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	2100      	movs	r1, #0
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 fb76 	bl	8008d40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2204      	movs	r2, #4
 800866a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800866e:	2300      	movs	r3, #0
 8008670:	2200      	movs	r2, #0
 8008672:	2100      	movs	r1, #0
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fb40 	bl	8008cfa <USBD_LL_Transmit>

  return USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2205      	movs	r2, #5
 8008690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008694:	2300      	movs	r3, #0
 8008696:	2200      	movs	r2, #0
 8008698:	2100      	movs	r1, #0
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fb50 	bl	8008d40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80086b0:	2200      	movs	r2, #0
 80086b2:	490e      	ldr	r1, [pc, #56]	; (80086ec <MX_USB_DEVICE_Init+0x40>)
 80086b4:	480e      	ldr	r0, [pc, #56]	; (80086f0 <MX_USB_DEVICE_Init+0x44>)
 80086b6:	f7fe ff7d 	bl	80075b4 <USBD_Init>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80086c0:	f7f8 f898 	bl	80007f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80086c4:	490b      	ldr	r1, [pc, #44]	; (80086f4 <MX_USB_DEVICE_Init+0x48>)
 80086c6:	480a      	ldr	r0, [pc, #40]	; (80086f0 <MX_USB_DEVICE_Init+0x44>)
 80086c8:	f7fe ff9f 	bl	800760a <USBD_RegisterClass>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80086d2:	f7f8 f88f 	bl	80007f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80086d6:	4806      	ldr	r0, [pc, #24]	; (80086f0 <MX_USB_DEVICE_Init+0x44>)
 80086d8:	f7fe ffb0 	bl	800763c <USBD_Start>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80086e2:	f7f8 f887 	bl	80007f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80086e6:	bf00      	nop
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20000110 	.word	0x20000110
 80086f0:	20000654 	.word	0x20000654
 80086f4:	20000014 	.word	0x20000014

080086f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	6039      	str	r1, [r7, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2212      	movs	r2, #18
 8008708:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800870a:	4b03      	ldr	r3, [pc, #12]	; (8008718 <USBD_FS_DeviceDescriptor+0x20>)
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	2000012c 	.word	0x2000012c

0800871c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2204      	movs	r2, #4
 800872c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800872e:	4b03      	ldr	r3, [pc, #12]	; (800873c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	bc80      	pop	{r7}
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	20000140 	.word	0x20000140

08008740 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	4603      	mov	r3, r0
 8008748:	6039      	str	r1, [r7, #0]
 800874a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d105      	bne.n	800875e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	4907      	ldr	r1, [pc, #28]	; (8008774 <USBD_FS_ProductStrDescriptor+0x34>)
 8008756:	4808      	ldr	r0, [pc, #32]	; (8008778 <USBD_FS_ProductStrDescriptor+0x38>)
 8008758:	f7ff fee8 	bl	800852c <USBD_GetString>
 800875c:	e004      	b.n	8008768 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	4904      	ldr	r1, [pc, #16]	; (8008774 <USBD_FS_ProductStrDescriptor+0x34>)
 8008762:	4805      	ldr	r0, [pc, #20]	; (8008778 <USBD_FS_ProductStrDescriptor+0x38>)
 8008764:	f7ff fee2 	bl	800852c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008768:	4b02      	ldr	r3, [pc, #8]	; (8008774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20000918 	.word	0x20000918
 8008778:	080097a4 	.word	0x080097a4

0800877c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008788:	683a      	ldr	r2, [r7, #0]
 800878a:	4904      	ldr	r1, [pc, #16]	; (800879c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800878c:	4804      	ldr	r0, [pc, #16]	; (80087a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800878e:	f7ff fecd 	bl	800852c <USBD_GetString>
  return USBD_StrDesc;
 8008792:	4b02      	ldr	r3, [pc, #8]	; (800879c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	20000918 	.word	0x20000918
 80087a0:	080097bc 	.word	0x080097bc

080087a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	221a      	movs	r2, #26
 80087b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087b6:	f000 f843 	bl	8008840 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ba:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	20000144 	.word	0x20000144

080087c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d105      	bne.n	80087e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4907      	ldr	r1, [pc, #28]	; (80087fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80087de:	4808      	ldr	r0, [pc, #32]	; (8008800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087e0:	f7ff fea4 	bl	800852c <USBD_GetString>
 80087e4:	e004      	b.n	80087f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	4904      	ldr	r1, [pc, #16]	; (80087fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80087ea:	4805      	ldr	r0, [pc, #20]	; (8008800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087ec:	f7ff fe9e 	bl	800852c <USBD_GetString>
  }
  return USBD_StrDesc;
 80087f0:	4b02      	ldr	r3, [pc, #8]	; (80087fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20000918 	.word	0x20000918
 8008800:	080097d0 	.word	0x080097d0

08008804 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d105      	bne.n	8008822 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	4907      	ldr	r1, [pc, #28]	; (8008838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800881a:	4808      	ldr	r0, [pc, #32]	; (800883c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800881c:	f7ff fe86 	bl	800852c <USBD_GetString>
 8008820:	e004      	b.n	800882c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	4904      	ldr	r1, [pc, #16]	; (8008838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008826:	4805      	ldr	r0, [pc, #20]	; (800883c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008828:	f7ff fe80 	bl	800852c <USBD_GetString>
  }
  return USBD_StrDesc;
 800882c:	4b02      	ldr	r3, [pc, #8]	; (8008838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000918 	.word	0x20000918
 800883c:	080097dc 	.word	0x080097dc

08008840 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008846:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <Get_SerialNum+0x44>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800884c:	4b0e      	ldr	r3, [pc, #56]	; (8008888 <Get_SerialNum+0x48>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008852:	4b0e      	ldr	r3, [pc, #56]	; (800888c <Get_SerialNum+0x4c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4413      	add	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d009      	beq.n	800887a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008866:	2208      	movs	r2, #8
 8008868:	4909      	ldr	r1, [pc, #36]	; (8008890 <Get_SerialNum+0x50>)
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 f814 	bl	8008898 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008870:	2204      	movs	r2, #4
 8008872:	4908      	ldr	r1, [pc, #32]	; (8008894 <Get_SerialNum+0x54>)
 8008874:	68b8      	ldr	r0, [r7, #8]
 8008876:	f000 f80f 	bl	8008898 <IntToUnicode>
  }
}
 800887a:	bf00      	nop
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	1ffff7e8 	.word	0x1ffff7e8
 8008888:	1ffff7ec 	.word	0x1ffff7ec
 800888c:	1ffff7f0 	.word	0x1ffff7f0
 8008890:	20000146 	.word	0x20000146
 8008894:	20000156 	.word	0x20000156

08008898 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	4613      	mov	r3, r2
 80088a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088aa:	2300      	movs	r3, #0
 80088ac:	75fb      	strb	r3, [r7, #23]
 80088ae:	e027      	b.n	8008900 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	0f1b      	lsrs	r3, r3, #28
 80088b4:	2b09      	cmp	r3, #9
 80088b6:	d80b      	bhi.n	80088d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	0f1b      	lsrs	r3, r3, #28
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	4619      	mov	r1, r3
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	440b      	add	r3, r1
 80088c8:	3230      	adds	r2, #48	; 0x30
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]
 80088ce:	e00a      	b.n	80088e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	0f1b      	lsrs	r3, r3, #28
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	4619      	mov	r1, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	440b      	add	r3, r1
 80088e0:	3237      	adds	r2, #55	; 0x37
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	005b      	lsls	r3, r3, #1
 80088f0:	3301      	adds	r3, #1
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	4413      	add	r3, r2
 80088f6:	2200      	movs	r2, #0
 80088f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	3301      	adds	r3, #1
 80088fe:	75fb      	strb	r3, [r7, #23]
 8008900:	7dfa      	ldrb	r2, [r7, #23]
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	429a      	cmp	r2, r3
 8008906:	d3d3      	bcc.n	80088b0 <IntToUnicode+0x18>
  }
}
 8008908:	bf00      	nop
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	bc80      	pop	{r7}
 8008912:	4770      	bx	lr

08008914 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a0d      	ldr	r2, [pc, #52]	; (8008958 <HAL_PCD_MspInit+0x44>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d113      	bne.n	800894e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008926:	4b0d      	ldr	r3, [pc, #52]	; (800895c <HAL_PCD_MspInit+0x48>)
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	4a0c      	ldr	r2, [pc, #48]	; (800895c <HAL_PCD_MspInit+0x48>)
 800892c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008930:	61d3      	str	r3, [r2, #28]
 8008932:	4b0a      	ldr	r3, [pc, #40]	; (800895c <HAL_PCD_MspInit+0x48>)
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800893e:	2200      	movs	r2, #0
 8008940:	2100      	movs	r1, #0
 8008942:	2014      	movs	r0, #20
 8008944:	f7f8 fde5 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008948:	2014      	movs	r0, #20
 800894a:	f7f8 fdfe 	bl	800154a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800894e:	bf00      	nop
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	40005c00 	.word	0x40005c00
 800895c:	40021000 	.word	0x40021000

08008960 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008974:	4619      	mov	r1, r3
 8008976:	4610      	mov	r0, r2
 8008978:	f7fe fea8 	bl	80076cc <USBD_LL_SetupStage>
}
 800897c:	bf00      	nop
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008996:	78fa      	ldrb	r2, [r7, #3]
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	00db      	lsls	r3, r3, #3
 80089a2:	440b      	add	r3, r1
 80089a4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	78fb      	ldrb	r3, [r7, #3]
 80089ac:	4619      	mov	r1, r3
 80089ae:	f7fe feda 	bl	8007766 <USBD_LL_DataOutStage>
}
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	460b      	mov	r3, r1
 80089c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80089cc:	78fa      	ldrb	r2, [r7, #3]
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	440b      	add	r3, r1
 80089da:	333c      	adds	r3, #60	; 0x3c
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	78fb      	ldrb	r3, [r7, #3]
 80089e0:	4619      	mov	r1, r3
 80089e2:	f7fe ff31 	bl	8007848 <USBD_LL_DataInStage>
}
 80089e6:	bf00      	nop
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff f841 	bl	8007a84 <USBD_LL_SOF>
}
 8008a02:	bf00      	nop
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a12:	2301      	movs	r3, #1
 8008a14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d001      	beq.n	8008a22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a1e:	f7f7 fee9 	bl	80007f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a28:	7bfa      	ldrb	r2, [r7, #15]
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fe fff1 	bl	8007a14 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe ffaa 	bl	8007992 <USBD_LL_Reset>
}
 8008a3e:	bf00      	nop
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe ffeb 	bl	8007a32 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d005      	beq.n	8008a70 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a64:	4b04      	ldr	r3, [pc, #16]	; (8008a78 <HAL_PCD_SuspendCallback+0x30>)
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	4a03      	ldr	r2, [pc, #12]	; (8008a78 <HAL_PCD_SuspendCallback+0x30>)
 8008a6a:	f043 0306 	orr.w	r3, r3, #6
 8008a6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	e000ed00 	.word	0xe000ed00

08008a7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe ffe5 	bl	8007a5a <USBD_LL_Resume>
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008aa0:	4a1f      	ldr	r2, [pc, #124]	; (8008b20 <USBD_LL_Init+0x88>)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a1d      	ldr	r2, [pc, #116]	; (8008b20 <USBD_LL_Init+0x88>)
 8008aac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008ab0:	4b1b      	ldr	r3, [pc, #108]	; (8008b20 <USBD_LL_Init+0x88>)
 8008ab2:	4a1c      	ldr	r2, [pc, #112]	; (8008b24 <USBD_LL_Init+0x8c>)
 8008ab4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008ab6:	4b1a      	ldr	r3, [pc, #104]	; (8008b20 <USBD_LL_Init+0x88>)
 8008ab8:	2208      	movs	r2, #8
 8008aba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008abc:	4b18      	ldr	r3, [pc, #96]	; (8008b20 <USBD_LL_Init+0x88>)
 8008abe:	2202      	movs	r2, #2
 8008ac0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008ac2:	4b17      	ldr	r3, [pc, #92]	; (8008b20 <USBD_LL_Init+0x88>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008ac8:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <USBD_LL_Init+0x88>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008ace:	4b14      	ldr	r3, [pc, #80]	; (8008b20 <USBD_LL_Init+0x88>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008ad4:	4812      	ldr	r0, [pc, #72]	; (8008b20 <USBD_LL_Init+0x88>)
 8008ad6:	f7f9 fc7f 	bl	80023d8 <HAL_PCD_Init>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008ae0:	f7f7 fe88 	bl	80007f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aea:	2318      	movs	r3, #24
 8008aec:	2200      	movs	r2, #0
 8008aee:	2100      	movs	r1, #0
 8008af0:	f7fb f8dc 	bl	8003cac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008afa:	2358      	movs	r3, #88	; 0x58
 8008afc:	2200      	movs	r2, #0
 8008afe:	2180      	movs	r1, #128	; 0x80
 8008b00:	f7fb f8d4 	bl	8003cac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2181      	movs	r1, #129	; 0x81
 8008b12:	f7fb f8cb 	bl	8003cac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20000b18 	.word	0x20000b18
 8008b24:	40005c00 	.word	0x40005c00

08008b28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7f9 fd55 	bl	80025ee <HAL_PCD_Start>
 8008b44:	4603      	mov	r3, r0
 8008b46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 f93c 	bl	8008dc8 <USBD_Get_USB_Status>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	4608      	mov	r0, r1
 8008b68:	4611      	mov	r1, r2
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	70fb      	strb	r3, [r7, #3]
 8008b70:	460b      	mov	r3, r1
 8008b72:	70bb      	strb	r3, [r7, #2]
 8008b74:	4613      	mov	r3, r2
 8008b76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b86:	78bb      	ldrb	r3, [r7, #2]
 8008b88:	883a      	ldrh	r2, [r7, #0]
 8008b8a:	78f9      	ldrb	r1, [r7, #3]
 8008b8c:	f7f9 fecd 	bl	800292a <HAL_PCD_EP_Open>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 f916 	bl	8008dc8 <USBD_Get_USB_Status>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bc4:	78fa      	ldrb	r2, [r7, #3]
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7f9 ff14 	bl	80029f6 <HAL_PCD_EP_Close>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 f8f7 	bl	8008dc8 <USBD_Get_USB_Status>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c02:	78fa      	ldrb	r2, [r7, #3]
 8008c04:	4611      	mov	r1, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7f9 ffbd 	bl	8002b86 <HAL_PCD_EP_SetStall>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 f8d8 	bl	8008dc8 <USBD_Get_USB_Status>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c40:	78fa      	ldrb	r2, [r7, #3]
 8008c42:	4611      	mov	r1, r2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7f9 fffe 	bl	8002c46 <HAL_PCD_EP_ClrStall>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 f8b9 	bl	8008dc8 <USBD_Get_USB_Status>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	da0c      	bge.n	8008c9a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c86:	68f9      	ldr	r1, [r7, #12]
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	440b      	add	r3, r1
 8008c94:	3302      	adds	r3, #2
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	e00b      	b.n	8008cb2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c9a:	78fb      	ldrb	r3, [r7, #3]
 8008c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ca0:	68f9      	ldr	r1, [r7, #12]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	440b      	add	r3, r1
 8008cac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008cb0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3714      	adds	r7, #20
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bc80      	pop	{r7}
 8008cba:	4770      	bx	lr

08008cbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cd6:	78fa      	ldrb	r2, [r7, #3]
 8008cd8:	4611      	mov	r1, r2
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7f9 fe00 	bl	80028e0 <HAL_PCD_SetAddress>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 f86e 	bl	8008dc8 <USBD_Get_USB_Status>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b086      	sub	sp, #24
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	461a      	mov	r2, r3
 8008d06:	460b      	mov	r3, r1
 8008d08:	72fb      	strb	r3, [r7, #11]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d1c:	893b      	ldrh	r3, [r7, #8]
 8008d1e:	7af9      	ldrb	r1, [r7, #11]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	f7f9 feed 	bl	8002b00 <HAL_PCD_EP_Transmit>
 8008d26:	4603      	mov	r3, r0
 8008d28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d2a:	7dfb      	ldrb	r3, [r7, #23]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f000 f84b 	bl	8008dc8 <USBD_Get_USB_Status>
 8008d32:	4603      	mov	r3, r0
 8008d34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d36:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	607a      	str	r2, [r7, #4]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	72fb      	strb	r3, [r7, #11]
 8008d50:	4613      	mov	r3, r2
 8008d52:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d62:	893b      	ldrh	r3, [r7, #8]
 8008d64:	7af9      	ldrb	r1, [r7, #11]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	f7f9 fe8d 	bl	8002a86 <HAL_PCD_EP_Receive>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 f828 	bl	8008dc8 <USBD_Get_USB_Status>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d90:	4b02      	ldr	r3, [pc, #8]	; (8008d9c <USBD_static_malloc+0x14>)
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr
 8008d9c:	20000e04 	.word	0x20000e04

08008da0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]

}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr

08008db2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008dbe:	bf00      	nop
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bc80      	pop	{r7}
 8008dc6:	4770      	bx	lr

08008dc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dd6:	79fb      	ldrb	r3, [r7, #7]
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d817      	bhi.n	8008e0c <USBD_Get_USB_Status+0x44>
 8008ddc:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <USBD_Get_USB_Status+0x1c>)
 8008dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de2:	bf00      	nop
 8008de4:	08008df5 	.word	0x08008df5
 8008de8:	08008dfb 	.word	0x08008dfb
 8008dec:	08008e01 	.word	0x08008e01
 8008df0:	08008e07 	.word	0x08008e07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73fb      	strb	r3, [r7, #15]
    break;
 8008df8:	e00b      	b.n	8008e12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dfe:	e008      	b.n	8008e12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e00:	2301      	movs	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]
    break;
 8008e04:	e005      	b.n	8008e12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e06:	2302      	movs	r3, #2
 8008e08:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0a:	e002      	b.n	8008e12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e10:	bf00      	nop
  }
  return usb_status;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc80      	pop	{r7}
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop

08008e20 <__errno>:
 8008e20:	4b01      	ldr	r3, [pc, #4]	; (8008e28 <__errno+0x8>)
 8008e22:	6818      	ldr	r0, [r3, #0]
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	20000160 	.word	0x20000160

08008e2c <__libc_init_array>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	2600      	movs	r6, #0
 8008e30:	4d0c      	ldr	r5, [pc, #48]	; (8008e64 <__libc_init_array+0x38>)
 8008e32:	4c0d      	ldr	r4, [pc, #52]	; (8008e68 <__libc_init_array+0x3c>)
 8008e34:	1b64      	subs	r4, r4, r5
 8008e36:	10a4      	asrs	r4, r4, #2
 8008e38:	42a6      	cmp	r6, r4
 8008e3a:	d109      	bne.n	8008e50 <__libc_init_array+0x24>
 8008e3c:	f000 fc9c 	bl	8009778 <_init>
 8008e40:	2600      	movs	r6, #0
 8008e42:	4d0a      	ldr	r5, [pc, #40]	; (8008e6c <__libc_init_array+0x40>)
 8008e44:	4c0a      	ldr	r4, [pc, #40]	; (8008e70 <__libc_init_array+0x44>)
 8008e46:	1b64      	subs	r4, r4, r5
 8008e48:	10a4      	asrs	r4, r4, #2
 8008e4a:	42a6      	cmp	r6, r4
 8008e4c:	d105      	bne.n	8008e5a <__libc_init_array+0x2e>
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}
 8008e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e54:	4798      	blx	r3
 8008e56:	3601      	adds	r6, #1
 8008e58:	e7ee      	b.n	8008e38 <__libc_init_array+0xc>
 8008e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e5e:	4798      	blx	r3
 8008e60:	3601      	adds	r6, #1
 8008e62:	e7f2      	b.n	8008e4a <__libc_init_array+0x1e>
 8008e64:	0800aa4c 	.word	0x0800aa4c
 8008e68:	0800aa4c 	.word	0x0800aa4c
 8008e6c:	0800aa4c 	.word	0x0800aa4c
 8008e70:	0800aa50 	.word	0x0800aa50

08008e74 <memset>:
 8008e74:	4603      	mov	r3, r0
 8008e76:	4402      	add	r2, r0
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d100      	bne.n	8008e7e <memset+0xa>
 8008e7c:	4770      	bx	lr
 8008e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e82:	e7f9      	b.n	8008e78 <memset+0x4>

08008e84 <siprintf>:
 8008e84:	b40e      	push	{r1, r2, r3}
 8008e86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e8a:	b500      	push	{lr}
 8008e8c:	b09c      	sub	sp, #112	; 0x70
 8008e8e:	ab1d      	add	r3, sp, #116	; 0x74
 8008e90:	9002      	str	r0, [sp, #8]
 8008e92:	9006      	str	r0, [sp, #24]
 8008e94:	9107      	str	r1, [sp, #28]
 8008e96:	9104      	str	r1, [sp, #16]
 8008e98:	4808      	ldr	r0, [pc, #32]	; (8008ebc <siprintf+0x38>)
 8008e9a:	4909      	ldr	r1, [pc, #36]	; (8008ec0 <siprintf+0x3c>)
 8008e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea0:	9105      	str	r1, [sp, #20]
 8008ea2:	6800      	ldr	r0, [r0, #0]
 8008ea4:	a902      	add	r1, sp, #8
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	f000 f868 	bl	8008f7c <_svfiprintf_r>
 8008eac:	2200      	movs	r2, #0
 8008eae:	9b02      	ldr	r3, [sp, #8]
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	b01c      	add	sp, #112	; 0x70
 8008eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb8:	b003      	add	sp, #12
 8008eba:	4770      	bx	lr
 8008ebc:	20000160 	.word	0x20000160
 8008ec0:	ffff0208 	.word	0xffff0208

08008ec4 <__ssputs_r>:
 8008ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec8:	688e      	ldr	r6, [r1, #8]
 8008eca:	4682      	mov	sl, r0
 8008ecc:	429e      	cmp	r6, r3
 8008ece:	460c      	mov	r4, r1
 8008ed0:	4690      	mov	r8, r2
 8008ed2:	461f      	mov	r7, r3
 8008ed4:	d838      	bhi.n	8008f48 <__ssputs_r+0x84>
 8008ed6:	898a      	ldrh	r2, [r1, #12]
 8008ed8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008edc:	d032      	beq.n	8008f44 <__ssputs_r+0x80>
 8008ede:	6825      	ldr	r5, [r4, #0]
 8008ee0:	6909      	ldr	r1, [r1, #16]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	eba5 0901 	sub.w	r9, r5, r1
 8008ee8:	6965      	ldr	r5, [r4, #20]
 8008eea:	444b      	add	r3, r9
 8008eec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ef0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ef4:	106d      	asrs	r5, r5, #1
 8008ef6:	429d      	cmp	r5, r3
 8008ef8:	bf38      	it	cc
 8008efa:	461d      	movcc	r5, r3
 8008efc:	0553      	lsls	r3, r2, #21
 8008efe:	d531      	bpl.n	8008f64 <__ssputs_r+0xa0>
 8008f00:	4629      	mov	r1, r5
 8008f02:	f000 fb6f 	bl	80095e4 <_malloc_r>
 8008f06:	4606      	mov	r6, r0
 8008f08:	b950      	cbnz	r0, 8008f20 <__ssputs_r+0x5c>
 8008f0a:	230c      	movs	r3, #12
 8008f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f10:	f8ca 3000 	str.w	r3, [sl]
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f1a:	81a3      	strh	r3, [r4, #12]
 8008f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f20:	464a      	mov	r2, r9
 8008f22:	6921      	ldr	r1, [r4, #16]
 8008f24:	f000 face 	bl	80094c4 <memcpy>
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f32:	81a3      	strh	r3, [r4, #12]
 8008f34:	6126      	str	r6, [r4, #16]
 8008f36:	444e      	add	r6, r9
 8008f38:	6026      	str	r6, [r4, #0]
 8008f3a:	463e      	mov	r6, r7
 8008f3c:	6165      	str	r5, [r4, #20]
 8008f3e:	eba5 0509 	sub.w	r5, r5, r9
 8008f42:	60a5      	str	r5, [r4, #8]
 8008f44:	42be      	cmp	r6, r7
 8008f46:	d900      	bls.n	8008f4a <__ssputs_r+0x86>
 8008f48:	463e      	mov	r6, r7
 8008f4a:	4632      	mov	r2, r6
 8008f4c:	4641      	mov	r1, r8
 8008f4e:	6820      	ldr	r0, [r4, #0]
 8008f50:	f000 fac6 	bl	80094e0 <memmove>
 8008f54:	68a3      	ldr	r3, [r4, #8]
 8008f56:	2000      	movs	r0, #0
 8008f58:	1b9b      	subs	r3, r3, r6
 8008f5a:	60a3      	str	r3, [r4, #8]
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	4433      	add	r3, r6
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	e7db      	b.n	8008f1c <__ssputs_r+0x58>
 8008f64:	462a      	mov	r2, r5
 8008f66:	f000 fbb1 	bl	80096cc <_realloc_r>
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d1e1      	bne.n	8008f34 <__ssputs_r+0x70>
 8008f70:	4650      	mov	r0, sl
 8008f72:	6921      	ldr	r1, [r4, #16]
 8008f74:	f000 face 	bl	8009514 <_free_r>
 8008f78:	e7c7      	b.n	8008f0a <__ssputs_r+0x46>
	...

08008f7c <_svfiprintf_r>:
 8008f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f80:	4698      	mov	r8, r3
 8008f82:	898b      	ldrh	r3, [r1, #12]
 8008f84:	4607      	mov	r7, r0
 8008f86:	061b      	lsls	r3, r3, #24
 8008f88:	460d      	mov	r5, r1
 8008f8a:	4614      	mov	r4, r2
 8008f8c:	b09d      	sub	sp, #116	; 0x74
 8008f8e:	d50e      	bpl.n	8008fae <_svfiprintf_r+0x32>
 8008f90:	690b      	ldr	r3, [r1, #16]
 8008f92:	b963      	cbnz	r3, 8008fae <_svfiprintf_r+0x32>
 8008f94:	2140      	movs	r1, #64	; 0x40
 8008f96:	f000 fb25 	bl	80095e4 <_malloc_r>
 8008f9a:	6028      	str	r0, [r5, #0]
 8008f9c:	6128      	str	r0, [r5, #16]
 8008f9e:	b920      	cbnz	r0, 8008faa <_svfiprintf_r+0x2e>
 8008fa0:	230c      	movs	r3, #12
 8008fa2:	603b      	str	r3, [r7, #0]
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fa8:	e0d1      	b.n	800914e <_svfiprintf_r+0x1d2>
 8008faa:	2340      	movs	r3, #64	; 0x40
 8008fac:	616b      	str	r3, [r5, #20]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb2:	2320      	movs	r3, #32
 8008fb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fb8:	2330      	movs	r3, #48	; 0x30
 8008fba:	f04f 0901 	mov.w	r9, #1
 8008fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009168 <_svfiprintf_r+0x1ec>
 8008fc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fca:	4623      	mov	r3, r4
 8008fcc:	469a      	mov	sl, r3
 8008fce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fd2:	b10a      	cbz	r2, 8008fd8 <_svfiprintf_r+0x5c>
 8008fd4:	2a25      	cmp	r2, #37	; 0x25
 8008fd6:	d1f9      	bne.n	8008fcc <_svfiprintf_r+0x50>
 8008fd8:	ebba 0b04 	subs.w	fp, sl, r4
 8008fdc:	d00b      	beq.n	8008ff6 <_svfiprintf_r+0x7a>
 8008fde:	465b      	mov	r3, fp
 8008fe0:	4622      	mov	r2, r4
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	f7ff ff6d 	bl	8008ec4 <__ssputs_r>
 8008fea:	3001      	adds	r0, #1
 8008fec:	f000 80aa 	beq.w	8009144 <_svfiprintf_r+0x1c8>
 8008ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ff2:	445a      	add	r2, fp
 8008ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 80a2 	beq.w	8009144 <_svfiprintf_r+0x1c8>
 8009000:	2300      	movs	r3, #0
 8009002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800900a:	f10a 0a01 	add.w	sl, sl, #1
 800900e:	9304      	str	r3, [sp, #16]
 8009010:	9307      	str	r3, [sp, #28]
 8009012:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009016:	931a      	str	r3, [sp, #104]	; 0x68
 8009018:	4654      	mov	r4, sl
 800901a:	2205      	movs	r2, #5
 800901c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009020:	4851      	ldr	r0, [pc, #324]	; (8009168 <_svfiprintf_r+0x1ec>)
 8009022:	f000 fa41 	bl	80094a8 <memchr>
 8009026:	9a04      	ldr	r2, [sp, #16]
 8009028:	b9d8      	cbnz	r0, 8009062 <_svfiprintf_r+0xe6>
 800902a:	06d0      	lsls	r0, r2, #27
 800902c:	bf44      	itt	mi
 800902e:	2320      	movmi	r3, #32
 8009030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009034:	0711      	lsls	r1, r2, #28
 8009036:	bf44      	itt	mi
 8009038:	232b      	movmi	r3, #43	; 0x2b
 800903a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800903e:	f89a 3000 	ldrb.w	r3, [sl]
 8009042:	2b2a      	cmp	r3, #42	; 0x2a
 8009044:	d015      	beq.n	8009072 <_svfiprintf_r+0xf6>
 8009046:	4654      	mov	r4, sl
 8009048:	2000      	movs	r0, #0
 800904a:	f04f 0c0a 	mov.w	ip, #10
 800904e:	9a07      	ldr	r2, [sp, #28]
 8009050:	4621      	mov	r1, r4
 8009052:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009056:	3b30      	subs	r3, #48	; 0x30
 8009058:	2b09      	cmp	r3, #9
 800905a:	d94e      	bls.n	80090fa <_svfiprintf_r+0x17e>
 800905c:	b1b0      	cbz	r0, 800908c <_svfiprintf_r+0x110>
 800905e:	9207      	str	r2, [sp, #28]
 8009060:	e014      	b.n	800908c <_svfiprintf_r+0x110>
 8009062:	eba0 0308 	sub.w	r3, r0, r8
 8009066:	fa09 f303 	lsl.w	r3, r9, r3
 800906a:	4313      	orrs	r3, r2
 800906c:	46a2      	mov	sl, r4
 800906e:	9304      	str	r3, [sp, #16]
 8009070:	e7d2      	b.n	8009018 <_svfiprintf_r+0x9c>
 8009072:	9b03      	ldr	r3, [sp, #12]
 8009074:	1d19      	adds	r1, r3, #4
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	9103      	str	r1, [sp, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	bfbb      	ittet	lt
 800907e:	425b      	neglt	r3, r3
 8009080:	f042 0202 	orrlt.w	r2, r2, #2
 8009084:	9307      	strge	r3, [sp, #28]
 8009086:	9307      	strlt	r3, [sp, #28]
 8009088:	bfb8      	it	lt
 800908a:	9204      	strlt	r2, [sp, #16]
 800908c:	7823      	ldrb	r3, [r4, #0]
 800908e:	2b2e      	cmp	r3, #46	; 0x2e
 8009090:	d10c      	bne.n	80090ac <_svfiprintf_r+0x130>
 8009092:	7863      	ldrb	r3, [r4, #1]
 8009094:	2b2a      	cmp	r3, #42	; 0x2a
 8009096:	d135      	bne.n	8009104 <_svfiprintf_r+0x188>
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	3402      	adds	r4, #2
 800909c:	1d1a      	adds	r2, r3, #4
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	9203      	str	r2, [sp, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	bfb8      	it	lt
 80090a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090aa:	9305      	str	r3, [sp, #20]
 80090ac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800916c <_svfiprintf_r+0x1f0>
 80090b0:	2203      	movs	r2, #3
 80090b2:	4650      	mov	r0, sl
 80090b4:	7821      	ldrb	r1, [r4, #0]
 80090b6:	f000 f9f7 	bl	80094a8 <memchr>
 80090ba:	b140      	cbz	r0, 80090ce <_svfiprintf_r+0x152>
 80090bc:	2340      	movs	r3, #64	; 0x40
 80090be:	eba0 000a 	sub.w	r0, r0, sl
 80090c2:	fa03 f000 	lsl.w	r0, r3, r0
 80090c6:	9b04      	ldr	r3, [sp, #16]
 80090c8:	3401      	adds	r4, #1
 80090ca:	4303      	orrs	r3, r0
 80090cc:	9304      	str	r3, [sp, #16]
 80090ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d2:	2206      	movs	r2, #6
 80090d4:	4826      	ldr	r0, [pc, #152]	; (8009170 <_svfiprintf_r+0x1f4>)
 80090d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090da:	f000 f9e5 	bl	80094a8 <memchr>
 80090de:	2800      	cmp	r0, #0
 80090e0:	d038      	beq.n	8009154 <_svfiprintf_r+0x1d8>
 80090e2:	4b24      	ldr	r3, [pc, #144]	; (8009174 <_svfiprintf_r+0x1f8>)
 80090e4:	bb1b      	cbnz	r3, 800912e <_svfiprintf_r+0x1b2>
 80090e6:	9b03      	ldr	r3, [sp, #12]
 80090e8:	3307      	adds	r3, #7
 80090ea:	f023 0307 	bic.w	r3, r3, #7
 80090ee:	3308      	adds	r3, #8
 80090f0:	9303      	str	r3, [sp, #12]
 80090f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f4:	4433      	add	r3, r6
 80090f6:	9309      	str	r3, [sp, #36]	; 0x24
 80090f8:	e767      	b.n	8008fca <_svfiprintf_r+0x4e>
 80090fa:	460c      	mov	r4, r1
 80090fc:	2001      	movs	r0, #1
 80090fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009102:	e7a5      	b.n	8009050 <_svfiprintf_r+0xd4>
 8009104:	2300      	movs	r3, #0
 8009106:	f04f 0c0a 	mov.w	ip, #10
 800910a:	4619      	mov	r1, r3
 800910c:	3401      	adds	r4, #1
 800910e:	9305      	str	r3, [sp, #20]
 8009110:	4620      	mov	r0, r4
 8009112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009116:	3a30      	subs	r2, #48	; 0x30
 8009118:	2a09      	cmp	r2, #9
 800911a:	d903      	bls.n	8009124 <_svfiprintf_r+0x1a8>
 800911c:	2b00      	cmp	r3, #0
 800911e:	d0c5      	beq.n	80090ac <_svfiprintf_r+0x130>
 8009120:	9105      	str	r1, [sp, #20]
 8009122:	e7c3      	b.n	80090ac <_svfiprintf_r+0x130>
 8009124:	4604      	mov	r4, r0
 8009126:	2301      	movs	r3, #1
 8009128:	fb0c 2101 	mla	r1, ip, r1, r2
 800912c:	e7f0      	b.n	8009110 <_svfiprintf_r+0x194>
 800912e:	ab03      	add	r3, sp, #12
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	462a      	mov	r2, r5
 8009134:	4638      	mov	r0, r7
 8009136:	4b10      	ldr	r3, [pc, #64]	; (8009178 <_svfiprintf_r+0x1fc>)
 8009138:	a904      	add	r1, sp, #16
 800913a:	f3af 8000 	nop.w
 800913e:	1c42      	adds	r2, r0, #1
 8009140:	4606      	mov	r6, r0
 8009142:	d1d6      	bne.n	80090f2 <_svfiprintf_r+0x176>
 8009144:	89ab      	ldrh	r3, [r5, #12]
 8009146:	065b      	lsls	r3, r3, #25
 8009148:	f53f af2c 	bmi.w	8008fa4 <_svfiprintf_r+0x28>
 800914c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800914e:	b01d      	add	sp, #116	; 0x74
 8009150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009154:	ab03      	add	r3, sp, #12
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	462a      	mov	r2, r5
 800915a:	4638      	mov	r0, r7
 800915c:	4b06      	ldr	r3, [pc, #24]	; (8009178 <_svfiprintf_r+0x1fc>)
 800915e:	a904      	add	r1, sp, #16
 8009160:	f000 f87c 	bl	800925c <_printf_i>
 8009164:	e7eb      	b.n	800913e <_svfiprintf_r+0x1c2>
 8009166:	bf00      	nop
 8009168:	0800aa18 	.word	0x0800aa18
 800916c:	0800aa1e 	.word	0x0800aa1e
 8009170:	0800aa22 	.word	0x0800aa22
 8009174:	00000000 	.word	0x00000000
 8009178:	08008ec5 	.word	0x08008ec5

0800917c <_printf_common>:
 800917c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009180:	4616      	mov	r6, r2
 8009182:	4699      	mov	r9, r3
 8009184:	688a      	ldr	r2, [r1, #8]
 8009186:	690b      	ldr	r3, [r1, #16]
 8009188:	4607      	mov	r7, r0
 800918a:	4293      	cmp	r3, r2
 800918c:	bfb8      	it	lt
 800918e:	4613      	movlt	r3, r2
 8009190:	6033      	str	r3, [r6, #0]
 8009192:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009196:	460c      	mov	r4, r1
 8009198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800919c:	b10a      	cbz	r2, 80091a2 <_printf_common+0x26>
 800919e:	3301      	adds	r3, #1
 80091a0:	6033      	str	r3, [r6, #0]
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	0699      	lsls	r1, r3, #26
 80091a6:	bf42      	ittt	mi
 80091a8:	6833      	ldrmi	r3, [r6, #0]
 80091aa:	3302      	addmi	r3, #2
 80091ac:	6033      	strmi	r3, [r6, #0]
 80091ae:	6825      	ldr	r5, [r4, #0]
 80091b0:	f015 0506 	ands.w	r5, r5, #6
 80091b4:	d106      	bne.n	80091c4 <_printf_common+0x48>
 80091b6:	f104 0a19 	add.w	sl, r4, #25
 80091ba:	68e3      	ldr	r3, [r4, #12]
 80091bc:	6832      	ldr	r2, [r6, #0]
 80091be:	1a9b      	subs	r3, r3, r2
 80091c0:	42ab      	cmp	r3, r5
 80091c2:	dc28      	bgt.n	8009216 <_printf_common+0x9a>
 80091c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091c8:	1e13      	subs	r3, r2, #0
 80091ca:	6822      	ldr	r2, [r4, #0]
 80091cc:	bf18      	it	ne
 80091ce:	2301      	movne	r3, #1
 80091d0:	0692      	lsls	r2, r2, #26
 80091d2:	d42d      	bmi.n	8009230 <_printf_common+0xb4>
 80091d4:	4649      	mov	r1, r9
 80091d6:	4638      	mov	r0, r7
 80091d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091dc:	47c0      	blx	r8
 80091de:	3001      	adds	r0, #1
 80091e0:	d020      	beq.n	8009224 <_printf_common+0xa8>
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	68e5      	ldr	r5, [r4, #12]
 80091e6:	f003 0306 	and.w	r3, r3, #6
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	bf18      	it	ne
 80091ee:	2500      	movne	r5, #0
 80091f0:	6832      	ldr	r2, [r6, #0]
 80091f2:	f04f 0600 	mov.w	r6, #0
 80091f6:	68a3      	ldr	r3, [r4, #8]
 80091f8:	bf08      	it	eq
 80091fa:	1aad      	subeq	r5, r5, r2
 80091fc:	6922      	ldr	r2, [r4, #16]
 80091fe:	bf08      	it	eq
 8009200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009204:	4293      	cmp	r3, r2
 8009206:	bfc4      	itt	gt
 8009208:	1a9b      	subgt	r3, r3, r2
 800920a:	18ed      	addgt	r5, r5, r3
 800920c:	341a      	adds	r4, #26
 800920e:	42b5      	cmp	r5, r6
 8009210:	d11a      	bne.n	8009248 <_printf_common+0xcc>
 8009212:	2000      	movs	r0, #0
 8009214:	e008      	b.n	8009228 <_printf_common+0xac>
 8009216:	2301      	movs	r3, #1
 8009218:	4652      	mov	r2, sl
 800921a:	4649      	mov	r1, r9
 800921c:	4638      	mov	r0, r7
 800921e:	47c0      	blx	r8
 8009220:	3001      	adds	r0, #1
 8009222:	d103      	bne.n	800922c <_printf_common+0xb0>
 8009224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800922c:	3501      	adds	r5, #1
 800922e:	e7c4      	b.n	80091ba <_printf_common+0x3e>
 8009230:	2030      	movs	r0, #48	; 0x30
 8009232:	18e1      	adds	r1, r4, r3
 8009234:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800923e:	4422      	add	r2, r4
 8009240:	3302      	adds	r3, #2
 8009242:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009246:	e7c5      	b.n	80091d4 <_printf_common+0x58>
 8009248:	2301      	movs	r3, #1
 800924a:	4622      	mov	r2, r4
 800924c:	4649      	mov	r1, r9
 800924e:	4638      	mov	r0, r7
 8009250:	47c0      	blx	r8
 8009252:	3001      	adds	r0, #1
 8009254:	d0e6      	beq.n	8009224 <_printf_common+0xa8>
 8009256:	3601      	adds	r6, #1
 8009258:	e7d9      	b.n	800920e <_printf_common+0x92>
	...

0800925c <_printf_i>:
 800925c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009260:	7e0f      	ldrb	r7, [r1, #24]
 8009262:	4691      	mov	r9, r2
 8009264:	2f78      	cmp	r7, #120	; 0x78
 8009266:	4680      	mov	r8, r0
 8009268:	460c      	mov	r4, r1
 800926a:	469a      	mov	sl, r3
 800926c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800926e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009272:	d807      	bhi.n	8009284 <_printf_i+0x28>
 8009274:	2f62      	cmp	r7, #98	; 0x62
 8009276:	d80a      	bhi.n	800928e <_printf_i+0x32>
 8009278:	2f00      	cmp	r7, #0
 800927a:	f000 80d9 	beq.w	8009430 <_printf_i+0x1d4>
 800927e:	2f58      	cmp	r7, #88	; 0x58
 8009280:	f000 80a4 	beq.w	80093cc <_printf_i+0x170>
 8009284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800928c:	e03a      	b.n	8009304 <_printf_i+0xa8>
 800928e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009292:	2b15      	cmp	r3, #21
 8009294:	d8f6      	bhi.n	8009284 <_printf_i+0x28>
 8009296:	a101      	add	r1, pc, #4	; (adr r1, 800929c <_printf_i+0x40>)
 8009298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800929c:	080092f5 	.word	0x080092f5
 80092a0:	08009309 	.word	0x08009309
 80092a4:	08009285 	.word	0x08009285
 80092a8:	08009285 	.word	0x08009285
 80092ac:	08009285 	.word	0x08009285
 80092b0:	08009285 	.word	0x08009285
 80092b4:	08009309 	.word	0x08009309
 80092b8:	08009285 	.word	0x08009285
 80092bc:	08009285 	.word	0x08009285
 80092c0:	08009285 	.word	0x08009285
 80092c4:	08009285 	.word	0x08009285
 80092c8:	08009417 	.word	0x08009417
 80092cc:	08009339 	.word	0x08009339
 80092d0:	080093f9 	.word	0x080093f9
 80092d4:	08009285 	.word	0x08009285
 80092d8:	08009285 	.word	0x08009285
 80092dc:	08009439 	.word	0x08009439
 80092e0:	08009285 	.word	0x08009285
 80092e4:	08009339 	.word	0x08009339
 80092e8:	08009285 	.word	0x08009285
 80092ec:	08009285 	.word	0x08009285
 80092f0:	08009401 	.word	0x08009401
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	1d1a      	adds	r2, r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	602a      	str	r2, [r5, #0]
 80092fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009304:	2301      	movs	r3, #1
 8009306:	e0a4      	b.n	8009452 <_printf_i+0x1f6>
 8009308:	6820      	ldr	r0, [r4, #0]
 800930a:	6829      	ldr	r1, [r5, #0]
 800930c:	0606      	lsls	r6, r0, #24
 800930e:	f101 0304 	add.w	r3, r1, #4
 8009312:	d50a      	bpl.n	800932a <_printf_i+0xce>
 8009314:	680e      	ldr	r6, [r1, #0]
 8009316:	602b      	str	r3, [r5, #0]
 8009318:	2e00      	cmp	r6, #0
 800931a:	da03      	bge.n	8009324 <_printf_i+0xc8>
 800931c:	232d      	movs	r3, #45	; 0x2d
 800931e:	4276      	negs	r6, r6
 8009320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009324:	230a      	movs	r3, #10
 8009326:	485e      	ldr	r0, [pc, #376]	; (80094a0 <_printf_i+0x244>)
 8009328:	e019      	b.n	800935e <_printf_i+0x102>
 800932a:	680e      	ldr	r6, [r1, #0]
 800932c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009330:	602b      	str	r3, [r5, #0]
 8009332:	bf18      	it	ne
 8009334:	b236      	sxthne	r6, r6
 8009336:	e7ef      	b.n	8009318 <_printf_i+0xbc>
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	6820      	ldr	r0, [r4, #0]
 800933c:	1d19      	adds	r1, r3, #4
 800933e:	6029      	str	r1, [r5, #0]
 8009340:	0601      	lsls	r1, r0, #24
 8009342:	d501      	bpl.n	8009348 <_printf_i+0xec>
 8009344:	681e      	ldr	r6, [r3, #0]
 8009346:	e002      	b.n	800934e <_printf_i+0xf2>
 8009348:	0646      	lsls	r6, r0, #25
 800934a:	d5fb      	bpl.n	8009344 <_printf_i+0xe8>
 800934c:	881e      	ldrh	r6, [r3, #0]
 800934e:	2f6f      	cmp	r7, #111	; 0x6f
 8009350:	bf0c      	ite	eq
 8009352:	2308      	moveq	r3, #8
 8009354:	230a      	movne	r3, #10
 8009356:	4852      	ldr	r0, [pc, #328]	; (80094a0 <_printf_i+0x244>)
 8009358:	2100      	movs	r1, #0
 800935a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800935e:	6865      	ldr	r5, [r4, #4]
 8009360:	2d00      	cmp	r5, #0
 8009362:	bfa8      	it	ge
 8009364:	6821      	ldrge	r1, [r4, #0]
 8009366:	60a5      	str	r5, [r4, #8]
 8009368:	bfa4      	itt	ge
 800936a:	f021 0104 	bicge.w	r1, r1, #4
 800936e:	6021      	strge	r1, [r4, #0]
 8009370:	b90e      	cbnz	r6, 8009376 <_printf_i+0x11a>
 8009372:	2d00      	cmp	r5, #0
 8009374:	d04d      	beq.n	8009412 <_printf_i+0x1b6>
 8009376:	4615      	mov	r5, r2
 8009378:	fbb6 f1f3 	udiv	r1, r6, r3
 800937c:	fb03 6711 	mls	r7, r3, r1, r6
 8009380:	5dc7      	ldrb	r7, [r0, r7]
 8009382:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009386:	4637      	mov	r7, r6
 8009388:	42bb      	cmp	r3, r7
 800938a:	460e      	mov	r6, r1
 800938c:	d9f4      	bls.n	8009378 <_printf_i+0x11c>
 800938e:	2b08      	cmp	r3, #8
 8009390:	d10b      	bne.n	80093aa <_printf_i+0x14e>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	07de      	lsls	r6, r3, #31
 8009396:	d508      	bpl.n	80093aa <_printf_i+0x14e>
 8009398:	6923      	ldr	r3, [r4, #16]
 800939a:	6861      	ldr	r1, [r4, #4]
 800939c:	4299      	cmp	r1, r3
 800939e:	bfde      	ittt	le
 80093a0:	2330      	movle	r3, #48	; 0x30
 80093a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093a6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80093aa:	1b52      	subs	r2, r2, r5
 80093ac:	6122      	str	r2, [r4, #16]
 80093ae:	464b      	mov	r3, r9
 80093b0:	4621      	mov	r1, r4
 80093b2:	4640      	mov	r0, r8
 80093b4:	f8cd a000 	str.w	sl, [sp]
 80093b8:	aa03      	add	r2, sp, #12
 80093ba:	f7ff fedf 	bl	800917c <_printf_common>
 80093be:	3001      	adds	r0, #1
 80093c0:	d14c      	bne.n	800945c <_printf_i+0x200>
 80093c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093c6:	b004      	add	sp, #16
 80093c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093cc:	4834      	ldr	r0, [pc, #208]	; (80094a0 <_printf_i+0x244>)
 80093ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80093d2:	6829      	ldr	r1, [r5, #0]
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80093da:	6029      	str	r1, [r5, #0]
 80093dc:	061d      	lsls	r5, r3, #24
 80093de:	d514      	bpl.n	800940a <_printf_i+0x1ae>
 80093e0:	07df      	lsls	r7, r3, #31
 80093e2:	bf44      	itt	mi
 80093e4:	f043 0320 	orrmi.w	r3, r3, #32
 80093e8:	6023      	strmi	r3, [r4, #0]
 80093ea:	b91e      	cbnz	r6, 80093f4 <_printf_i+0x198>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	f023 0320 	bic.w	r3, r3, #32
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	2310      	movs	r3, #16
 80093f6:	e7af      	b.n	8009358 <_printf_i+0xfc>
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	f043 0320 	orr.w	r3, r3, #32
 80093fe:	6023      	str	r3, [r4, #0]
 8009400:	2378      	movs	r3, #120	; 0x78
 8009402:	4828      	ldr	r0, [pc, #160]	; (80094a4 <_printf_i+0x248>)
 8009404:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009408:	e7e3      	b.n	80093d2 <_printf_i+0x176>
 800940a:	0659      	lsls	r1, r3, #25
 800940c:	bf48      	it	mi
 800940e:	b2b6      	uxthmi	r6, r6
 8009410:	e7e6      	b.n	80093e0 <_printf_i+0x184>
 8009412:	4615      	mov	r5, r2
 8009414:	e7bb      	b.n	800938e <_printf_i+0x132>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	6826      	ldr	r6, [r4, #0]
 800941a:	1d18      	adds	r0, r3, #4
 800941c:	6961      	ldr	r1, [r4, #20]
 800941e:	6028      	str	r0, [r5, #0]
 8009420:	0635      	lsls	r5, r6, #24
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	d501      	bpl.n	800942a <_printf_i+0x1ce>
 8009426:	6019      	str	r1, [r3, #0]
 8009428:	e002      	b.n	8009430 <_printf_i+0x1d4>
 800942a:	0670      	lsls	r0, r6, #25
 800942c:	d5fb      	bpl.n	8009426 <_printf_i+0x1ca>
 800942e:	8019      	strh	r1, [r3, #0]
 8009430:	2300      	movs	r3, #0
 8009432:	4615      	mov	r5, r2
 8009434:	6123      	str	r3, [r4, #16]
 8009436:	e7ba      	b.n	80093ae <_printf_i+0x152>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	2100      	movs	r1, #0
 800943c:	1d1a      	adds	r2, r3, #4
 800943e:	602a      	str	r2, [r5, #0]
 8009440:	681d      	ldr	r5, [r3, #0]
 8009442:	6862      	ldr	r2, [r4, #4]
 8009444:	4628      	mov	r0, r5
 8009446:	f000 f82f 	bl	80094a8 <memchr>
 800944a:	b108      	cbz	r0, 8009450 <_printf_i+0x1f4>
 800944c:	1b40      	subs	r0, r0, r5
 800944e:	6060      	str	r0, [r4, #4]
 8009450:	6863      	ldr	r3, [r4, #4]
 8009452:	6123      	str	r3, [r4, #16]
 8009454:	2300      	movs	r3, #0
 8009456:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800945a:	e7a8      	b.n	80093ae <_printf_i+0x152>
 800945c:	462a      	mov	r2, r5
 800945e:	4649      	mov	r1, r9
 8009460:	4640      	mov	r0, r8
 8009462:	6923      	ldr	r3, [r4, #16]
 8009464:	47d0      	blx	sl
 8009466:	3001      	adds	r0, #1
 8009468:	d0ab      	beq.n	80093c2 <_printf_i+0x166>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	079b      	lsls	r3, r3, #30
 800946e:	d413      	bmi.n	8009498 <_printf_i+0x23c>
 8009470:	68e0      	ldr	r0, [r4, #12]
 8009472:	9b03      	ldr	r3, [sp, #12]
 8009474:	4298      	cmp	r0, r3
 8009476:	bfb8      	it	lt
 8009478:	4618      	movlt	r0, r3
 800947a:	e7a4      	b.n	80093c6 <_printf_i+0x16a>
 800947c:	2301      	movs	r3, #1
 800947e:	4632      	mov	r2, r6
 8009480:	4649      	mov	r1, r9
 8009482:	4640      	mov	r0, r8
 8009484:	47d0      	blx	sl
 8009486:	3001      	adds	r0, #1
 8009488:	d09b      	beq.n	80093c2 <_printf_i+0x166>
 800948a:	3501      	adds	r5, #1
 800948c:	68e3      	ldr	r3, [r4, #12]
 800948e:	9903      	ldr	r1, [sp, #12]
 8009490:	1a5b      	subs	r3, r3, r1
 8009492:	42ab      	cmp	r3, r5
 8009494:	dcf2      	bgt.n	800947c <_printf_i+0x220>
 8009496:	e7eb      	b.n	8009470 <_printf_i+0x214>
 8009498:	2500      	movs	r5, #0
 800949a:	f104 0619 	add.w	r6, r4, #25
 800949e:	e7f5      	b.n	800948c <_printf_i+0x230>
 80094a0:	0800aa29 	.word	0x0800aa29
 80094a4:	0800aa3a 	.word	0x0800aa3a

080094a8 <memchr>:
 80094a8:	4603      	mov	r3, r0
 80094aa:	b510      	push	{r4, lr}
 80094ac:	b2c9      	uxtb	r1, r1
 80094ae:	4402      	add	r2, r0
 80094b0:	4293      	cmp	r3, r2
 80094b2:	4618      	mov	r0, r3
 80094b4:	d101      	bne.n	80094ba <memchr+0x12>
 80094b6:	2000      	movs	r0, #0
 80094b8:	e003      	b.n	80094c2 <memchr+0x1a>
 80094ba:	7804      	ldrb	r4, [r0, #0]
 80094bc:	3301      	adds	r3, #1
 80094be:	428c      	cmp	r4, r1
 80094c0:	d1f6      	bne.n	80094b0 <memchr+0x8>
 80094c2:	bd10      	pop	{r4, pc}

080094c4 <memcpy>:
 80094c4:	440a      	add	r2, r1
 80094c6:	4291      	cmp	r1, r2
 80094c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80094cc:	d100      	bne.n	80094d0 <memcpy+0xc>
 80094ce:	4770      	bx	lr
 80094d0:	b510      	push	{r4, lr}
 80094d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094d6:	4291      	cmp	r1, r2
 80094d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094dc:	d1f9      	bne.n	80094d2 <memcpy+0xe>
 80094de:	bd10      	pop	{r4, pc}

080094e0 <memmove>:
 80094e0:	4288      	cmp	r0, r1
 80094e2:	b510      	push	{r4, lr}
 80094e4:	eb01 0402 	add.w	r4, r1, r2
 80094e8:	d902      	bls.n	80094f0 <memmove+0x10>
 80094ea:	4284      	cmp	r4, r0
 80094ec:	4623      	mov	r3, r4
 80094ee:	d807      	bhi.n	8009500 <memmove+0x20>
 80094f0:	1e43      	subs	r3, r0, #1
 80094f2:	42a1      	cmp	r1, r4
 80094f4:	d008      	beq.n	8009508 <memmove+0x28>
 80094f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094fe:	e7f8      	b.n	80094f2 <memmove+0x12>
 8009500:	4601      	mov	r1, r0
 8009502:	4402      	add	r2, r0
 8009504:	428a      	cmp	r2, r1
 8009506:	d100      	bne.n	800950a <memmove+0x2a>
 8009508:	bd10      	pop	{r4, pc}
 800950a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800950e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009512:	e7f7      	b.n	8009504 <memmove+0x24>

08009514 <_free_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4605      	mov	r5, r0
 8009518:	2900      	cmp	r1, #0
 800951a:	d040      	beq.n	800959e <_free_r+0x8a>
 800951c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009520:	1f0c      	subs	r4, r1, #4
 8009522:	2b00      	cmp	r3, #0
 8009524:	bfb8      	it	lt
 8009526:	18e4      	addlt	r4, r4, r3
 8009528:	f000 f910 	bl	800974c <__malloc_lock>
 800952c:	4a1c      	ldr	r2, [pc, #112]	; (80095a0 <_free_r+0x8c>)
 800952e:	6813      	ldr	r3, [r2, #0]
 8009530:	b933      	cbnz	r3, 8009540 <_free_r+0x2c>
 8009532:	6063      	str	r3, [r4, #4]
 8009534:	6014      	str	r4, [r2, #0]
 8009536:	4628      	mov	r0, r5
 8009538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800953c:	f000 b90c 	b.w	8009758 <__malloc_unlock>
 8009540:	42a3      	cmp	r3, r4
 8009542:	d908      	bls.n	8009556 <_free_r+0x42>
 8009544:	6820      	ldr	r0, [r4, #0]
 8009546:	1821      	adds	r1, r4, r0
 8009548:	428b      	cmp	r3, r1
 800954a:	bf01      	itttt	eq
 800954c:	6819      	ldreq	r1, [r3, #0]
 800954e:	685b      	ldreq	r3, [r3, #4]
 8009550:	1809      	addeq	r1, r1, r0
 8009552:	6021      	streq	r1, [r4, #0]
 8009554:	e7ed      	b.n	8009532 <_free_r+0x1e>
 8009556:	461a      	mov	r2, r3
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	b10b      	cbz	r3, 8009560 <_free_r+0x4c>
 800955c:	42a3      	cmp	r3, r4
 800955e:	d9fa      	bls.n	8009556 <_free_r+0x42>
 8009560:	6811      	ldr	r1, [r2, #0]
 8009562:	1850      	adds	r0, r2, r1
 8009564:	42a0      	cmp	r0, r4
 8009566:	d10b      	bne.n	8009580 <_free_r+0x6c>
 8009568:	6820      	ldr	r0, [r4, #0]
 800956a:	4401      	add	r1, r0
 800956c:	1850      	adds	r0, r2, r1
 800956e:	4283      	cmp	r3, r0
 8009570:	6011      	str	r1, [r2, #0]
 8009572:	d1e0      	bne.n	8009536 <_free_r+0x22>
 8009574:	6818      	ldr	r0, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4401      	add	r1, r0
 800957a:	6011      	str	r1, [r2, #0]
 800957c:	6053      	str	r3, [r2, #4]
 800957e:	e7da      	b.n	8009536 <_free_r+0x22>
 8009580:	d902      	bls.n	8009588 <_free_r+0x74>
 8009582:	230c      	movs	r3, #12
 8009584:	602b      	str	r3, [r5, #0]
 8009586:	e7d6      	b.n	8009536 <_free_r+0x22>
 8009588:	6820      	ldr	r0, [r4, #0]
 800958a:	1821      	adds	r1, r4, r0
 800958c:	428b      	cmp	r3, r1
 800958e:	bf01      	itttt	eq
 8009590:	6819      	ldreq	r1, [r3, #0]
 8009592:	685b      	ldreq	r3, [r3, #4]
 8009594:	1809      	addeq	r1, r1, r0
 8009596:	6021      	streq	r1, [r4, #0]
 8009598:	6063      	str	r3, [r4, #4]
 800959a:	6054      	str	r4, [r2, #4]
 800959c:	e7cb      	b.n	8009536 <_free_r+0x22>
 800959e:	bd38      	pop	{r3, r4, r5, pc}
 80095a0:	20000e18 	.word	0x20000e18

080095a4 <sbrk_aligned>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	4e0e      	ldr	r6, [pc, #56]	; (80095e0 <sbrk_aligned+0x3c>)
 80095a8:	460c      	mov	r4, r1
 80095aa:	6831      	ldr	r1, [r6, #0]
 80095ac:	4605      	mov	r5, r0
 80095ae:	b911      	cbnz	r1, 80095b6 <sbrk_aligned+0x12>
 80095b0:	f000 f8bc 	bl	800972c <_sbrk_r>
 80095b4:	6030      	str	r0, [r6, #0]
 80095b6:	4621      	mov	r1, r4
 80095b8:	4628      	mov	r0, r5
 80095ba:	f000 f8b7 	bl	800972c <_sbrk_r>
 80095be:	1c43      	adds	r3, r0, #1
 80095c0:	d00a      	beq.n	80095d8 <sbrk_aligned+0x34>
 80095c2:	1cc4      	adds	r4, r0, #3
 80095c4:	f024 0403 	bic.w	r4, r4, #3
 80095c8:	42a0      	cmp	r0, r4
 80095ca:	d007      	beq.n	80095dc <sbrk_aligned+0x38>
 80095cc:	1a21      	subs	r1, r4, r0
 80095ce:	4628      	mov	r0, r5
 80095d0:	f000 f8ac 	bl	800972c <_sbrk_r>
 80095d4:	3001      	adds	r0, #1
 80095d6:	d101      	bne.n	80095dc <sbrk_aligned+0x38>
 80095d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80095dc:	4620      	mov	r0, r4
 80095de:	bd70      	pop	{r4, r5, r6, pc}
 80095e0:	20000e1c 	.word	0x20000e1c

080095e4 <_malloc_r>:
 80095e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e8:	1ccd      	adds	r5, r1, #3
 80095ea:	f025 0503 	bic.w	r5, r5, #3
 80095ee:	3508      	adds	r5, #8
 80095f0:	2d0c      	cmp	r5, #12
 80095f2:	bf38      	it	cc
 80095f4:	250c      	movcc	r5, #12
 80095f6:	2d00      	cmp	r5, #0
 80095f8:	4607      	mov	r7, r0
 80095fa:	db01      	blt.n	8009600 <_malloc_r+0x1c>
 80095fc:	42a9      	cmp	r1, r5
 80095fe:	d905      	bls.n	800960c <_malloc_r+0x28>
 8009600:	230c      	movs	r3, #12
 8009602:	2600      	movs	r6, #0
 8009604:	603b      	str	r3, [r7, #0]
 8009606:	4630      	mov	r0, r6
 8009608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800960c:	4e2e      	ldr	r6, [pc, #184]	; (80096c8 <_malloc_r+0xe4>)
 800960e:	f000 f89d 	bl	800974c <__malloc_lock>
 8009612:	6833      	ldr	r3, [r6, #0]
 8009614:	461c      	mov	r4, r3
 8009616:	bb34      	cbnz	r4, 8009666 <_malloc_r+0x82>
 8009618:	4629      	mov	r1, r5
 800961a:	4638      	mov	r0, r7
 800961c:	f7ff ffc2 	bl	80095a4 <sbrk_aligned>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	4604      	mov	r4, r0
 8009624:	d14d      	bne.n	80096c2 <_malloc_r+0xde>
 8009626:	6834      	ldr	r4, [r6, #0]
 8009628:	4626      	mov	r6, r4
 800962a:	2e00      	cmp	r6, #0
 800962c:	d140      	bne.n	80096b0 <_malloc_r+0xcc>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	4631      	mov	r1, r6
 8009632:	4638      	mov	r0, r7
 8009634:	eb04 0803 	add.w	r8, r4, r3
 8009638:	f000 f878 	bl	800972c <_sbrk_r>
 800963c:	4580      	cmp	r8, r0
 800963e:	d13a      	bne.n	80096b6 <_malloc_r+0xd2>
 8009640:	6821      	ldr	r1, [r4, #0]
 8009642:	3503      	adds	r5, #3
 8009644:	1a6d      	subs	r5, r5, r1
 8009646:	f025 0503 	bic.w	r5, r5, #3
 800964a:	3508      	adds	r5, #8
 800964c:	2d0c      	cmp	r5, #12
 800964e:	bf38      	it	cc
 8009650:	250c      	movcc	r5, #12
 8009652:	4638      	mov	r0, r7
 8009654:	4629      	mov	r1, r5
 8009656:	f7ff ffa5 	bl	80095a4 <sbrk_aligned>
 800965a:	3001      	adds	r0, #1
 800965c:	d02b      	beq.n	80096b6 <_malloc_r+0xd2>
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	442b      	add	r3, r5
 8009662:	6023      	str	r3, [r4, #0]
 8009664:	e00e      	b.n	8009684 <_malloc_r+0xa0>
 8009666:	6822      	ldr	r2, [r4, #0]
 8009668:	1b52      	subs	r2, r2, r5
 800966a:	d41e      	bmi.n	80096aa <_malloc_r+0xc6>
 800966c:	2a0b      	cmp	r2, #11
 800966e:	d916      	bls.n	800969e <_malloc_r+0xba>
 8009670:	1961      	adds	r1, r4, r5
 8009672:	42a3      	cmp	r3, r4
 8009674:	6025      	str	r5, [r4, #0]
 8009676:	bf18      	it	ne
 8009678:	6059      	strne	r1, [r3, #4]
 800967a:	6863      	ldr	r3, [r4, #4]
 800967c:	bf08      	it	eq
 800967e:	6031      	streq	r1, [r6, #0]
 8009680:	5162      	str	r2, [r4, r5]
 8009682:	604b      	str	r3, [r1, #4]
 8009684:	4638      	mov	r0, r7
 8009686:	f104 060b 	add.w	r6, r4, #11
 800968a:	f000 f865 	bl	8009758 <__malloc_unlock>
 800968e:	f026 0607 	bic.w	r6, r6, #7
 8009692:	1d23      	adds	r3, r4, #4
 8009694:	1af2      	subs	r2, r6, r3
 8009696:	d0b6      	beq.n	8009606 <_malloc_r+0x22>
 8009698:	1b9b      	subs	r3, r3, r6
 800969a:	50a3      	str	r3, [r4, r2]
 800969c:	e7b3      	b.n	8009606 <_malloc_r+0x22>
 800969e:	6862      	ldr	r2, [r4, #4]
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	bf0c      	ite	eq
 80096a4:	6032      	streq	r2, [r6, #0]
 80096a6:	605a      	strne	r2, [r3, #4]
 80096a8:	e7ec      	b.n	8009684 <_malloc_r+0xa0>
 80096aa:	4623      	mov	r3, r4
 80096ac:	6864      	ldr	r4, [r4, #4]
 80096ae:	e7b2      	b.n	8009616 <_malloc_r+0x32>
 80096b0:	4634      	mov	r4, r6
 80096b2:	6876      	ldr	r6, [r6, #4]
 80096b4:	e7b9      	b.n	800962a <_malloc_r+0x46>
 80096b6:	230c      	movs	r3, #12
 80096b8:	4638      	mov	r0, r7
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	f000 f84c 	bl	8009758 <__malloc_unlock>
 80096c0:	e7a1      	b.n	8009606 <_malloc_r+0x22>
 80096c2:	6025      	str	r5, [r4, #0]
 80096c4:	e7de      	b.n	8009684 <_malloc_r+0xa0>
 80096c6:	bf00      	nop
 80096c8:	20000e18 	.word	0x20000e18

080096cc <_realloc_r>:
 80096cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096d0:	4680      	mov	r8, r0
 80096d2:	4614      	mov	r4, r2
 80096d4:	460e      	mov	r6, r1
 80096d6:	b921      	cbnz	r1, 80096e2 <_realloc_r+0x16>
 80096d8:	4611      	mov	r1, r2
 80096da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096de:	f7ff bf81 	b.w	80095e4 <_malloc_r>
 80096e2:	b92a      	cbnz	r2, 80096f0 <_realloc_r+0x24>
 80096e4:	f7ff ff16 	bl	8009514 <_free_r>
 80096e8:	4625      	mov	r5, r4
 80096ea:	4628      	mov	r0, r5
 80096ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096f0:	f000 f838 	bl	8009764 <_malloc_usable_size_r>
 80096f4:	4284      	cmp	r4, r0
 80096f6:	4607      	mov	r7, r0
 80096f8:	d802      	bhi.n	8009700 <_realloc_r+0x34>
 80096fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096fe:	d812      	bhi.n	8009726 <_realloc_r+0x5a>
 8009700:	4621      	mov	r1, r4
 8009702:	4640      	mov	r0, r8
 8009704:	f7ff ff6e 	bl	80095e4 <_malloc_r>
 8009708:	4605      	mov	r5, r0
 800970a:	2800      	cmp	r0, #0
 800970c:	d0ed      	beq.n	80096ea <_realloc_r+0x1e>
 800970e:	42bc      	cmp	r4, r7
 8009710:	4622      	mov	r2, r4
 8009712:	4631      	mov	r1, r6
 8009714:	bf28      	it	cs
 8009716:	463a      	movcs	r2, r7
 8009718:	f7ff fed4 	bl	80094c4 <memcpy>
 800971c:	4631      	mov	r1, r6
 800971e:	4640      	mov	r0, r8
 8009720:	f7ff fef8 	bl	8009514 <_free_r>
 8009724:	e7e1      	b.n	80096ea <_realloc_r+0x1e>
 8009726:	4635      	mov	r5, r6
 8009728:	e7df      	b.n	80096ea <_realloc_r+0x1e>
	...

0800972c <_sbrk_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	2300      	movs	r3, #0
 8009730:	4d05      	ldr	r5, [pc, #20]	; (8009748 <_sbrk_r+0x1c>)
 8009732:	4604      	mov	r4, r0
 8009734:	4608      	mov	r0, r1
 8009736:	602b      	str	r3, [r5, #0]
 8009738:	f7f7 fd2c 	bl	8001194 <_sbrk>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_sbrk_r+0x1a>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_sbrk_r+0x1a>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	20000e20 	.word	0x20000e20

0800974c <__malloc_lock>:
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <__malloc_lock+0x8>)
 800974e:	f000 b811 	b.w	8009774 <__retarget_lock_acquire_recursive>
 8009752:	bf00      	nop
 8009754:	20000e24 	.word	0x20000e24

08009758 <__malloc_unlock>:
 8009758:	4801      	ldr	r0, [pc, #4]	; (8009760 <__malloc_unlock+0x8>)
 800975a:	f000 b80c 	b.w	8009776 <__retarget_lock_release_recursive>
 800975e:	bf00      	nop
 8009760:	20000e24 	.word	0x20000e24

08009764 <_malloc_usable_size_r>:
 8009764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009768:	1f18      	subs	r0, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	bfbc      	itt	lt
 800976e:	580b      	ldrlt	r3, [r1, r0]
 8009770:	18c0      	addlt	r0, r0, r3
 8009772:	4770      	bx	lr

08009774 <__retarget_lock_acquire_recursive>:
 8009774:	4770      	bx	lr

08009776 <__retarget_lock_release_recursive>:
 8009776:	4770      	bx	lr

08009778 <_init>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	bf00      	nop
 800977c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977e:	bc08      	pop	{r3}
 8009780:	469e      	mov	lr, r3
 8009782:	4770      	bx	lr

08009784 <_fini>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	bf00      	nop
 8009788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978a:	bc08      	pop	{r3}
 800978c:	469e      	mov	lr, r3
 800978e:	4770      	bx	lr
